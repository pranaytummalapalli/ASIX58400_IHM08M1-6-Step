
spn8-test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c54  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08102eec  08102eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102efc  08102efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102f00  08102f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000040  10000000  08102f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  10000040  08102f44  00020040  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100000ac  08102f44  000200ac  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d152  00000000  00000000  000200b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e07  00000000  00000000  0002d205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d68  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a45  00000000  00000000  0002fd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039426  00000000  00000000  000307bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f0d0  00000000  00000000  00069be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017dfe9  00000000  00000000  00078cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003760  00000000  00000000  001f6c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001fa3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000040 	.word	0x10000040
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08102ed4 	.word	0x08102ed4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000044 	.word	0x10000044
 81002d4:	08102ed4 	.word	0x08102ed4

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <Test_Start_PWM>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern L6398_MotorDriver_TypeDef L6398MotorDriver;

void Test_Start_PWM(){
 8100308:	b580      	push	{r7, lr}
 810030a:	af00      	add	r7, sp, #0
	L6398MotorDriver.Start_PWM_driving();
 810030c:	4b02      	ldr	r3, [pc, #8]	; (8100318 <Test_Start_PWM+0x10>)
 810030e:	691b      	ldr	r3, [r3, #16]
 8100310:	4798      	blx	r3
}
 8100312:	bf00      	nop
 8100314:	bd80      	pop	{r7, pc}
 8100316:	bf00      	nop
 8100318:	10000010 	.word	0x10000010

0810031c <Test_EnableInput_CH1_E_CH2_E_CH3_D>:
void Test_Stop_PWM(){
	L6398MotorDriver.Stop_PWM_driving();
}

void Test_EnableInput_CH1_E_CH2_E_CH3_D(uint8_t step_position,uint8_t synchronous_rect,uint16_t CCR_value)
{
 810031c:	b580      	push	{r7, lr}
 810031e:	b082      	sub	sp, #8
 8100320:	af00      	add	r7, sp, #0
 8100322:	4603      	mov	r3, r0
 8100324:	71fb      	strb	r3, [r7, #7]
 8100326:	460b      	mov	r3, r1
 8100328:	71bb      	strb	r3, [r7, #6]
 810032a:	4613      	mov	r3, r2
 810032c:	80bb      	strh	r3, [r7, #4]
   L6398MotorDriver.EnableInput_CH1_E_CH2_E_CH3_D(step_position,synchronous_rect,CCR_value);
 810032e:	4b05      	ldr	r3, [pc, #20]	; (8100344 <Test_EnableInput_CH1_E_CH2_E_CH3_D+0x28>)
 8100330:	681b      	ldr	r3, [r3, #0]
 8100332:	88ba      	ldrh	r2, [r7, #4]
 8100334:	79b9      	ldrb	r1, [r7, #6]
 8100336:	79f8      	ldrb	r0, [r7, #7]
 8100338:	4798      	blx	r3
}
 810033a:	bf00      	nop
 810033c:	3708      	adds	r7, #8
 810033e:	46bd      	mov	sp, r7
 8100340:	bd80      	pop	{r7, pc}
 8100342:	bf00      	nop
 8100344:	10000010 	.word	0x10000010

08100348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100348:	b580      	push	{r7, lr}
 810034a:	b082      	sub	sp, #8
 810034c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810034e:	4b2c      	ldr	r3, [pc, #176]	; (8100400 <main+0xb8>)
 8100350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100354:	4a2a      	ldr	r2, [pc, #168]	; (8100400 <main+0xb8>)
 8100356:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810035a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810035e:	4b28      	ldr	r3, [pc, #160]	; (8100400 <main+0xb8>)
 8100360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100368:	607b      	str	r3, [r7, #4]
 810036a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810036c:	2001      	movs	r0, #1
 810036e:	f000 fdb1 	bl	8100ed4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100372:	f000 fe3b 	bl	8100fec <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100376:	2201      	movs	r2, #1
 8100378:	2102      	movs	r1, #2
 810037a:	2000      	movs	r0, #0
 810037c:	f000 fdbc 	bl	8100ef8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100380:	4b20      	ldr	r3, [pc, #128]	; (8100404 <main+0xbc>)
 8100382:	681b      	ldr	r3, [r3, #0]
 8100384:	091b      	lsrs	r3, r3, #4
 8100386:	f003 030f 	and.w	r3, r3, #15
 810038a:	2b07      	cmp	r3, #7
 810038c:	d108      	bne.n	81003a0 <main+0x58>
 810038e:	4b1e      	ldr	r3, [pc, #120]	; (8100408 <main+0xc0>)
 8100390:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100394:	4a1c      	ldr	r2, [pc, #112]	; (8100408 <main+0xc0>)
 8100396:	f043 0301 	orr.w	r3, r3, #1
 810039a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810039e:	e007      	b.n	81003b0 <main+0x68>
 81003a0:	4b19      	ldr	r3, [pc, #100]	; (8100408 <main+0xc0>)
 81003a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81003a6:	4a18      	ldr	r2, [pc, #96]	; (8100408 <main+0xc0>)
 81003a8:	f043 0301 	orr.w	r3, r3, #1
 81003ac:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003b0:	f000 fa40 	bl	8100834 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81003b4:	f000 f8f2 	bl	810059c <MX_GPIO_Init>
  MX_TIM1_Init();
 81003b8:	f000 f82a 	bl	8100410 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&HF_TIMx, HF_TIMx_CH1);
 81003bc:	2100      	movs	r1, #0
 81003be:	4813      	ldr	r0, [pc, #76]	; (810040c <main+0xc4>)
 81003c0:	f001 f854 	bl	810146c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start_IT(&HF_TIMx, HF_TIMx_CH1);
 81003c4:	2100      	movs	r1, #0
 81003c6:	4811      	ldr	r0, [pc, #68]	; (810040c <main+0xc4>)
 81003c8:	f001 ffa8 	bl	810231c <HAL_TIMEx_PWMN_Start_IT>

  HAL_TIM_PWM_Start(&HF_TIMx, HF_TIMx_CH2);
 81003cc:	2104      	movs	r1, #4
 81003ce:	480f      	ldr	r0, [pc, #60]	; (810040c <main+0xc4>)
 81003d0:	f001 f84c 	bl	810146c <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start_IT(&HF_TIMx, HF_TIMx_CH2);
 81003d4:	2104      	movs	r1, #4
 81003d6:	480d      	ldr	r0, [pc, #52]	; (810040c <main+0xc4>)
 81003d8:	f001 ffa0 	bl	810231c <HAL_TIMEx_PWMN_Start_IT>

    HAL_TIM_PWM_Start(&HF_TIMx, HF_TIMx_CH3);
 81003dc:	2108      	movs	r1, #8
 81003de:	480b      	ldr	r0, [pc, #44]	; (810040c <main+0xc4>)
 81003e0:	f001 f844 	bl	810146c <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start_IT(&HF_TIMx, HF_TIMx_CH3);
 81003e4:	2108      	movs	r1, #8
 81003e6:	4809      	ldr	r0, [pc, #36]	; (810040c <main+0xc4>)
 81003e8:	f001 ff98 	bl	810231c <HAL_TIMEx_PWMN_Start_IT>

//	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);

//	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);

	  Test_Start_PWM();
 81003ec:	f7ff ff8c 	bl	8100308 <Test_Start_PWM>
	  Test_EnableInput_CH1_E_CH2_E_CH3_D(1, 1, 1500);
 81003f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 81003f4:	2101      	movs	r1, #1
 81003f6:	2001      	movs	r0, #1
 81003f8:	f7ff ff90 	bl	810031c <Test_EnableInput_CH1_E_CH2_E_CH3_D>
	  Test_Start_PWM();
 81003fc:	e7f6      	b.n	81003ec <main+0xa4>
 81003fe:	bf00      	nop
 8100400:	58024400 	.word	0x58024400
 8100404:	e000ed00 	.word	0xe000ed00
 8100408:	58026400 	.word	0x58026400
 810040c:	1000005c 	.word	0x1000005c

08100410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8100410:	b580      	push	{r7, lr}
 8100412:	b09a      	sub	sp, #104	; 0x68
 8100414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810041a:	2200      	movs	r2, #0
 810041c:	601a      	str	r2, [r3, #0]
 810041e:	605a      	str	r2, [r3, #4]
 8100420:	609a      	str	r2, [r3, #8]
 8100422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100424:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100428:	2200      	movs	r2, #0
 810042a:	601a      	str	r2, [r3, #0]
 810042c:	605a      	str	r2, [r3, #4]
 810042e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100430:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100434:	2200      	movs	r2, #0
 8100436:	601a      	str	r2, [r3, #0]
 8100438:	605a      	str	r2, [r3, #4]
 810043a:	609a      	str	r2, [r3, #8]
 810043c:	60da      	str	r2, [r3, #12]
 810043e:	611a      	str	r2, [r3, #16]
 8100440:	615a      	str	r2, [r3, #20]
 8100442:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100444:	1d3b      	adds	r3, r7, #4
 8100446:	222c      	movs	r2, #44	; 0x2c
 8100448:	2100      	movs	r1, #0
 810044a:	4618      	mov	r0, r3
 810044c:	f002 fd16 	bl	8102e7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8100450:	4b50      	ldr	r3, [pc, #320]	; (8100594 <MX_TIM1_Init+0x184>)
 8100452:	4a51      	ldr	r2, [pc, #324]	; (8100598 <MX_TIM1_Init+0x188>)
 8100454:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8100456:	4b4f      	ldr	r3, [pc, #316]	; (8100594 <MX_TIM1_Init+0x184>)
 8100458:	2247      	movs	r2, #71	; 0x47
 810045a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810045c:	4b4d      	ldr	r3, [pc, #308]	; (8100594 <MX_TIM1_Init+0x184>)
 810045e:	2200      	movs	r2, #0
 8100460:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8100462:	4b4c      	ldr	r3, [pc, #304]	; (8100594 <MX_TIM1_Init+0x184>)
 8100464:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8100468:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810046a:	4b4a      	ldr	r3, [pc, #296]	; (8100594 <MX_TIM1_Init+0x184>)
 810046c:	2200      	movs	r2, #0
 810046e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8100470:	4b48      	ldr	r3, [pc, #288]	; (8100594 <MX_TIM1_Init+0x184>)
 8100472:	2200      	movs	r2, #0
 8100474:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100476:	4b47      	ldr	r3, [pc, #284]	; (8100594 <MX_TIM1_Init+0x184>)
 8100478:	2200      	movs	r2, #0
 810047a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810047c:	4845      	ldr	r0, [pc, #276]	; (8100594 <MX_TIM1_Init+0x184>)
 810047e:	f000 ff3d 	bl	81012fc <HAL_TIM_Base_Init>
 8100482:	4603      	mov	r3, r0
 8100484:	2b00      	cmp	r3, #0
 8100486:	d001      	beq.n	810048c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8100488:	f000 f8c0 	bl	810060c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810048c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100490:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8100492:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100496:	4619      	mov	r1, r3
 8100498:	483e      	ldr	r0, [pc, #248]	; (8100594 <MX_TIM1_Init+0x184>)
 810049a:	f001 fa09 	bl	81018b0 <HAL_TIM_ConfigClockSource>
 810049e:	4603      	mov	r3, r0
 81004a0:	2b00      	cmp	r3, #0
 81004a2:	d001      	beq.n	81004a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 81004a4:	f000 f8b2 	bl	810060c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 81004a8:	483a      	ldr	r0, [pc, #232]	; (8100594 <MX_TIM1_Init+0x184>)
 81004aa:	f000 ff7e 	bl	81013aa <HAL_TIM_PWM_Init>
 81004ae:	4603      	mov	r3, r0
 81004b0:	2b00      	cmp	r3, #0
 81004b2:	d001      	beq.n	81004b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 81004b4:	f000 f8aa 	bl	810060c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81004b8:	2300      	movs	r3, #0
 81004ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81004bc:	2300      	movs	r3, #0
 81004be:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81004c0:	2300      	movs	r3, #0
 81004c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81004c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81004c8:	4619      	mov	r1, r3
 81004ca:	4832      	ldr	r0, [pc, #200]	; (8100594 <MX_TIM1_Init+0x184>)
 81004cc:	f002 f820 	bl	8102510 <HAL_TIMEx_MasterConfigSynchronization>
 81004d0:	4603      	mov	r3, r0
 81004d2:	2b00      	cmp	r3, #0
 81004d4:	d001      	beq.n	81004da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 81004d6:	f000 f899 	bl	810060c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81004da:	2360      	movs	r3, #96	; 0x60
 81004dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 81004de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81004e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81004e4:	2300      	movs	r3, #0
 81004e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81004e8:	2300      	movs	r3, #0
 81004ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81004ec:	2300      	movs	r3, #0
 81004ee:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81004f0:	2300      	movs	r3, #0
 81004f2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81004f4:	2300      	movs	r3, #0
 81004f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81004f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81004fc:	2200      	movs	r2, #0
 81004fe:	4619      	mov	r1, r3
 8100500:	4824      	ldr	r0, [pc, #144]	; (8100594 <MX_TIM1_Init+0x184>)
 8100502:	f001 f8c1 	bl	8101688 <HAL_TIM_PWM_ConfigChannel>
 8100506:	4603      	mov	r3, r0
 8100508:	2b00      	cmp	r3, #0
 810050a:	d001      	beq.n	8100510 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 810050c:	f000 f87e 	bl	810060c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100510:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100514:	2204      	movs	r2, #4
 8100516:	4619      	mov	r1, r3
 8100518:	481e      	ldr	r0, [pc, #120]	; (8100594 <MX_TIM1_Init+0x184>)
 810051a:	f001 f8b5 	bl	8101688 <HAL_TIM_PWM_ConfigChannel>
 810051e:	4603      	mov	r3, r0
 8100520:	2b00      	cmp	r3, #0
 8100522:	d001      	beq.n	8100528 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8100524:	f000 f872 	bl	810060c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8100528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810052c:	2208      	movs	r2, #8
 810052e:	4619      	mov	r1, r3
 8100530:	4818      	ldr	r0, [pc, #96]	; (8100594 <MX_TIM1_Init+0x184>)
 8100532:	f001 f8a9 	bl	8101688 <HAL_TIM_PWM_ConfigChannel>
 8100536:	4603      	mov	r3, r0
 8100538:	2b00      	cmp	r3, #0
 810053a:	d001      	beq.n	8100540 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 810053c:	f000 f866 	bl	810060c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100540:	2300      	movs	r3, #0
 8100542:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100544:	2300      	movs	r3, #0
 8100546:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100548:	2300      	movs	r3, #0
 810054a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 25;
 810054c:	2319      	movs	r3, #25
 810054e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100550:	2300      	movs	r3, #0
 8100552:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100558:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810055a:	2300      	movs	r3, #0
 810055c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810055e:	2300      	movs	r3, #0
 8100560:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100566:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100568:	2300      	movs	r3, #0
 810056a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810056c:	2300      	movs	r3, #0
 810056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8100570:	1d3b      	adds	r3, r7, #4
 8100572:	4619      	mov	r1, r3
 8100574:	4807      	ldr	r0, [pc, #28]	; (8100594 <MX_TIM1_Init+0x184>)
 8100576:	f002 f859 	bl	810262c <HAL_TIMEx_ConfigBreakDeadTime>
 810057a:	4603      	mov	r3, r0
 810057c:	2b00      	cmp	r3, #0
 810057e:	d001      	beq.n	8100584 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8100580:	f000 f844 	bl	810060c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8100584:	4803      	ldr	r0, [pc, #12]	; (8100594 <MX_TIM1_Init+0x184>)
 8100586:	f000 f883 	bl	8100690 <HAL_TIM_MspPostInit>

}
 810058a:	bf00      	nop
 810058c:	3768      	adds	r7, #104	; 0x68
 810058e:	46bd      	mov	sp, r7
 8100590:	bd80      	pop	{r7, pc}
 8100592:	bf00      	nop
 8100594:	1000005c 	.word	0x1000005c
 8100598:	40010000 	.word	0x40010000

0810059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810059c:	b480      	push	{r7}
 810059e:	b085      	sub	sp, #20
 81005a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81005a2:	4b19      	ldr	r3, [pc, #100]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005a8:	4a17      	ldr	r2, [pc, #92]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005aa:	f043 0301 	orr.w	r3, r3, #1
 81005ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005b2:	4b15      	ldr	r3, [pc, #84]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005b8:	f003 0301 	and.w	r3, r3, #1
 81005bc:	60fb      	str	r3, [r7, #12]
 81005be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81005c0:	4b11      	ldr	r3, [pc, #68]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005c6:	4a10      	ldr	r2, [pc, #64]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005c8:	f043 0302 	orr.w	r3, r3, #2
 81005cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005d0:	4b0d      	ldr	r3, [pc, #52]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005d6:	f003 0302 	and.w	r3, r3, #2
 81005da:	60bb      	str	r3, [r7, #8]
 81005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81005de:	4b0a      	ldr	r3, [pc, #40]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005e4:	4a08      	ldr	r2, [pc, #32]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005e6:	f043 0310 	orr.w	r3, r3, #16
 81005ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005ee:	4b06      	ldr	r3, [pc, #24]	; (8100608 <MX_GPIO_Init+0x6c>)
 81005f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005f4:	f003 0310 	and.w	r3, r3, #16
 81005f8:	607b      	str	r3, [r7, #4]
 81005fa:	687b      	ldr	r3, [r7, #4]
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
/* USER CODE END MX_GPIO_Init_2 */
}
 81005fc:	bf00      	nop
 81005fe:	3714      	adds	r7, #20
 8100600:	46bd      	mov	sp, r7
 8100602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100606:	4770      	bx	lr
 8100608:	58024400 	.word	0x58024400

0810060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810060c:	b480      	push	{r7}
 810060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100610:	b672      	cpsid	i
}
 8100612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100614:	e7fe      	b.n	8100614 <Error_Handler+0x8>
	...

08100618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100618:	b480      	push	{r7}
 810061a:	b083      	sub	sp, #12
 810061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810061e:	4b0a      	ldr	r3, [pc, #40]	; (8100648 <HAL_MspInit+0x30>)
 8100620:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100624:	4a08      	ldr	r2, [pc, #32]	; (8100648 <HAL_MspInit+0x30>)
 8100626:	f043 0302 	orr.w	r3, r3, #2
 810062a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810062e:	4b06      	ldr	r3, [pc, #24]	; (8100648 <HAL_MspInit+0x30>)
 8100630:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100634:	f003 0302 	and.w	r3, r3, #2
 8100638:	607b      	str	r3, [r7, #4]
 810063a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810063c:	bf00      	nop
 810063e:	370c      	adds	r7, #12
 8100640:	46bd      	mov	sp, r7
 8100642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100646:	4770      	bx	lr
 8100648:	58024400 	.word	0x58024400

0810064c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 810064c:	b480      	push	{r7}
 810064e:	b085      	sub	sp, #20
 8100650:	af00      	add	r7, sp, #0
 8100652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8100654:	687b      	ldr	r3, [r7, #4]
 8100656:	681b      	ldr	r3, [r3, #0]
 8100658:	4a0b      	ldr	r2, [pc, #44]	; (8100688 <HAL_TIM_Base_MspInit+0x3c>)
 810065a:	4293      	cmp	r3, r2
 810065c:	d10e      	bne.n	810067c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 810065e:	4b0b      	ldr	r3, [pc, #44]	; (810068c <HAL_TIM_Base_MspInit+0x40>)
 8100660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100664:	4a09      	ldr	r2, [pc, #36]	; (810068c <HAL_TIM_Base_MspInit+0x40>)
 8100666:	f043 0301 	orr.w	r3, r3, #1
 810066a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810066e:	4b07      	ldr	r3, [pc, #28]	; (810068c <HAL_TIM_Base_MspInit+0x40>)
 8100670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100674:	f003 0301 	and.w	r3, r3, #1
 8100678:	60fb      	str	r3, [r7, #12]
 810067a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 810067c:	bf00      	nop
 810067e:	3714      	adds	r7, #20
 8100680:	46bd      	mov	sp, r7
 8100682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100686:	4770      	bx	lr
 8100688:	40010000 	.word	0x40010000
 810068c:	58024400 	.word	0x58024400

08100690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100690:	b580      	push	{r7, lr}
 8100692:	b08a      	sub	sp, #40	; 0x28
 8100694:	af00      	add	r7, sp, #0
 8100696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100698:	f107 0314 	add.w	r3, r7, #20
 810069c:	2200      	movs	r2, #0
 810069e:	601a      	str	r2, [r3, #0]
 81006a0:	605a      	str	r2, [r3, #4]
 81006a2:	609a      	str	r2, [r3, #8]
 81006a4:	60da      	str	r2, [r3, #12]
 81006a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 81006a8:	687b      	ldr	r3, [r7, #4]
 81006aa:	681b      	ldr	r3, [r3, #0]
 81006ac:	4a32      	ldr	r2, [pc, #200]	; (8100778 <HAL_TIM_MspPostInit+0xe8>)
 81006ae:	4293      	cmp	r3, r2
 81006b0:	d15d      	bne.n	810076e <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81006b2:	4b32      	ldr	r3, [pc, #200]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 81006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006b8:	4a30      	ldr	r2, [pc, #192]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 81006ba:	f043 0301 	orr.w	r3, r3, #1
 81006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006c2:	4b2e      	ldr	r3, [pc, #184]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 81006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006c8:	f003 0301 	and.w	r3, r3, #1
 81006cc:	613b      	str	r3, [r7, #16]
 81006ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81006d0:	4b2a      	ldr	r3, [pc, #168]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 81006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006d6:	4a29      	ldr	r2, [pc, #164]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 81006d8:	f043 0302 	orr.w	r3, r3, #2
 81006dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006e0:	4b26      	ldr	r3, [pc, #152]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 81006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006e6:	f003 0302 	and.w	r3, r3, #2
 81006ea:	60fb      	str	r3, [r7, #12]
 81006ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 81006ee:	4b23      	ldr	r3, [pc, #140]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 81006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006f4:	4a21      	ldr	r2, [pc, #132]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 81006f6:	f043 0310 	orr.w	r3, r3, #16
 81006fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006fe:	4b1f      	ldr	r3, [pc, #124]	; (810077c <HAL_TIM_MspPostInit+0xec>)
 8100700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100704:	f003 0310 	and.w	r3, r3, #16
 8100708:	60bb      	str	r3, [r7, #8]
 810070a:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM1_CH3N
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 810070c:	2380      	movs	r3, #128	; 0x80
 810070e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100710:	2302      	movs	r3, #2
 8100712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100714:	2300      	movs	r3, #0
 8100716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100718:	2300      	movs	r3, #0
 810071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810071c:	2301      	movs	r3, #1
 810071e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100720:	f107 0314 	add.w	r3, r7, #20
 8100724:	4619      	mov	r1, r3
 8100726:	4816      	ldr	r0, [pc, #88]	; (8100780 <HAL_TIM_MspPostInit+0xf0>)
 8100728:	f000 fa24 	bl	8100b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 810072c:	2303      	movs	r3, #3
 810072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100730:	2302      	movs	r3, #2
 8100732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100734:	2300      	movs	r3, #0
 8100736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100738:	2300      	movs	r3, #0
 810073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810073c:	2301      	movs	r3, #1
 810073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100740:	f107 0314 	add.w	r3, r7, #20
 8100744:	4619      	mov	r1, r3
 8100746:	480f      	ldr	r0, [pc, #60]	; (8100784 <HAL_TIM_MspPostInit+0xf4>)
 8100748:	f000 fa14 	bl	8100b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 810074c:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8100750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100752:	2302      	movs	r3, #2
 8100754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100756:	2300      	movs	r3, #0
 8100758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810075a:	2300      	movs	r3, #0
 810075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810075e:	2301      	movs	r3, #1
 8100760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100762:	f107 0314 	add.w	r3, r7, #20
 8100766:	4619      	mov	r1, r3
 8100768:	4807      	ldr	r0, [pc, #28]	; (8100788 <HAL_TIM_MspPostInit+0xf8>)
 810076a:	f000 fa03 	bl	8100b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 810076e:	bf00      	nop
 8100770:	3728      	adds	r7, #40	; 0x28
 8100772:	46bd      	mov	sp, r7
 8100774:	bd80      	pop	{r7, pc}
 8100776:	bf00      	nop
 8100778:	40010000 	.word	0x40010000
 810077c:	58024400 	.word	0x58024400
 8100780:	58020000 	.word	0x58020000
 8100784:	58020400 	.word	0x58020400
 8100788:	58021000 	.word	0x58021000

0810078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810078c:	b480      	push	{r7}
 810078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100790:	e7fe      	b.n	8100790 <NMI_Handler+0x4>

08100792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100792:	b480      	push	{r7}
 8100794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100796:	e7fe      	b.n	8100796 <HardFault_Handler+0x4>

08100798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100798:	b480      	push	{r7}
 810079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810079c:	e7fe      	b.n	810079c <MemManage_Handler+0x4>

0810079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810079e:	b480      	push	{r7}
 81007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81007a2:	e7fe      	b.n	81007a2 <BusFault_Handler+0x4>

081007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81007a4:	b480      	push	{r7}
 81007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81007a8:	e7fe      	b.n	81007a8 <UsageFault_Handler+0x4>

081007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81007aa:	b480      	push	{r7}
 81007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81007ae:	bf00      	nop
 81007b0:	46bd      	mov	sp, r7
 81007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007b6:	4770      	bx	lr

081007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81007b8:	b480      	push	{r7}
 81007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81007bc:	bf00      	nop
 81007be:	46bd      	mov	sp, r7
 81007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c4:	4770      	bx	lr

081007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81007c6:	b480      	push	{r7}
 81007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81007ca:	bf00      	nop
 81007cc:	46bd      	mov	sp, r7
 81007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d2:	4770      	bx	lr

081007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81007d4:	b580      	push	{r7, lr}
 81007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81007d8:	f000 f8c0 	bl	810095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81007dc:	bf00      	nop
 81007de:	bd80      	pop	{r7, pc}

081007e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81007e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100818 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81007e4:	f7ff fd78 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81007e8:	480c      	ldr	r0, [pc, #48]	; (810081c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81007ea:	490d      	ldr	r1, [pc, #52]	; (8100820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81007ec:	4a0d      	ldr	r2, [pc, #52]	; (8100824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81007f0:	e002      	b.n	81007f8 <LoopCopyDataInit>

081007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81007f6:	3304      	adds	r3, #4

081007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81007fc:	d3f9      	bcc.n	81007f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81007fe:	4a0a      	ldr	r2, [pc, #40]	; (8100828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100800:	4c0a      	ldr	r4, [pc, #40]	; (810082c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100804:	e001      	b.n	810080a <LoopFillZerobss>

08100806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100808:	3204      	adds	r2, #4

0810080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810080c:	d3fb      	bcc.n	8100806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810080e:	f002 fb3d 	bl	8102e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100812:	f7ff fd99 	bl	8100348 <main>
  bx  lr
 8100816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100818:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810081c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100820:	10000040 	.word	0x10000040
  ldr r2, =_sidata
 8100824:	08102f04 	.word	0x08102f04
  ldr r2, =_sbss
 8100828:	10000040 	.word	0x10000040
  ldr r4, =_ebss
 810082c:	100000ac 	.word	0x100000ac

08100830 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100830:	e7fe      	b.n	8100830 <ADC3_IRQHandler>
	...

08100834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100834:	b580      	push	{r7, lr}
 8100836:	b082      	sub	sp, #8
 8100838:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810083a:	4b28      	ldr	r3, [pc, #160]	; (81008dc <HAL_Init+0xa8>)
 810083c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100840:	4a26      	ldr	r2, [pc, #152]	; (81008dc <HAL_Init+0xa8>)
 8100842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100846:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810084a:	4b24      	ldr	r3, [pc, #144]	; (81008dc <HAL_Init+0xa8>)
 810084c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100854:	603b      	str	r3, [r7, #0]
 8100856:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100858:	4b21      	ldr	r3, [pc, #132]	; (81008e0 <HAL_Init+0xac>)
 810085a:	681b      	ldr	r3, [r3, #0]
 810085c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100860:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100864:	4a1e      	ldr	r2, [pc, #120]	; (81008e0 <HAL_Init+0xac>)
 8100866:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810086a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810086c:	4b1c      	ldr	r3, [pc, #112]	; (81008e0 <HAL_Init+0xac>)
 810086e:	681b      	ldr	r3, [r3, #0]
 8100870:	4a1b      	ldr	r2, [pc, #108]	; (81008e0 <HAL_Init+0xac>)
 8100872:	f043 0301 	orr.w	r3, r3, #1
 8100876:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100878:	2003      	movs	r0, #3
 810087a:	f000 f935 	bl	8100ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810087e:	f000 fbc3 	bl	8101008 <HAL_RCC_GetSysClockFreq>
 8100882:	4602      	mov	r2, r0
 8100884:	4b15      	ldr	r3, [pc, #84]	; (81008dc <HAL_Init+0xa8>)
 8100886:	699b      	ldr	r3, [r3, #24]
 8100888:	0a1b      	lsrs	r3, r3, #8
 810088a:	f003 030f 	and.w	r3, r3, #15
 810088e:	4915      	ldr	r1, [pc, #84]	; (81008e4 <HAL_Init+0xb0>)
 8100890:	5ccb      	ldrb	r3, [r1, r3]
 8100892:	f003 031f 	and.w	r3, r3, #31
 8100896:	fa22 f303 	lsr.w	r3, r2, r3
 810089a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810089c:	4b0f      	ldr	r3, [pc, #60]	; (81008dc <HAL_Init+0xa8>)
 810089e:	699b      	ldr	r3, [r3, #24]
 81008a0:	f003 030f 	and.w	r3, r3, #15
 81008a4:	4a0f      	ldr	r2, [pc, #60]	; (81008e4 <HAL_Init+0xb0>)
 81008a6:	5cd3      	ldrb	r3, [r2, r3]
 81008a8:	f003 031f 	and.w	r3, r3, #31
 81008ac:	687a      	ldr	r2, [r7, #4]
 81008ae:	fa22 f303 	lsr.w	r3, r2, r3
 81008b2:	4a0d      	ldr	r2, [pc, #52]	; (81008e8 <HAL_Init+0xb4>)
 81008b4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81008b6:	4b0c      	ldr	r3, [pc, #48]	; (81008e8 <HAL_Init+0xb4>)
 81008b8:	681b      	ldr	r3, [r3, #0]
 81008ba:	4a0c      	ldr	r2, [pc, #48]	; (81008ec <HAL_Init+0xb8>)
 81008bc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81008be:	200f      	movs	r0, #15
 81008c0:	f000 f816 	bl	81008f0 <HAL_InitTick>
 81008c4:	4603      	mov	r3, r0
 81008c6:	2b00      	cmp	r3, #0
 81008c8:	d001      	beq.n	81008ce <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81008ca:	2301      	movs	r3, #1
 81008cc:	e002      	b.n	81008d4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81008ce:	f7ff fea3 	bl	8100618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81008d2:	2300      	movs	r3, #0
}
 81008d4:	4618      	mov	r0, r3
 81008d6:	3708      	adds	r7, #8
 81008d8:	46bd      	mov	sp, r7
 81008da:	bd80      	pop	{r7, pc}
 81008dc:	58024400 	.word	0x58024400
 81008e0:	40024400 	.word	0x40024400
 81008e4:	08102eec 	.word	0x08102eec
 81008e8:	10000004 	.word	0x10000004
 81008ec:	10000000 	.word	0x10000000

081008f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81008f0:	b580      	push	{r7, lr}
 81008f2:	b082      	sub	sp, #8
 81008f4:	af00      	add	r7, sp, #0
 81008f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81008f8:	4b15      	ldr	r3, [pc, #84]	; (8100950 <HAL_InitTick+0x60>)
 81008fa:	781b      	ldrb	r3, [r3, #0]
 81008fc:	2b00      	cmp	r3, #0
 81008fe:	d101      	bne.n	8100904 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100900:	2301      	movs	r3, #1
 8100902:	e021      	b.n	8100948 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100904:	4b13      	ldr	r3, [pc, #76]	; (8100954 <HAL_InitTick+0x64>)
 8100906:	681a      	ldr	r2, [r3, #0]
 8100908:	4b11      	ldr	r3, [pc, #68]	; (8100950 <HAL_InitTick+0x60>)
 810090a:	781b      	ldrb	r3, [r3, #0]
 810090c:	4619      	mov	r1, r3
 810090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100912:	fbb3 f3f1 	udiv	r3, r3, r1
 8100916:	fbb2 f3f3 	udiv	r3, r2, r3
 810091a:	4618      	mov	r0, r3
 810091c:	f000 f909 	bl	8100b32 <HAL_SYSTICK_Config>
 8100920:	4603      	mov	r3, r0
 8100922:	2b00      	cmp	r3, #0
 8100924:	d001      	beq.n	810092a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100926:	2301      	movs	r3, #1
 8100928:	e00e      	b.n	8100948 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810092a:	687b      	ldr	r3, [r7, #4]
 810092c:	2b0f      	cmp	r3, #15
 810092e:	d80a      	bhi.n	8100946 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100930:	2200      	movs	r2, #0
 8100932:	6879      	ldr	r1, [r7, #4]
 8100934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100938:	f000 f8e1 	bl	8100afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810093c:	4a06      	ldr	r2, [pc, #24]	; (8100958 <HAL_InitTick+0x68>)
 810093e:	687b      	ldr	r3, [r7, #4]
 8100940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100942:	2300      	movs	r3, #0
 8100944:	e000      	b.n	8100948 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100946:	2301      	movs	r3, #1
}
 8100948:	4618      	mov	r0, r3
 810094a:	3708      	adds	r7, #8
 810094c:	46bd      	mov	sp, r7
 810094e:	bd80      	pop	{r7, pc}
 8100950:	1000000c 	.word	0x1000000c
 8100954:	10000000 	.word	0x10000000
 8100958:	10000008 	.word	0x10000008

0810095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810095c:	b480      	push	{r7}
 810095e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100960:	4b06      	ldr	r3, [pc, #24]	; (810097c <HAL_IncTick+0x20>)
 8100962:	781b      	ldrb	r3, [r3, #0]
 8100964:	461a      	mov	r2, r3
 8100966:	4b06      	ldr	r3, [pc, #24]	; (8100980 <HAL_IncTick+0x24>)
 8100968:	681b      	ldr	r3, [r3, #0]
 810096a:	4413      	add	r3, r2
 810096c:	4a04      	ldr	r2, [pc, #16]	; (8100980 <HAL_IncTick+0x24>)
 810096e:	6013      	str	r3, [r2, #0]
}
 8100970:	bf00      	nop
 8100972:	46bd      	mov	sp, r7
 8100974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100978:	4770      	bx	lr
 810097a:	bf00      	nop
 810097c:	1000000c 	.word	0x1000000c
 8100980:	100000a8 	.word	0x100000a8

08100984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100984:	b480      	push	{r7}
 8100986:	b085      	sub	sp, #20
 8100988:	af00      	add	r7, sp, #0
 810098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810098c:	687b      	ldr	r3, [r7, #4]
 810098e:	f003 0307 	and.w	r3, r3, #7
 8100992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100994:	4b0c      	ldr	r3, [pc, #48]	; (81009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8100996:	68db      	ldr	r3, [r3, #12]
 8100998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810099a:	68ba      	ldr	r2, [r7, #8]
 810099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81009a0:	4013      	ands	r3, r2
 81009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81009a4:	68fb      	ldr	r3, [r7, #12]
 81009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81009a8:	68bb      	ldr	r3, [r7, #8]
 81009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81009b6:	4a04      	ldr	r2, [pc, #16]	; (81009c8 <__NVIC_SetPriorityGrouping+0x44>)
 81009b8:	68bb      	ldr	r3, [r7, #8]
 81009ba:	60d3      	str	r3, [r2, #12]
}
 81009bc:	bf00      	nop
 81009be:	3714      	adds	r7, #20
 81009c0:	46bd      	mov	sp, r7
 81009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009c6:	4770      	bx	lr
 81009c8:	e000ed00 	.word	0xe000ed00

081009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81009cc:	b480      	push	{r7}
 81009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81009d0:	4b04      	ldr	r3, [pc, #16]	; (81009e4 <__NVIC_GetPriorityGrouping+0x18>)
 81009d2:	68db      	ldr	r3, [r3, #12]
 81009d4:	0a1b      	lsrs	r3, r3, #8
 81009d6:	f003 0307 	and.w	r3, r3, #7
}
 81009da:	4618      	mov	r0, r3
 81009dc:	46bd      	mov	sp, r7
 81009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009e2:	4770      	bx	lr
 81009e4:	e000ed00 	.word	0xe000ed00

081009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81009e8:	b480      	push	{r7}
 81009ea:	b083      	sub	sp, #12
 81009ec:	af00      	add	r7, sp, #0
 81009ee:	4603      	mov	r3, r0
 81009f0:	6039      	str	r1, [r7, #0]
 81009f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81009f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81009f8:	2b00      	cmp	r3, #0
 81009fa:	db0a      	blt.n	8100a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81009fc:	683b      	ldr	r3, [r7, #0]
 81009fe:	b2da      	uxtb	r2, r3
 8100a00:	490c      	ldr	r1, [pc, #48]	; (8100a34 <__NVIC_SetPriority+0x4c>)
 8100a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a06:	0112      	lsls	r2, r2, #4
 8100a08:	b2d2      	uxtb	r2, r2
 8100a0a:	440b      	add	r3, r1
 8100a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100a10:	e00a      	b.n	8100a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a12:	683b      	ldr	r3, [r7, #0]
 8100a14:	b2da      	uxtb	r2, r3
 8100a16:	4908      	ldr	r1, [pc, #32]	; (8100a38 <__NVIC_SetPriority+0x50>)
 8100a18:	88fb      	ldrh	r3, [r7, #6]
 8100a1a:	f003 030f 	and.w	r3, r3, #15
 8100a1e:	3b04      	subs	r3, #4
 8100a20:	0112      	lsls	r2, r2, #4
 8100a22:	b2d2      	uxtb	r2, r2
 8100a24:	440b      	add	r3, r1
 8100a26:	761a      	strb	r2, [r3, #24]
}
 8100a28:	bf00      	nop
 8100a2a:	370c      	adds	r7, #12
 8100a2c:	46bd      	mov	sp, r7
 8100a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a32:	4770      	bx	lr
 8100a34:	e000e100 	.word	0xe000e100
 8100a38:	e000ed00 	.word	0xe000ed00

08100a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100a3c:	b480      	push	{r7}
 8100a3e:	b089      	sub	sp, #36	; 0x24
 8100a40:	af00      	add	r7, sp, #0
 8100a42:	60f8      	str	r0, [r7, #12]
 8100a44:	60b9      	str	r1, [r7, #8]
 8100a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100a48:	68fb      	ldr	r3, [r7, #12]
 8100a4a:	f003 0307 	and.w	r3, r3, #7
 8100a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100a50:	69fb      	ldr	r3, [r7, #28]
 8100a52:	f1c3 0307 	rsb	r3, r3, #7
 8100a56:	2b04      	cmp	r3, #4
 8100a58:	bf28      	it	cs
 8100a5a:	2304      	movcs	r3, #4
 8100a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100a5e:	69fb      	ldr	r3, [r7, #28]
 8100a60:	3304      	adds	r3, #4
 8100a62:	2b06      	cmp	r3, #6
 8100a64:	d902      	bls.n	8100a6c <NVIC_EncodePriority+0x30>
 8100a66:	69fb      	ldr	r3, [r7, #28]
 8100a68:	3b03      	subs	r3, #3
 8100a6a:	e000      	b.n	8100a6e <NVIC_EncodePriority+0x32>
 8100a6c:	2300      	movs	r3, #0
 8100a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100a74:	69bb      	ldr	r3, [r7, #24]
 8100a76:	fa02 f303 	lsl.w	r3, r2, r3
 8100a7a:	43da      	mvns	r2, r3
 8100a7c:	68bb      	ldr	r3, [r7, #8]
 8100a7e:	401a      	ands	r2, r3
 8100a80:	697b      	ldr	r3, [r7, #20]
 8100a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8100a88:	697b      	ldr	r3, [r7, #20]
 8100a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8100a8e:	43d9      	mvns	r1, r3
 8100a90:	687b      	ldr	r3, [r7, #4]
 8100a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100a94:	4313      	orrs	r3, r2
         );
}
 8100a96:	4618      	mov	r0, r3
 8100a98:	3724      	adds	r7, #36	; 0x24
 8100a9a:	46bd      	mov	sp, r7
 8100a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aa0:	4770      	bx	lr
	...

08100aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100aa4:	b580      	push	{r7, lr}
 8100aa6:	b082      	sub	sp, #8
 8100aa8:	af00      	add	r7, sp, #0
 8100aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100aac:	687b      	ldr	r3, [r7, #4]
 8100aae:	3b01      	subs	r3, #1
 8100ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100ab4:	d301      	bcc.n	8100aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100ab6:	2301      	movs	r3, #1
 8100ab8:	e00f      	b.n	8100ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100aba:	4a0a      	ldr	r2, [pc, #40]	; (8100ae4 <SysTick_Config+0x40>)
 8100abc:	687b      	ldr	r3, [r7, #4]
 8100abe:	3b01      	subs	r3, #1
 8100ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100ac2:	210f      	movs	r1, #15
 8100ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100ac8:	f7ff ff8e 	bl	81009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100acc:	4b05      	ldr	r3, [pc, #20]	; (8100ae4 <SysTick_Config+0x40>)
 8100ace:	2200      	movs	r2, #0
 8100ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100ad2:	4b04      	ldr	r3, [pc, #16]	; (8100ae4 <SysTick_Config+0x40>)
 8100ad4:	2207      	movs	r2, #7
 8100ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100ad8:	2300      	movs	r3, #0
}
 8100ada:	4618      	mov	r0, r3
 8100adc:	3708      	adds	r7, #8
 8100ade:	46bd      	mov	sp, r7
 8100ae0:	bd80      	pop	{r7, pc}
 8100ae2:	bf00      	nop
 8100ae4:	e000e010 	.word	0xe000e010

08100ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ae8:	b580      	push	{r7, lr}
 8100aea:	b082      	sub	sp, #8
 8100aec:	af00      	add	r7, sp, #0
 8100aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100af0:	6878      	ldr	r0, [r7, #4]
 8100af2:	f7ff ff47 	bl	8100984 <__NVIC_SetPriorityGrouping>
}
 8100af6:	bf00      	nop
 8100af8:	3708      	adds	r7, #8
 8100afa:	46bd      	mov	sp, r7
 8100afc:	bd80      	pop	{r7, pc}

08100afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100afe:	b580      	push	{r7, lr}
 8100b00:	b086      	sub	sp, #24
 8100b02:	af00      	add	r7, sp, #0
 8100b04:	4603      	mov	r3, r0
 8100b06:	60b9      	str	r1, [r7, #8]
 8100b08:	607a      	str	r2, [r7, #4]
 8100b0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100b0c:	f7ff ff5e 	bl	81009cc <__NVIC_GetPriorityGrouping>
 8100b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100b12:	687a      	ldr	r2, [r7, #4]
 8100b14:	68b9      	ldr	r1, [r7, #8]
 8100b16:	6978      	ldr	r0, [r7, #20]
 8100b18:	f7ff ff90 	bl	8100a3c <NVIC_EncodePriority>
 8100b1c:	4602      	mov	r2, r0
 8100b1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100b22:	4611      	mov	r1, r2
 8100b24:	4618      	mov	r0, r3
 8100b26:	f7ff ff5f 	bl	81009e8 <__NVIC_SetPriority>
}
 8100b2a:	bf00      	nop
 8100b2c:	3718      	adds	r7, #24
 8100b2e:	46bd      	mov	sp, r7
 8100b30:	bd80      	pop	{r7, pc}

08100b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100b32:	b580      	push	{r7, lr}
 8100b34:	b082      	sub	sp, #8
 8100b36:	af00      	add	r7, sp, #0
 8100b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100b3a:	6878      	ldr	r0, [r7, #4]
 8100b3c:	f7ff ffb2 	bl	8100aa4 <SysTick_Config>
 8100b40:	4603      	mov	r3, r0
}
 8100b42:	4618      	mov	r0, r3
 8100b44:	3708      	adds	r7, #8
 8100b46:	46bd      	mov	sp, r7
 8100b48:	bd80      	pop	{r7, pc}
	...

08100b4c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b4c:	b480      	push	{r7}
 8100b4e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100b50:	4b07      	ldr	r3, [pc, #28]	; (8100b70 <HAL_GetCurrentCPUID+0x24>)
 8100b52:	681b      	ldr	r3, [r3, #0]
 8100b54:	091b      	lsrs	r3, r3, #4
 8100b56:	f003 030f 	and.w	r3, r3, #15
 8100b5a:	2b07      	cmp	r3, #7
 8100b5c:	d101      	bne.n	8100b62 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100b5e:	2303      	movs	r3, #3
 8100b60:	e000      	b.n	8100b64 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100b62:	2301      	movs	r3, #1
  }
}
 8100b64:	4618      	mov	r0, r3
 8100b66:	46bd      	mov	sp, r7
 8100b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b6c:	4770      	bx	lr
 8100b6e:	bf00      	nop
 8100b70:	e000ed00 	.word	0xe000ed00

08100b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100b74:	b480      	push	{r7}
 8100b76:	b089      	sub	sp, #36	; 0x24
 8100b78:	af00      	add	r7, sp, #0
 8100b7a:	6078      	str	r0, [r7, #4]
 8100b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100b7e:	2300      	movs	r3, #0
 8100b80:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100b82:	4b89      	ldr	r3, [pc, #548]	; (8100da8 <HAL_GPIO_Init+0x234>)
 8100b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100b86:	e194      	b.n	8100eb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100b88:	683b      	ldr	r3, [r7, #0]
 8100b8a:	681a      	ldr	r2, [r3, #0]
 8100b8c:	2101      	movs	r1, #1
 8100b8e:	69fb      	ldr	r3, [r7, #28]
 8100b90:	fa01 f303 	lsl.w	r3, r1, r3
 8100b94:	4013      	ands	r3, r2
 8100b96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100b98:	693b      	ldr	r3, [r7, #16]
 8100b9a:	2b00      	cmp	r3, #0
 8100b9c:	f000 8186 	beq.w	8100eac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100ba0:	683b      	ldr	r3, [r7, #0]
 8100ba2:	685b      	ldr	r3, [r3, #4]
 8100ba4:	f003 0303 	and.w	r3, r3, #3
 8100ba8:	2b01      	cmp	r3, #1
 8100baa:	d005      	beq.n	8100bb8 <HAL_GPIO_Init+0x44>
 8100bac:	683b      	ldr	r3, [r7, #0]
 8100bae:	685b      	ldr	r3, [r3, #4]
 8100bb0:	f003 0303 	and.w	r3, r3, #3
 8100bb4:	2b02      	cmp	r3, #2
 8100bb6:	d130      	bne.n	8100c1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100bb8:	687b      	ldr	r3, [r7, #4]
 8100bba:	689b      	ldr	r3, [r3, #8]
 8100bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100bbe:	69fb      	ldr	r3, [r7, #28]
 8100bc0:	005b      	lsls	r3, r3, #1
 8100bc2:	2203      	movs	r2, #3
 8100bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8100bc8:	43db      	mvns	r3, r3
 8100bca:	69ba      	ldr	r2, [r7, #24]
 8100bcc:	4013      	ands	r3, r2
 8100bce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100bd0:	683b      	ldr	r3, [r7, #0]
 8100bd2:	68da      	ldr	r2, [r3, #12]
 8100bd4:	69fb      	ldr	r3, [r7, #28]
 8100bd6:	005b      	lsls	r3, r3, #1
 8100bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8100bdc:	69ba      	ldr	r2, [r7, #24]
 8100bde:	4313      	orrs	r3, r2
 8100be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100be2:	687b      	ldr	r3, [r7, #4]
 8100be4:	69ba      	ldr	r2, [r7, #24]
 8100be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100be8:	687b      	ldr	r3, [r7, #4]
 8100bea:	685b      	ldr	r3, [r3, #4]
 8100bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100bee:	2201      	movs	r2, #1
 8100bf0:	69fb      	ldr	r3, [r7, #28]
 8100bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8100bf6:	43db      	mvns	r3, r3
 8100bf8:	69ba      	ldr	r2, [r7, #24]
 8100bfa:	4013      	ands	r3, r2
 8100bfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100bfe:	683b      	ldr	r3, [r7, #0]
 8100c00:	685b      	ldr	r3, [r3, #4]
 8100c02:	091b      	lsrs	r3, r3, #4
 8100c04:	f003 0201 	and.w	r2, r3, #1
 8100c08:	69fb      	ldr	r3, [r7, #28]
 8100c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c0e:	69ba      	ldr	r2, [r7, #24]
 8100c10:	4313      	orrs	r3, r2
 8100c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100c14:	687b      	ldr	r3, [r7, #4]
 8100c16:	69ba      	ldr	r2, [r7, #24]
 8100c18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100c1a:	683b      	ldr	r3, [r7, #0]
 8100c1c:	685b      	ldr	r3, [r3, #4]
 8100c1e:	f003 0303 	and.w	r3, r3, #3
 8100c22:	2b03      	cmp	r3, #3
 8100c24:	d017      	beq.n	8100c56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100c26:	687b      	ldr	r3, [r7, #4]
 8100c28:	68db      	ldr	r3, [r3, #12]
 8100c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100c2c:	69fb      	ldr	r3, [r7, #28]
 8100c2e:	005b      	lsls	r3, r3, #1
 8100c30:	2203      	movs	r2, #3
 8100c32:	fa02 f303 	lsl.w	r3, r2, r3
 8100c36:	43db      	mvns	r3, r3
 8100c38:	69ba      	ldr	r2, [r7, #24]
 8100c3a:	4013      	ands	r3, r2
 8100c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100c3e:	683b      	ldr	r3, [r7, #0]
 8100c40:	689a      	ldr	r2, [r3, #8]
 8100c42:	69fb      	ldr	r3, [r7, #28]
 8100c44:	005b      	lsls	r3, r3, #1
 8100c46:	fa02 f303 	lsl.w	r3, r2, r3
 8100c4a:	69ba      	ldr	r2, [r7, #24]
 8100c4c:	4313      	orrs	r3, r2
 8100c4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100c50:	687b      	ldr	r3, [r7, #4]
 8100c52:	69ba      	ldr	r2, [r7, #24]
 8100c54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100c56:	683b      	ldr	r3, [r7, #0]
 8100c58:	685b      	ldr	r3, [r3, #4]
 8100c5a:	f003 0303 	and.w	r3, r3, #3
 8100c5e:	2b02      	cmp	r3, #2
 8100c60:	d123      	bne.n	8100caa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100c62:	69fb      	ldr	r3, [r7, #28]
 8100c64:	08da      	lsrs	r2, r3, #3
 8100c66:	687b      	ldr	r3, [r7, #4]
 8100c68:	3208      	adds	r2, #8
 8100c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100c70:	69fb      	ldr	r3, [r7, #28]
 8100c72:	f003 0307 	and.w	r3, r3, #7
 8100c76:	009b      	lsls	r3, r3, #2
 8100c78:	220f      	movs	r2, #15
 8100c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c7e:	43db      	mvns	r3, r3
 8100c80:	69ba      	ldr	r2, [r7, #24]
 8100c82:	4013      	ands	r3, r2
 8100c84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100c86:	683b      	ldr	r3, [r7, #0]
 8100c88:	691a      	ldr	r2, [r3, #16]
 8100c8a:	69fb      	ldr	r3, [r7, #28]
 8100c8c:	f003 0307 	and.w	r3, r3, #7
 8100c90:	009b      	lsls	r3, r3, #2
 8100c92:	fa02 f303 	lsl.w	r3, r2, r3
 8100c96:	69ba      	ldr	r2, [r7, #24]
 8100c98:	4313      	orrs	r3, r2
 8100c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100c9c:	69fb      	ldr	r3, [r7, #28]
 8100c9e:	08da      	lsrs	r2, r3, #3
 8100ca0:	687b      	ldr	r3, [r7, #4]
 8100ca2:	3208      	adds	r2, #8
 8100ca4:	69b9      	ldr	r1, [r7, #24]
 8100ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100caa:	687b      	ldr	r3, [r7, #4]
 8100cac:	681b      	ldr	r3, [r3, #0]
 8100cae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100cb0:	69fb      	ldr	r3, [r7, #28]
 8100cb2:	005b      	lsls	r3, r3, #1
 8100cb4:	2203      	movs	r2, #3
 8100cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8100cba:	43db      	mvns	r3, r3
 8100cbc:	69ba      	ldr	r2, [r7, #24]
 8100cbe:	4013      	ands	r3, r2
 8100cc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100cc2:	683b      	ldr	r3, [r7, #0]
 8100cc4:	685b      	ldr	r3, [r3, #4]
 8100cc6:	f003 0203 	and.w	r2, r3, #3
 8100cca:	69fb      	ldr	r3, [r7, #28]
 8100ccc:	005b      	lsls	r3, r3, #1
 8100cce:	fa02 f303 	lsl.w	r3, r2, r3
 8100cd2:	69ba      	ldr	r2, [r7, #24]
 8100cd4:	4313      	orrs	r3, r2
 8100cd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100cd8:	687b      	ldr	r3, [r7, #4]
 8100cda:	69ba      	ldr	r2, [r7, #24]
 8100cdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100cde:	683b      	ldr	r3, [r7, #0]
 8100ce0:	685b      	ldr	r3, [r3, #4]
 8100ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100ce6:	2b00      	cmp	r3, #0
 8100ce8:	f000 80e0 	beq.w	8100eac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100cec:	4b2f      	ldr	r3, [pc, #188]	; (8100dac <HAL_GPIO_Init+0x238>)
 8100cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100cf2:	4a2e      	ldr	r2, [pc, #184]	; (8100dac <HAL_GPIO_Init+0x238>)
 8100cf4:	f043 0302 	orr.w	r3, r3, #2
 8100cf8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100cfc:	4b2b      	ldr	r3, [pc, #172]	; (8100dac <HAL_GPIO_Init+0x238>)
 8100cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d02:	f003 0302 	and.w	r3, r3, #2
 8100d06:	60fb      	str	r3, [r7, #12]
 8100d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100d0a:	4a29      	ldr	r2, [pc, #164]	; (8100db0 <HAL_GPIO_Init+0x23c>)
 8100d0c:	69fb      	ldr	r3, [r7, #28]
 8100d0e:	089b      	lsrs	r3, r3, #2
 8100d10:	3302      	adds	r3, #2
 8100d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100d18:	69fb      	ldr	r3, [r7, #28]
 8100d1a:	f003 0303 	and.w	r3, r3, #3
 8100d1e:	009b      	lsls	r3, r3, #2
 8100d20:	220f      	movs	r2, #15
 8100d22:	fa02 f303 	lsl.w	r3, r2, r3
 8100d26:	43db      	mvns	r3, r3
 8100d28:	69ba      	ldr	r2, [r7, #24]
 8100d2a:	4013      	ands	r3, r2
 8100d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100d2e:	687b      	ldr	r3, [r7, #4]
 8100d30:	4a20      	ldr	r2, [pc, #128]	; (8100db4 <HAL_GPIO_Init+0x240>)
 8100d32:	4293      	cmp	r3, r2
 8100d34:	d052      	beq.n	8100ddc <HAL_GPIO_Init+0x268>
 8100d36:	687b      	ldr	r3, [r7, #4]
 8100d38:	4a1f      	ldr	r2, [pc, #124]	; (8100db8 <HAL_GPIO_Init+0x244>)
 8100d3a:	4293      	cmp	r3, r2
 8100d3c:	d031      	beq.n	8100da2 <HAL_GPIO_Init+0x22e>
 8100d3e:	687b      	ldr	r3, [r7, #4]
 8100d40:	4a1e      	ldr	r2, [pc, #120]	; (8100dbc <HAL_GPIO_Init+0x248>)
 8100d42:	4293      	cmp	r3, r2
 8100d44:	d02b      	beq.n	8100d9e <HAL_GPIO_Init+0x22a>
 8100d46:	687b      	ldr	r3, [r7, #4]
 8100d48:	4a1d      	ldr	r2, [pc, #116]	; (8100dc0 <HAL_GPIO_Init+0x24c>)
 8100d4a:	4293      	cmp	r3, r2
 8100d4c:	d025      	beq.n	8100d9a <HAL_GPIO_Init+0x226>
 8100d4e:	687b      	ldr	r3, [r7, #4]
 8100d50:	4a1c      	ldr	r2, [pc, #112]	; (8100dc4 <HAL_GPIO_Init+0x250>)
 8100d52:	4293      	cmp	r3, r2
 8100d54:	d01f      	beq.n	8100d96 <HAL_GPIO_Init+0x222>
 8100d56:	687b      	ldr	r3, [r7, #4]
 8100d58:	4a1b      	ldr	r2, [pc, #108]	; (8100dc8 <HAL_GPIO_Init+0x254>)
 8100d5a:	4293      	cmp	r3, r2
 8100d5c:	d019      	beq.n	8100d92 <HAL_GPIO_Init+0x21e>
 8100d5e:	687b      	ldr	r3, [r7, #4]
 8100d60:	4a1a      	ldr	r2, [pc, #104]	; (8100dcc <HAL_GPIO_Init+0x258>)
 8100d62:	4293      	cmp	r3, r2
 8100d64:	d013      	beq.n	8100d8e <HAL_GPIO_Init+0x21a>
 8100d66:	687b      	ldr	r3, [r7, #4]
 8100d68:	4a19      	ldr	r2, [pc, #100]	; (8100dd0 <HAL_GPIO_Init+0x25c>)
 8100d6a:	4293      	cmp	r3, r2
 8100d6c:	d00d      	beq.n	8100d8a <HAL_GPIO_Init+0x216>
 8100d6e:	687b      	ldr	r3, [r7, #4]
 8100d70:	4a18      	ldr	r2, [pc, #96]	; (8100dd4 <HAL_GPIO_Init+0x260>)
 8100d72:	4293      	cmp	r3, r2
 8100d74:	d007      	beq.n	8100d86 <HAL_GPIO_Init+0x212>
 8100d76:	687b      	ldr	r3, [r7, #4]
 8100d78:	4a17      	ldr	r2, [pc, #92]	; (8100dd8 <HAL_GPIO_Init+0x264>)
 8100d7a:	4293      	cmp	r3, r2
 8100d7c:	d101      	bne.n	8100d82 <HAL_GPIO_Init+0x20e>
 8100d7e:	2309      	movs	r3, #9
 8100d80:	e02d      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100d82:	230a      	movs	r3, #10
 8100d84:	e02b      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100d86:	2308      	movs	r3, #8
 8100d88:	e029      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100d8a:	2307      	movs	r3, #7
 8100d8c:	e027      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100d8e:	2306      	movs	r3, #6
 8100d90:	e025      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100d92:	2305      	movs	r3, #5
 8100d94:	e023      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100d96:	2304      	movs	r3, #4
 8100d98:	e021      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100d9a:	2303      	movs	r3, #3
 8100d9c:	e01f      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100d9e:	2302      	movs	r3, #2
 8100da0:	e01d      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100da2:	2301      	movs	r3, #1
 8100da4:	e01b      	b.n	8100dde <HAL_GPIO_Init+0x26a>
 8100da6:	bf00      	nop
 8100da8:	580000c0 	.word	0x580000c0
 8100dac:	58024400 	.word	0x58024400
 8100db0:	58000400 	.word	0x58000400
 8100db4:	58020000 	.word	0x58020000
 8100db8:	58020400 	.word	0x58020400
 8100dbc:	58020800 	.word	0x58020800
 8100dc0:	58020c00 	.word	0x58020c00
 8100dc4:	58021000 	.word	0x58021000
 8100dc8:	58021400 	.word	0x58021400
 8100dcc:	58021800 	.word	0x58021800
 8100dd0:	58021c00 	.word	0x58021c00
 8100dd4:	58022000 	.word	0x58022000
 8100dd8:	58022400 	.word	0x58022400
 8100ddc:	2300      	movs	r3, #0
 8100dde:	69fa      	ldr	r2, [r7, #28]
 8100de0:	f002 0203 	and.w	r2, r2, #3
 8100de4:	0092      	lsls	r2, r2, #2
 8100de6:	4093      	lsls	r3, r2
 8100de8:	69ba      	ldr	r2, [r7, #24]
 8100dea:	4313      	orrs	r3, r2
 8100dec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100dee:	4938      	ldr	r1, [pc, #224]	; (8100ed0 <HAL_GPIO_Init+0x35c>)
 8100df0:	69fb      	ldr	r3, [r7, #28]
 8100df2:	089b      	lsrs	r3, r3, #2
 8100df4:	3302      	adds	r3, #2
 8100df6:	69ba      	ldr	r2, [r7, #24]
 8100df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e00:	681b      	ldr	r3, [r3, #0]
 8100e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e04:	693b      	ldr	r3, [r7, #16]
 8100e06:	43db      	mvns	r3, r3
 8100e08:	69ba      	ldr	r2, [r7, #24]
 8100e0a:	4013      	ands	r3, r2
 8100e0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100e0e:	683b      	ldr	r3, [r7, #0]
 8100e10:	685b      	ldr	r3, [r3, #4]
 8100e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100e16:	2b00      	cmp	r3, #0
 8100e18:	d003      	beq.n	8100e22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100e1a:	69ba      	ldr	r2, [r7, #24]
 8100e1c:	693b      	ldr	r3, [r7, #16]
 8100e1e:	4313      	orrs	r3, r2
 8100e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e26:	69bb      	ldr	r3, [r7, #24]
 8100e28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e2e:	685b      	ldr	r3, [r3, #4]
 8100e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e32:	693b      	ldr	r3, [r7, #16]
 8100e34:	43db      	mvns	r3, r3
 8100e36:	69ba      	ldr	r2, [r7, #24]
 8100e38:	4013      	ands	r3, r2
 8100e3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100e3c:	683b      	ldr	r3, [r7, #0]
 8100e3e:	685b      	ldr	r3, [r3, #4]
 8100e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100e44:	2b00      	cmp	r3, #0
 8100e46:	d003      	beq.n	8100e50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100e48:	69ba      	ldr	r2, [r7, #24]
 8100e4a:	693b      	ldr	r3, [r7, #16]
 8100e4c:	4313      	orrs	r3, r2
 8100e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100e54:	69bb      	ldr	r3, [r7, #24]
 8100e56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100e58:	697b      	ldr	r3, [r7, #20]
 8100e5a:	685b      	ldr	r3, [r3, #4]
 8100e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e5e:	693b      	ldr	r3, [r7, #16]
 8100e60:	43db      	mvns	r3, r3
 8100e62:	69ba      	ldr	r2, [r7, #24]
 8100e64:	4013      	ands	r3, r2
 8100e66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100e68:	683b      	ldr	r3, [r7, #0]
 8100e6a:	685b      	ldr	r3, [r3, #4]
 8100e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100e70:	2b00      	cmp	r3, #0
 8100e72:	d003      	beq.n	8100e7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100e74:	69ba      	ldr	r2, [r7, #24]
 8100e76:	693b      	ldr	r3, [r7, #16]
 8100e78:	4313      	orrs	r3, r2
 8100e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100e7c:	697b      	ldr	r3, [r7, #20]
 8100e7e:	69ba      	ldr	r2, [r7, #24]
 8100e80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100e82:	697b      	ldr	r3, [r7, #20]
 8100e84:	681b      	ldr	r3, [r3, #0]
 8100e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e88:	693b      	ldr	r3, [r7, #16]
 8100e8a:	43db      	mvns	r3, r3
 8100e8c:	69ba      	ldr	r2, [r7, #24]
 8100e8e:	4013      	ands	r3, r2
 8100e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100e92:	683b      	ldr	r3, [r7, #0]
 8100e94:	685b      	ldr	r3, [r3, #4]
 8100e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100e9a:	2b00      	cmp	r3, #0
 8100e9c:	d003      	beq.n	8100ea6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100e9e:	69ba      	ldr	r2, [r7, #24]
 8100ea0:	693b      	ldr	r3, [r7, #16]
 8100ea2:	4313      	orrs	r3, r2
 8100ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100ea6:	697b      	ldr	r3, [r7, #20]
 8100ea8:	69ba      	ldr	r2, [r7, #24]
 8100eaa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100eac:	69fb      	ldr	r3, [r7, #28]
 8100eae:	3301      	adds	r3, #1
 8100eb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100eb2:	683b      	ldr	r3, [r7, #0]
 8100eb4:	681a      	ldr	r2, [r3, #0]
 8100eb6:	69fb      	ldr	r3, [r7, #28]
 8100eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8100ebc:	2b00      	cmp	r3, #0
 8100ebe:	f47f ae63 	bne.w	8100b88 <HAL_GPIO_Init+0x14>
  }
}
 8100ec2:	bf00      	nop
 8100ec4:	bf00      	nop
 8100ec6:	3724      	adds	r7, #36	; 0x24
 8100ec8:	46bd      	mov	sp, r7
 8100eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ece:	4770      	bx	lr
 8100ed0:	58000400 	.word	0x58000400

08100ed4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100ed4:	b480      	push	{r7}
 8100ed6:	b083      	sub	sp, #12
 8100ed8:	af00      	add	r7, sp, #0
 8100eda:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100edc:	4b05      	ldr	r3, [pc, #20]	; (8100ef4 <HAL_HSEM_ActivateNotification+0x20>)
 8100ede:	681a      	ldr	r2, [r3, #0]
 8100ee0:	4904      	ldr	r1, [pc, #16]	; (8100ef4 <HAL_HSEM_ActivateNotification+0x20>)
 8100ee2:	687b      	ldr	r3, [r7, #4]
 8100ee4:	4313      	orrs	r3, r2
 8100ee6:	600b      	str	r3, [r1, #0]
#endif
}
 8100ee8:	bf00      	nop
 8100eea:	370c      	adds	r7, #12
 8100eec:	46bd      	mov	sp, r7
 8100eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ef2:	4770      	bx	lr
 8100ef4:	58026510 	.word	0x58026510

08100ef8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100ef8:	b580      	push	{r7, lr}
 8100efa:	b084      	sub	sp, #16
 8100efc:	af00      	add	r7, sp, #0
 8100efe:	60f8      	str	r0, [r7, #12]
 8100f00:	460b      	mov	r3, r1
 8100f02:	607a      	str	r2, [r7, #4]
 8100f04:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100f06:	4b37      	ldr	r3, [pc, #220]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f08:	681b      	ldr	r3, [r3, #0]
 8100f0a:	f023 0201 	bic.w	r2, r3, #1
 8100f0e:	4935      	ldr	r1, [pc, #212]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f10:	68fb      	ldr	r3, [r7, #12]
 8100f12:	4313      	orrs	r3, r2
 8100f14:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	2b00      	cmp	r3, #0
 8100f1a:	d123      	bne.n	8100f64 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100f1c:	f7ff fe16 	bl	8100b4c <HAL_GetCurrentCPUID>
 8100f20:	4603      	mov	r3, r0
 8100f22:	2b03      	cmp	r3, #3
 8100f24:	d158      	bne.n	8100fd8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100f26:	4b2f      	ldr	r3, [pc, #188]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f28:	691b      	ldr	r3, [r3, #16]
 8100f2a:	4a2e      	ldr	r2, [pc, #184]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f2c:	f023 0301 	bic.w	r3, r3, #1
 8100f30:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f32:	4b2d      	ldr	r3, [pc, #180]	; (8100fe8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f34:	691b      	ldr	r3, [r3, #16]
 8100f36:	4a2c      	ldr	r2, [pc, #176]	; (8100fe8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f38:	f043 0304 	orr.w	r3, r3, #4
 8100f3c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100f3e:	f3bf 8f4f 	dsb	sy
}
 8100f42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100f44:	f3bf 8f6f 	isb	sy
}
 8100f48:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100f4a:	7afb      	ldrb	r3, [r7, #11]
 8100f4c:	2b01      	cmp	r3, #1
 8100f4e:	d101      	bne.n	8100f54 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100f50:	bf30      	wfi
 8100f52:	e000      	b.n	8100f56 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100f54:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f56:	4b24      	ldr	r3, [pc, #144]	; (8100fe8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f58:	691b      	ldr	r3, [r3, #16]
 8100f5a:	4a23      	ldr	r2, [pc, #140]	; (8100fe8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f5c:	f023 0304 	bic.w	r3, r3, #4
 8100f60:	6113      	str	r3, [r2, #16]
 8100f62:	e03c      	b.n	8100fde <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100f64:	687b      	ldr	r3, [r7, #4]
 8100f66:	2b01      	cmp	r3, #1
 8100f68:	d123      	bne.n	8100fb2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100f6a:	f7ff fdef 	bl	8100b4c <HAL_GetCurrentCPUID>
 8100f6e:	4603      	mov	r3, r0
 8100f70:	2b01      	cmp	r3, #1
 8100f72:	d133      	bne.n	8100fdc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100f74:	4b1b      	ldr	r3, [pc, #108]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f76:	695b      	ldr	r3, [r3, #20]
 8100f78:	4a1a      	ldr	r2, [pc, #104]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100f7a:	f023 0302 	bic.w	r3, r3, #2
 8100f7e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100f80:	4b19      	ldr	r3, [pc, #100]	; (8100fe8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f82:	691b      	ldr	r3, [r3, #16]
 8100f84:	4a18      	ldr	r2, [pc, #96]	; (8100fe8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100f86:	f043 0304 	orr.w	r3, r3, #4
 8100f8a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100f8c:	f3bf 8f4f 	dsb	sy
}
 8100f90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100f92:	f3bf 8f6f 	isb	sy
}
 8100f96:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100f98:	7afb      	ldrb	r3, [r7, #11]
 8100f9a:	2b01      	cmp	r3, #1
 8100f9c:	d101      	bne.n	8100fa2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100f9e:	bf30      	wfi
 8100fa0:	e000      	b.n	8100fa4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100fa2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100fa4:	4b10      	ldr	r3, [pc, #64]	; (8100fe8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100fa6:	691b      	ldr	r3, [r3, #16]
 8100fa8:	4a0f      	ldr	r2, [pc, #60]	; (8100fe8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100faa:	f023 0304 	bic.w	r3, r3, #4
 8100fae:	6113      	str	r3, [r2, #16]
 8100fb0:	e015      	b.n	8100fde <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100fb2:	f7ff fdcb 	bl	8100b4c <HAL_GetCurrentCPUID>
 8100fb6:	4603      	mov	r3, r0
 8100fb8:	2b03      	cmp	r3, #3
 8100fba:	d106      	bne.n	8100fca <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100fbc:	4b09      	ldr	r3, [pc, #36]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fbe:	691b      	ldr	r3, [r3, #16]
 8100fc0:	4a08      	ldr	r2, [pc, #32]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fc2:	f023 0304 	bic.w	r3, r3, #4
 8100fc6:	6113      	str	r3, [r2, #16]
 8100fc8:	e009      	b.n	8100fde <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100fca:	4b06      	ldr	r3, [pc, #24]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fcc:	695b      	ldr	r3, [r3, #20]
 8100fce:	4a05      	ldr	r2, [pc, #20]	; (8100fe4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fd0:	f023 0304 	bic.w	r3, r3, #4
 8100fd4:	6153      	str	r3, [r2, #20]
 8100fd6:	e002      	b.n	8100fde <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100fd8:	bf00      	nop
 8100fda:	e000      	b.n	8100fde <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100fdc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100fde:	3710      	adds	r7, #16
 8100fe0:	46bd      	mov	sp, r7
 8100fe2:	bd80      	pop	{r7, pc}
 8100fe4:	58024800 	.word	0x58024800
 8100fe8:	e000ed00 	.word	0xe000ed00

08100fec <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100fec:	b580      	push	{r7, lr}
 8100fee:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100ff0:	f7ff fdac 	bl	8100b4c <HAL_GetCurrentCPUID>
 8100ff4:	4603      	mov	r3, r0
 8100ff6:	2b03      	cmp	r3, #3
 8100ff8:	d101      	bne.n	8100ffe <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100ffa:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100ffc:	e001      	b.n	8101002 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100ffe:	bf40      	sev
    __WFE ();
 8101000:	bf20      	wfe
}
 8101002:	bf00      	nop
 8101004:	bd80      	pop	{r7, pc}
	...

08101008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101008:	b480      	push	{r7}
 810100a:	b089      	sub	sp, #36	; 0x24
 810100c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810100e:	4bb3      	ldr	r3, [pc, #716]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101010:	691b      	ldr	r3, [r3, #16]
 8101012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101016:	2b18      	cmp	r3, #24
 8101018:	f200 8155 	bhi.w	81012c6 <HAL_RCC_GetSysClockFreq+0x2be>
 810101c:	a201      	add	r2, pc, #4	; (adr r2, 8101024 <HAL_RCC_GetSysClockFreq+0x1c>)
 810101e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101022:	bf00      	nop
 8101024:	08101089 	.word	0x08101089
 8101028:	081012c7 	.word	0x081012c7
 810102c:	081012c7 	.word	0x081012c7
 8101030:	081012c7 	.word	0x081012c7
 8101034:	081012c7 	.word	0x081012c7
 8101038:	081012c7 	.word	0x081012c7
 810103c:	081012c7 	.word	0x081012c7
 8101040:	081012c7 	.word	0x081012c7
 8101044:	081010af 	.word	0x081010af
 8101048:	081012c7 	.word	0x081012c7
 810104c:	081012c7 	.word	0x081012c7
 8101050:	081012c7 	.word	0x081012c7
 8101054:	081012c7 	.word	0x081012c7
 8101058:	081012c7 	.word	0x081012c7
 810105c:	081012c7 	.word	0x081012c7
 8101060:	081012c7 	.word	0x081012c7
 8101064:	081010b5 	.word	0x081010b5
 8101068:	081012c7 	.word	0x081012c7
 810106c:	081012c7 	.word	0x081012c7
 8101070:	081012c7 	.word	0x081012c7
 8101074:	081012c7 	.word	0x081012c7
 8101078:	081012c7 	.word	0x081012c7
 810107c:	081012c7 	.word	0x081012c7
 8101080:	081012c7 	.word	0x081012c7
 8101084:	081010bb 	.word	0x081010bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101088:	4b94      	ldr	r3, [pc, #592]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810108a:	681b      	ldr	r3, [r3, #0]
 810108c:	f003 0320 	and.w	r3, r3, #32
 8101090:	2b00      	cmp	r3, #0
 8101092:	d009      	beq.n	81010a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101094:	4b91      	ldr	r3, [pc, #580]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101096:	681b      	ldr	r3, [r3, #0]
 8101098:	08db      	lsrs	r3, r3, #3
 810109a:	f003 0303 	and.w	r3, r3, #3
 810109e:	4a90      	ldr	r2, [pc, #576]	; (81012e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81010a0:	fa22 f303 	lsr.w	r3, r2, r3
 81010a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81010a6:	e111      	b.n	81012cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81010a8:	4b8d      	ldr	r3, [pc, #564]	; (81012e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81010aa:	61bb      	str	r3, [r7, #24]
      break;
 81010ac:	e10e      	b.n	81012cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81010ae:	4b8d      	ldr	r3, [pc, #564]	; (81012e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81010b0:	61bb      	str	r3, [r7, #24]
      break;
 81010b2:	e10b      	b.n	81012cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81010b4:	4b8c      	ldr	r3, [pc, #560]	; (81012e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81010b6:	61bb      	str	r3, [r7, #24]
      break;
 81010b8:	e108      	b.n	81012cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81010ba:	4b88      	ldr	r3, [pc, #544]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81010be:	f003 0303 	and.w	r3, r3, #3
 81010c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81010c4:	4b85      	ldr	r3, [pc, #532]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81010c8:	091b      	lsrs	r3, r3, #4
 81010ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81010ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81010d0:	4b82      	ldr	r3, [pc, #520]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81010d4:	f003 0301 	and.w	r3, r3, #1
 81010d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81010da:	4b80      	ldr	r3, [pc, #512]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81010de:	08db      	lsrs	r3, r3, #3
 81010e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81010e4:	68fa      	ldr	r2, [r7, #12]
 81010e6:	fb02 f303 	mul.w	r3, r2, r3
 81010ea:	ee07 3a90 	vmov	s15, r3
 81010ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81010f6:	693b      	ldr	r3, [r7, #16]
 81010f8:	2b00      	cmp	r3, #0
 81010fa:	f000 80e1 	beq.w	81012c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 81010fe:	697b      	ldr	r3, [r7, #20]
 8101100:	2b02      	cmp	r3, #2
 8101102:	f000 8083 	beq.w	810120c <HAL_RCC_GetSysClockFreq+0x204>
 8101106:	697b      	ldr	r3, [r7, #20]
 8101108:	2b02      	cmp	r3, #2
 810110a:	f200 80a1 	bhi.w	8101250 <HAL_RCC_GetSysClockFreq+0x248>
 810110e:	697b      	ldr	r3, [r7, #20]
 8101110:	2b00      	cmp	r3, #0
 8101112:	d003      	beq.n	810111c <HAL_RCC_GetSysClockFreq+0x114>
 8101114:	697b      	ldr	r3, [r7, #20]
 8101116:	2b01      	cmp	r3, #1
 8101118:	d056      	beq.n	81011c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810111a:	e099      	b.n	8101250 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810111c:	4b6f      	ldr	r3, [pc, #444]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810111e:	681b      	ldr	r3, [r3, #0]
 8101120:	f003 0320 	and.w	r3, r3, #32
 8101124:	2b00      	cmp	r3, #0
 8101126:	d02d      	beq.n	8101184 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101128:	4b6c      	ldr	r3, [pc, #432]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810112a:	681b      	ldr	r3, [r3, #0]
 810112c:	08db      	lsrs	r3, r3, #3
 810112e:	f003 0303 	and.w	r3, r3, #3
 8101132:	4a6b      	ldr	r2, [pc, #428]	; (81012e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101134:	fa22 f303 	lsr.w	r3, r2, r3
 8101138:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	ee07 3a90 	vmov	s15, r3
 8101140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101144:	693b      	ldr	r3, [r7, #16]
 8101146:	ee07 3a90 	vmov	s15, r3
 810114a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810114e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101152:	4b62      	ldr	r3, [pc, #392]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810115a:	ee07 3a90 	vmov	s15, r3
 810115e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101162:	ed97 6a02 	vldr	s12, [r7, #8]
 8101166:	eddf 5a61 	vldr	s11, [pc, #388]	; 81012ec <HAL_RCC_GetSysClockFreq+0x2e4>
 810116a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810116e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810117e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101182:	e087      	b.n	8101294 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101184:	693b      	ldr	r3, [r7, #16]
 8101186:	ee07 3a90 	vmov	s15, r3
 810118a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810118e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81012f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101196:	4b51      	ldr	r3, [pc, #324]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810119a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810119e:	ee07 3a90 	vmov	s15, r3
 81011a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81011aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 81012ec <HAL_RCC_GetSysClockFreq+0x2e4>
 81011ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81011b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81011b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81011ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81011c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81011c6:	e065      	b.n	8101294 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81011c8:	693b      	ldr	r3, [r7, #16]
 81011ca:	ee07 3a90 	vmov	s15, r3
 81011ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 81012f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81011d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81011da:	4b40      	ldr	r3, [pc, #256]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81011de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81011e2:	ee07 3a90 	vmov	s15, r3
 81011e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81011ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81011ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81012ec <HAL_RCC_GetSysClockFreq+0x2e4>
 81011f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81011f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81011fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81011fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101206:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810120a:	e043      	b.n	8101294 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810120c:	693b      	ldr	r3, [r7, #16]
 810120e:	ee07 3a90 	vmov	s15, r3
 8101212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101216:	eddf 6a38 	vldr	s13, [pc, #224]	; 81012f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 810121a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810121e:	4b2f      	ldr	r3, [pc, #188]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101226:	ee07 3a90 	vmov	s15, r3
 810122a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810122e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101232:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81012ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8101236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810123a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810123e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101246:	ee67 7a27 	vmul.f32	s15, s14, s15
 810124a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810124e:	e021      	b.n	8101294 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101250:	693b      	ldr	r3, [r7, #16]
 8101252:	ee07 3a90 	vmov	s15, r3
 8101256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810125a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81012f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810125e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101262:	4b1e      	ldr	r3, [pc, #120]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810126a:	ee07 3a90 	vmov	s15, r3
 810126e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101272:	ed97 6a02 	vldr	s12, [r7, #8]
 8101276:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81012ec <HAL_RCC_GetSysClockFreq+0x2e4>
 810127a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810127e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810128e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101292:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101294:	4b11      	ldr	r3, [pc, #68]	; (81012dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101298:	0a5b      	lsrs	r3, r3, #9
 810129a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810129e:	3301      	adds	r3, #1
 81012a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81012a2:	683b      	ldr	r3, [r7, #0]
 81012a4:	ee07 3a90 	vmov	s15, r3
 81012a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81012ac:	edd7 6a07 	vldr	s13, [r7, #28]
 81012b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81012b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81012b8:	ee17 3a90 	vmov	r3, s15
 81012bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81012be:	e005      	b.n	81012cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81012c0:	2300      	movs	r3, #0
 81012c2:	61bb      	str	r3, [r7, #24]
      break;
 81012c4:	e002      	b.n	81012cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81012c6:	4b07      	ldr	r3, [pc, #28]	; (81012e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81012c8:	61bb      	str	r3, [r7, #24]
      break;
 81012ca:	bf00      	nop
  }

  return sysclockfreq;
 81012cc:	69bb      	ldr	r3, [r7, #24]
}
 81012ce:	4618      	mov	r0, r3
 81012d0:	3724      	adds	r7, #36	; 0x24
 81012d2:	46bd      	mov	sp, r7
 81012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012d8:	4770      	bx	lr
 81012da:	bf00      	nop
 81012dc:	58024400 	.word	0x58024400
 81012e0:	03d09000 	.word	0x03d09000
 81012e4:	003d0900 	.word	0x003d0900
 81012e8:	017d7840 	.word	0x017d7840
 81012ec:	46000000 	.word	0x46000000
 81012f0:	4c742400 	.word	0x4c742400
 81012f4:	4a742400 	.word	0x4a742400
 81012f8:	4bbebc20 	.word	0x4bbebc20

081012fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81012fc:	b580      	push	{r7, lr}
 81012fe:	b082      	sub	sp, #8
 8101300:	af00      	add	r7, sp, #0
 8101302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	2b00      	cmp	r3, #0
 8101308:	d101      	bne.n	810130e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810130a:	2301      	movs	r3, #1
 810130c:	e049      	b.n	81013a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810130e:	687b      	ldr	r3, [r7, #4]
 8101310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101314:	b2db      	uxtb	r3, r3
 8101316:	2b00      	cmp	r3, #0
 8101318:	d106      	bne.n	8101328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810131a:	687b      	ldr	r3, [r7, #4]
 810131c:	2200      	movs	r2, #0
 810131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8101322:	6878      	ldr	r0, [r7, #4]
 8101324:	f7ff f992 	bl	810064c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	2202      	movs	r2, #2
 810132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	681a      	ldr	r2, [r3, #0]
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	3304      	adds	r3, #4
 8101338:	4619      	mov	r1, r3
 810133a:	4610      	mov	r0, r2
 810133c:	f000 fbb0 	bl	8101aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101340:	687b      	ldr	r3, [r7, #4]
 8101342:	2201      	movs	r2, #1
 8101344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	2201      	movs	r2, #1
 810134c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	2201      	movs	r2, #1
 8101354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101358:	687b      	ldr	r3, [r7, #4]
 810135a:	2201      	movs	r2, #1
 810135c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101360:	687b      	ldr	r3, [r7, #4]
 8101362:	2201      	movs	r2, #1
 8101364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101368:	687b      	ldr	r3, [r7, #4]
 810136a:	2201      	movs	r2, #1
 810136c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	2201      	movs	r2, #1
 8101374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	2201      	movs	r2, #1
 810137c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101380:	687b      	ldr	r3, [r7, #4]
 8101382:	2201      	movs	r2, #1
 8101384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101388:	687b      	ldr	r3, [r7, #4]
 810138a:	2201      	movs	r2, #1
 810138c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	2201      	movs	r2, #1
 8101394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101398:	687b      	ldr	r3, [r7, #4]
 810139a:	2201      	movs	r2, #1
 810139c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81013a0:	2300      	movs	r3, #0
}
 81013a2:	4618      	mov	r0, r3
 81013a4:	3708      	adds	r7, #8
 81013a6:	46bd      	mov	sp, r7
 81013a8:	bd80      	pop	{r7, pc}

081013aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81013aa:	b580      	push	{r7, lr}
 81013ac:	b082      	sub	sp, #8
 81013ae:	af00      	add	r7, sp, #0
 81013b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	2b00      	cmp	r3, #0
 81013b6:	d101      	bne.n	81013bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81013b8:	2301      	movs	r3, #1
 81013ba:	e049      	b.n	8101450 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81013c2:	b2db      	uxtb	r3, r3
 81013c4:	2b00      	cmp	r3, #0
 81013c6:	d106      	bne.n	81013d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	2200      	movs	r2, #0
 81013cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81013d0:	6878      	ldr	r0, [r7, #4]
 81013d2:	f000 f841 	bl	8101458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	2202      	movs	r2, #2
 81013da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81013de:	687b      	ldr	r3, [r7, #4]
 81013e0:	681a      	ldr	r2, [r3, #0]
 81013e2:	687b      	ldr	r3, [r7, #4]
 81013e4:	3304      	adds	r3, #4
 81013e6:	4619      	mov	r1, r3
 81013e8:	4610      	mov	r0, r2
 81013ea:	f000 fb59 	bl	8101aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	2201      	movs	r2, #1
 81013f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	2201      	movs	r2, #1
 81013fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81013fe:	687b      	ldr	r3, [r7, #4]
 8101400:	2201      	movs	r2, #1
 8101402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101406:	687b      	ldr	r3, [r7, #4]
 8101408:	2201      	movs	r2, #1
 810140a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	2201      	movs	r2, #1
 8101412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101416:	687b      	ldr	r3, [r7, #4]
 8101418:	2201      	movs	r2, #1
 810141a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	2201      	movs	r2, #1
 8101422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	2201      	movs	r2, #1
 810142a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810142e:	687b      	ldr	r3, [r7, #4]
 8101430:	2201      	movs	r2, #1
 8101432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	2201      	movs	r2, #1
 810143a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810143e:	687b      	ldr	r3, [r7, #4]
 8101440:	2201      	movs	r2, #1
 8101442:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101446:	687b      	ldr	r3, [r7, #4]
 8101448:	2201      	movs	r2, #1
 810144a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810144e:	2300      	movs	r3, #0
}
 8101450:	4618      	mov	r0, r3
 8101452:	3708      	adds	r7, #8
 8101454:	46bd      	mov	sp, r7
 8101456:	bd80      	pop	{r7, pc}

08101458 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8101458:	b480      	push	{r7}
 810145a:	b083      	sub	sp, #12
 810145c:	af00      	add	r7, sp, #0
 810145e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8101460:	bf00      	nop
 8101462:	370c      	adds	r7, #12
 8101464:	46bd      	mov	sp, r7
 8101466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810146a:	4770      	bx	lr

0810146c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810146c:	b580      	push	{r7, lr}
 810146e:	b084      	sub	sp, #16
 8101470:	af00      	add	r7, sp, #0
 8101472:	6078      	str	r0, [r7, #4]
 8101474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8101476:	683b      	ldr	r3, [r7, #0]
 8101478:	2b00      	cmp	r3, #0
 810147a:	d109      	bne.n	8101490 <HAL_TIM_PWM_Start+0x24>
 810147c:	687b      	ldr	r3, [r7, #4]
 810147e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8101482:	b2db      	uxtb	r3, r3
 8101484:	2b01      	cmp	r3, #1
 8101486:	bf14      	ite	ne
 8101488:	2301      	movne	r3, #1
 810148a:	2300      	moveq	r3, #0
 810148c:	b2db      	uxtb	r3, r3
 810148e:	e03c      	b.n	810150a <HAL_TIM_PWM_Start+0x9e>
 8101490:	683b      	ldr	r3, [r7, #0]
 8101492:	2b04      	cmp	r3, #4
 8101494:	d109      	bne.n	81014aa <HAL_TIM_PWM_Start+0x3e>
 8101496:	687b      	ldr	r3, [r7, #4]
 8101498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810149c:	b2db      	uxtb	r3, r3
 810149e:	2b01      	cmp	r3, #1
 81014a0:	bf14      	ite	ne
 81014a2:	2301      	movne	r3, #1
 81014a4:	2300      	moveq	r3, #0
 81014a6:	b2db      	uxtb	r3, r3
 81014a8:	e02f      	b.n	810150a <HAL_TIM_PWM_Start+0x9e>
 81014aa:	683b      	ldr	r3, [r7, #0]
 81014ac:	2b08      	cmp	r3, #8
 81014ae:	d109      	bne.n	81014c4 <HAL_TIM_PWM_Start+0x58>
 81014b0:	687b      	ldr	r3, [r7, #4]
 81014b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81014b6:	b2db      	uxtb	r3, r3
 81014b8:	2b01      	cmp	r3, #1
 81014ba:	bf14      	ite	ne
 81014bc:	2301      	movne	r3, #1
 81014be:	2300      	moveq	r3, #0
 81014c0:	b2db      	uxtb	r3, r3
 81014c2:	e022      	b.n	810150a <HAL_TIM_PWM_Start+0x9e>
 81014c4:	683b      	ldr	r3, [r7, #0]
 81014c6:	2b0c      	cmp	r3, #12
 81014c8:	d109      	bne.n	81014de <HAL_TIM_PWM_Start+0x72>
 81014ca:	687b      	ldr	r3, [r7, #4]
 81014cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81014d0:	b2db      	uxtb	r3, r3
 81014d2:	2b01      	cmp	r3, #1
 81014d4:	bf14      	ite	ne
 81014d6:	2301      	movne	r3, #1
 81014d8:	2300      	moveq	r3, #0
 81014da:	b2db      	uxtb	r3, r3
 81014dc:	e015      	b.n	810150a <HAL_TIM_PWM_Start+0x9e>
 81014de:	683b      	ldr	r3, [r7, #0]
 81014e0:	2b10      	cmp	r3, #16
 81014e2:	d109      	bne.n	81014f8 <HAL_TIM_PWM_Start+0x8c>
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81014ea:	b2db      	uxtb	r3, r3
 81014ec:	2b01      	cmp	r3, #1
 81014ee:	bf14      	ite	ne
 81014f0:	2301      	movne	r3, #1
 81014f2:	2300      	moveq	r3, #0
 81014f4:	b2db      	uxtb	r3, r3
 81014f6:	e008      	b.n	810150a <HAL_TIM_PWM_Start+0x9e>
 81014f8:	687b      	ldr	r3, [r7, #4]
 81014fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81014fe:	b2db      	uxtb	r3, r3
 8101500:	2b01      	cmp	r3, #1
 8101502:	bf14      	ite	ne
 8101504:	2301      	movne	r3, #1
 8101506:	2300      	moveq	r3, #0
 8101508:	b2db      	uxtb	r3, r3
 810150a:	2b00      	cmp	r3, #0
 810150c:	d001      	beq.n	8101512 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 810150e:	2301      	movs	r3, #1
 8101510:	e0a1      	b.n	8101656 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8101512:	683b      	ldr	r3, [r7, #0]
 8101514:	2b00      	cmp	r3, #0
 8101516:	d104      	bne.n	8101522 <HAL_TIM_PWM_Start+0xb6>
 8101518:	687b      	ldr	r3, [r7, #4]
 810151a:	2202      	movs	r2, #2
 810151c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101520:	e023      	b.n	810156a <HAL_TIM_PWM_Start+0xfe>
 8101522:	683b      	ldr	r3, [r7, #0]
 8101524:	2b04      	cmp	r3, #4
 8101526:	d104      	bne.n	8101532 <HAL_TIM_PWM_Start+0xc6>
 8101528:	687b      	ldr	r3, [r7, #4]
 810152a:	2202      	movs	r2, #2
 810152c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101530:	e01b      	b.n	810156a <HAL_TIM_PWM_Start+0xfe>
 8101532:	683b      	ldr	r3, [r7, #0]
 8101534:	2b08      	cmp	r3, #8
 8101536:	d104      	bne.n	8101542 <HAL_TIM_PWM_Start+0xd6>
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	2202      	movs	r2, #2
 810153c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101540:	e013      	b.n	810156a <HAL_TIM_PWM_Start+0xfe>
 8101542:	683b      	ldr	r3, [r7, #0]
 8101544:	2b0c      	cmp	r3, #12
 8101546:	d104      	bne.n	8101552 <HAL_TIM_PWM_Start+0xe6>
 8101548:	687b      	ldr	r3, [r7, #4]
 810154a:	2202      	movs	r2, #2
 810154c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101550:	e00b      	b.n	810156a <HAL_TIM_PWM_Start+0xfe>
 8101552:	683b      	ldr	r3, [r7, #0]
 8101554:	2b10      	cmp	r3, #16
 8101556:	d104      	bne.n	8101562 <HAL_TIM_PWM_Start+0xf6>
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	2202      	movs	r2, #2
 810155c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101560:	e003      	b.n	810156a <HAL_TIM_PWM_Start+0xfe>
 8101562:	687b      	ldr	r3, [r7, #4]
 8101564:	2202      	movs	r2, #2
 8101566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810156a:	687b      	ldr	r3, [r7, #4]
 810156c:	681b      	ldr	r3, [r3, #0]
 810156e:	2201      	movs	r2, #1
 8101570:	6839      	ldr	r1, [r7, #0]
 8101572:	4618      	mov	r0, r3
 8101574:	f000 feac 	bl	81022d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8101578:	687b      	ldr	r3, [r7, #4]
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	4a38      	ldr	r2, [pc, #224]	; (8101660 <HAL_TIM_PWM_Start+0x1f4>)
 810157e:	4293      	cmp	r3, r2
 8101580:	d013      	beq.n	81015aa <HAL_TIM_PWM_Start+0x13e>
 8101582:	687b      	ldr	r3, [r7, #4]
 8101584:	681b      	ldr	r3, [r3, #0]
 8101586:	4a37      	ldr	r2, [pc, #220]	; (8101664 <HAL_TIM_PWM_Start+0x1f8>)
 8101588:	4293      	cmp	r3, r2
 810158a:	d00e      	beq.n	81015aa <HAL_TIM_PWM_Start+0x13e>
 810158c:	687b      	ldr	r3, [r7, #4]
 810158e:	681b      	ldr	r3, [r3, #0]
 8101590:	4a35      	ldr	r2, [pc, #212]	; (8101668 <HAL_TIM_PWM_Start+0x1fc>)
 8101592:	4293      	cmp	r3, r2
 8101594:	d009      	beq.n	81015aa <HAL_TIM_PWM_Start+0x13e>
 8101596:	687b      	ldr	r3, [r7, #4]
 8101598:	681b      	ldr	r3, [r3, #0]
 810159a:	4a34      	ldr	r2, [pc, #208]	; (810166c <HAL_TIM_PWM_Start+0x200>)
 810159c:	4293      	cmp	r3, r2
 810159e:	d004      	beq.n	81015aa <HAL_TIM_PWM_Start+0x13e>
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	681b      	ldr	r3, [r3, #0]
 81015a4:	4a32      	ldr	r2, [pc, #200]	; (8101670 <HAL_TIM_PWM_Start+0x204>)
 81015a6:	4293      	cmp	r3, r2
 81015a8:	d101      	bne.n	81015ae <HAL_TIM_PWM_Start+0x142>
 81015aa:	2301      	movs	r3, #1
 81015ac:	e000      	b.n	81015b0 <HAL_TIM_PWM_Start+0x144>
 81015ae:	2300      	movs	r3, #0
 81015b0:	2b00      	cmp	r3, #0
 81015b2:	d007      	beq.n	81015c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81015b4:	687b      	ldr	r3, [r7, #4]
 81015b6:	681b      	ldr	r3, [r3, #0]
 81015b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81015ba:	687b      	ldr	r3, [r7, #4]
 81015bc:	681b      	ldr	r3, [r3, #0]
 81015be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81015c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	4a25      	ldr	r2, [pc, #148]	; (8101660 <HAL_TIM_PWM_Start+0x1f4>)
 81015ca:	4293      	cmp	r3, r2
 81015cc:	d022      	beq.n	8101614 <HAL_TIM_PWM_Start+0x1a8>
 81015ce:	687b      	ldr	r3, [r7, #4]
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81015d6:	d01d      	beq.n	8101614 <HAL_TIM_PWM_Start+0x1a8>
 81015d8:	687b      	ldr	r3, [r7, #4]
 81015da:	681b      	ldr	r3, [r3, #0]
 81015dc:	4a25      	ldr	r2, [pc, #148]	; (8101674 <HAL_TIM_PWM_Start+0x208>)
 81015de:	4293      	cmp	r3, r2
 81015e0:	d018      	beq.n	8101614 <HAL_TIM_PWM_Start+0x1a8>
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	681b      	ldr	r3, [r3, #0]
 81015e6:	4a24      	ldr	r2, [pc, #144]	; (8101678 <HAL_TIM_PWM_Start+0x20c>)
 81015e8:	4293      	cmp	r3, r2
 81015ea:	d013      	beq.n	8101614 <HAL_TIM_PWM_Start+0x1a8>
 81015ec:	687b      	ldr	r3, [r7, #4]
 81015ee:	681b      	ldr	r3, [r3, #0]
 81015f0:	4a22      	ldr	r2, [pc, #136]	; (810167c <HAL_TIM_PWM_Start+0x210>)
 81015f2:	4293      	cmp	r3, r2
 81015f4:	d00e      	beq.n	8101614 <HAL_TIM_PWM_Start+0x1a8>
 81015f6:	687b      	ldr	r3, [r7, #4]
 81015f8:	681b      	ldr	r3, [r3, #0]
 81015fa:	4a1a      	ldr	r2, [pc, #104]	; (8101664 <HAL_TIM_PWM_Start+0x1f8>)
 81015fc:	4293      	cmp	r3, r2
 81015fe:	d009      	beq.n	8101614 <HAL_TIM_PWM_Start+0x1a8>
 8101600:	687b      	ldr	r3, [r7, #4]
 8101602:	681b      	ldr	r3, [r3, #0]
 8101604:	4a1e      	ldr	r2, [pc, #120]	; (8101680 <HAL_TIM_PWM_Start+0x214>)
 8101606:	4293      	cmp	r3, r2
 8101608:	d004      	beq.n	8101614 <HAL_TIM_PWM_Start+0x1a8>
 810160a:	687b      	ldr	r3, [r7, #4]
 810160c:	681b      	ldr	r3, [r3, #0]
 810160e:	4a16      	ldr	r2, [pc, #88]	; (8101668 <HAL_TIM_PWM_Start+0x1fc>)
 8101610:	4293      	cmp	r3, r2
 8101612:	d115      	bne.n	8101640 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101614:	687b      	ldr	r3, [r7, #4]
 8101616:	681b      	ldr	r3, [r3, #0]
 8101618:	689a      	ldr	r2, [r3, #8]
 810161a:	4b1a      	ldr	r3, [pc, #104]	; (8101684 <HAL_TIM_PWM_Start+0x218>)
 810161c:	4013      	ands	r3, r2
 810161e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101620:	68fb      	ldr	r3, [r7, #12]
 8101622:	2b06      	cmp	r3, #6
 8101624:	d015      	beq.n	8101652 <HAL_TIM_PWM_Start+0x1e6>
 8101626:	68fb      	ldr	r3, [r7, #12]
 8101628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810162c:	d011      	beq.n	8101652 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810162e:	687b      	ldr	r3, [r7, #4]
 8101630:	681b      	ldr	r3, [r3, #0]
 8101632:	681a      	ldr	r2, [r3, #0]
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	681b      	ldr	r3, [r3, #0]
 8101638:	f042 0201 	orr.w	r2, r2, #1
 810163c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810163e:	e008      	b.n	8101652 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8101640:	687b      	ldr	r3, [r7, #4]
 8101642:	681b      	ldr	r3, [r3, #0]
 8101644:	681a      	ldr	r2, [r3, #0]
 8101646:	687b      	ldr	r3, [r7, #4]
 8101648:	681b      	ldr	r3, [r3, #0]
 810164a:	f042 0201 	orr.w	r2, r2, #1
 810164e:	601a      	str	r2, [r3, #0]
 8101650:	e000      	b.n	8101654 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101652:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101654:	2300      	movs	r3, #0
}
 8101656:	4618      	mov	r0, r3
 8101658:	3710      	adds	r7, #16
 810165a:	46bd      	mov	sp, r7
 810165c:	bd80      	pop	{r7, pc}
 810165e:	bf00      	nop
 8101660:	40010000 	.word	0x40010000
 8101664:	40010400 	.word	0x40010400
 8101668:	40014000 	.word	0x40014000
 810166c:	40014400 	.word	0x40014400
 8101670:	40014800 	.word	0x40014800
 8101674:	40000400 	.word	0x40000400
 8101678:	40000800 	.word	0x40000800
 810167c:	40000c00 	.word	0x40000c00
 8101680:	40001800 	.word	0x40001800
 8101684:	00010007 	.word	0x00010007

08101688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8101688:	b580      	push	{r7, lr}
 810168a:	b086      	sub	sp, #24
 810168c:	af00      	add	r7, sp, #0
 810168e:	60f8      	str	r0, [r7, #12]
 8101690:	60b9      	str	r1, [r7, #8]
 8101692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8101694:	2300      	movs	r3, #0
 8101696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8101698:	68fb      	ldr	r3, [r7, #12]
 810169a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810169e:	2b01      	cmp	r3, #1
 81016a0:	d101      	bne.n	81016a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 81016a2:	2302      	movs	r3, #2
 81016a4:	e0ff      	b.n	81018a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 81016a6:	68fb      	ldr	r3, [r7, #12]
 81016a8:	2201      	movs	r2, #1
 81016aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	2b14      	cmp	r3, #20
 81016b2:	f200 80f0 	bhi.w	8101896 <HAL_TIM_PWM_ConfigChannel+0x20e>
 81016b6:	a201      	add	r2, pc, #4	; (adr r2, 81016bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 81016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81016bc:	08101711 	.word	0x08101711
 81016c0:	08101897 	.word	0x08101897
 81016c4:	08101897 	.word	0x08101897
 81016c8:	08101897 	.word	0x08101897
 81016cc:	08101751 	.word	0x08101751
 81016d0:	08101897 	.word	0x08101897
 81016d4:	08101897 	.word	0x08101897
 81016d8:	08101897 	.word	0x08101897
 81016dc:	08101793 	.word	0x08101793
 81016e0:	08101897 	.word	0x08101897
 81016e4:	08101897 	.word	0x08101897
 81016e8:	08101897 	.word	0x08101897
 81016ec:	081017d3 	.word	0x081017d3
 81016f0:	08101897 	.word	0x08101897
 81016f4:	08101897 	.word	0x08101897
 81016f8:	08101897 	.word	0x08101897
 81016fc:	08101815 	.word	0x08101815
 8101700:	08101897 	.word	0x08101897
 8101704:	08101897 	.word	0x08101897
 8101708:	08101897 	.word	0x08101897
 810170c:	08101855 	.word	0x08101855
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8101710:	68fb      	ldr	r3, [r7, #12]
 8101712:	681b      	ldr	r3, [r3, #0]
 8101714:	68b9      	ldr	r1, [r7, #8]
 8101716:	4618      	mov	r0, r3
 8101718:	f000 fa68 	bl	8101bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810171c:	68fb      	ldr	r3, [r7, #12]
 810171e:	681b      	ldr	r3, [r3, #0]
 8101720:	699a      	ldr	r2, [r3, #24]
 8101722:	68fb      	ldr	r3, [r7, #12]
 8101724:	681b      	ldr	r3, [r3, #0]
 8101726:	f042 0208 	orr.w	r2, r2, #8
 810172a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810172c:	68fb      	ldr	r3, [r7, #12]
 810172e:	681b      	ldr	r3, [r3, #0]
 8101730:	699a      	ldr	r2, [r3, #24]
 8101732:	68fb      	ldr	r3, [r7, #12]
 8101734:	681b      	ldr	r3, [r3, #0]
 8101736:	f022 0204 	bic.w	r2, r2, #4
 810173a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810173c:	68fb      	ldr	r3, [r7, #12]
 810173e:	681b      	ldr	r3, [r3, #0]
 8101740:	6999      	ldr	r1, [r3, #24]
 8101742:	68bb      	ldr	r3, [r7, #8]
 8101744:	691a      	ldr	r2, [r3, #16]
 8101746:	68fb      	ldr	r3, [r7, #12]
 8101748:	681b      	ldr	r3, [r3, #0]
 810174a:	430a      	orrs	r2, r1
 810174c:	619a      	str	r2, [r3, #24]
      break;
 810174e:	e0a5      	b.n	810189c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8101750:	68fb      	ldr	r3, [r7, #12]
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	68b9      	ldr	r1, [r7, #8]
 8101756:	4618      	mov	r0, r3
 8101758:	f000 fad8 	bl	8101d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810175c:	68fb      	ldr	r3, [r7, #12]
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	699a      	ldr	r2, [r3, #24]
 8101762:	68fb      	ldr	r3, [r7, #12]
 8101764:	681b      	ldr	r3, [r3, #0]
 8101766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810176a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810176c:	68fb      	ldr	r3, [r7, #12]
 810176e:	681b      	ldr	r3, [r3, #0]
 8101770:	699a      	ldr	r2, [r3, #24]
 8101772:	68fb      	ldr	r3, [r7, #12]
 8101774:	681b      	ldr	r3, [r3, #0]
 8101776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810177a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810177c:	68fb      	ldr	r3, [r7, #12]
 810177e:	681b      	ldr	r3, [r3, #0]
 8101780:	6999      	ldr	r1, [r3, #24]
 8101782:	68bb      	ldr	r3, [r7, #8]
 8101784:	691b      	ldr	r3, [r3, #16]
 8101786:	021a      	lsls	r2, r3, #8
 8101788:	68fb      	ldr	r3, [r7, #12]
 810178a:	681b      	ldr	r3, [r3, #0]
 810178c:	430a      	orrs	r2, r1
 810178e:	619a      	str	r2, [r3, #24]
      break;
 8101790:	e084      	b.n	810189c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8101792:	68fb      	ldr	r3, [r7, #12]
 8101794:	681b      	ldr	r3, [r3, #0]
 8101796:	68b9      	ldr	r1, [r7, #8]
 8101798:	4618      	mov	r0, r3
 810179a:	f000 fb41 	bl	8101e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810179e:	68fb      	ldr	r3, [r7, #12]
 81017a0:	681b      	ldr	r3, [r3, #0]
 81017a2:	69da      	ldr	r2, [r3, #28]
 81017a4:	68fb      	ldr	r3, [r7, #12]
 81017a6:	681b      	ldr	r3, [r3, #0]
 81017a8:	f042 0208 	orr.w	r2, r2, #8
 81017ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 81017ae:	68fb      	ldr	r3, [r7, #12]
 81017b0:	681b      	ldr	r3, [r3, #0]
 81017b2:	69da      	ldr	r2, [r3, #28]
 81017b4:	68fb      	ldr	r3, [r7, #12]
 81017b6:	681b      	ldr	r3, [r3, #0]
 81017b8:	f022 0204 	bic.w	r2, r2, #4
 81017bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81017be:	68fb      	ldr	r3, [r7, #12]
 81017c0:	681b      	ldr	r3, [r3, #0]
 81017c2:	69d9      	ldr	r1, [r3, #28]
 81017c4:	68bb      	ldr	r3, [r7, #8]
 81017c6:	691a      	ldr	r2, [r3, #16]
 81017c8:	68fb      	ldr	r3, [r7, #12]
 81017ca:	681b      	ldr	r3, [r3, #0]
 81017cc:	430a      	orrs	r2, r1
 81017ce:	61da      	str	r2, [r3, #28]
      break;
 81017d0:	e064      	b.n	810189c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81017d2:	68fb      	ldr	r3, [r7, #12]
 81017d4:	681b      	ldr	r3, [r3, #0]
 81017d6:	68b9      	ldr	r1, [r7, #8]
 81017d8:	4618      	mov	r0, r3
 81017da:	f000 fba9 	bl	8101f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81017de:	68fb      	ldr	r3, [r7, #12]
 81017e0:	681b      	ldr	r3, [r3, #0]
 81017e2:	69da      	ldr	r2, [r3, #28]
 81017e4:	68fb      	ldr	r3, [r7, #12]
 81017e6:	681b      	ldr	r3, [r3, #0]
 81017e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81017ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81017ee:	68fb      	ldr	r3, [r7, #12]
 81017f0:	681b      	ldr	r3, [r3, #0]
 81017f2:	69da      	ldr	r2, [r3, #28]
 81017f4:	68fb      	ldr	r3, [r7, #12]
 81017f6:	681b      	ldr	r3, [r3, #0]
 81017f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81017fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81017fe:	68fb      	ldr	r3, [r7, #12]
 8101800:	681b      	ldr	r3, [r3, #0]
 8101802:	69d9      	ldr	r1, [r3, #28]
 8101804:	68bb      	ldr	r3, [r7, #8]
 8101806:	691b      	ldr	r3, [r3, #16]
 8101808:	021a      	lsls	r2, r3, #8
 810180a:	68fb      	ldr	r3, [r7, #12]
 810180c:	681b      	ldr	r3, [r3, #0]
 810180e:	430a      	orrs	r2, r1
 8101810:	61da      	str	r2, [r3, #28]
      break;
 8101812:	e043      	b.n	810189c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8101814:	68fb      	ldr	r3, [r7, #12]
 8101816:	681b      	ldr	r3, [r3, #0]
 8101818:	68b9      	ldr	r1, [r7, #8]
 810181a:	4618      	mov	r0, r3
 810181c:	f000 fbf2 	bl	8102004 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8101820:	68fb      	ldr	r3, [r7, #12]
 8101822:	681b      	ldr	r3, [r3, #0]
 8101824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101826:	68fb      	ldr	r3, [r7, #12]
 8101828:	681b      	ldr	r3, [r3, #0]
 810182a:	f042 0208 	orr.w	r2, r2, #8
 810182e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8101830:	68fb      	ldr	r3, [r7, #12]
 8101832:	681b      	ldr	r3, [r3, #0]
 8101834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101836:	68fb      	ldr	r3, [r7, #12]
 8101838:	681b      	ldr	r3, [r3, #0]
 810183a:	f022 0204 	bic.w	r2, r2, #4
 810183e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8101840:	68fb      	ldr	r3, [r7, #12]
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8101846:	68bb      	ldr	r3, [r7, #8]
 8101848:	691a      	ldr	r2, [r3, #16]
 810184a:	68fb      	ldr	r3, [r7, #12]
 810184c:	681b      	ldr	r3, [r3, #0]
 810184e:	430a      	orrs	r2, r1
 8101850:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8101852:	e023      	b.n	810189c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8101854:	68fb      	ldr	r3, [r7, #12]
 8101856:	681b      	ldr	r3, [r3, #0]
 8101858:	68b9      	ldr	r1, [r7, #8]
 810185a:	4618      	mov	r0, r3
 810185c:	f000 fc36 	bl	81020cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8101860:	68fb      	ldr	r3, [r7, #12]
 8101862:	681b      	ldr	r3, [r3, #0]
 8101864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101866:	68fb      	ldr	r3, [r7, #12]
 8101868:	681b      	ldr	r3, [r3, #0]
 810186a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810186e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8101870:	68fb      	ldr	r3, [r7, #12]
 8101872:	681b      	ldr	r3, [r3, #0]
 8101874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8101876:	68fb      	ldr	r3, [r7, #12]
 8101878:	681b      	ldr	r3, [r3, #0]
 810187a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810187e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8101880:	68fb      	ldr	r3, [r7, #12]
 8101882:	681b      	ldr	r3, [r3, #0]
 8101884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8101886:	68bb      	ldr	r3, [r7, #8]
 8101888:	691b      	ldr	r3, [r3, #16]
 810188a:	021a      	lsls	r2, r3, #8
 810188c:	68fb      	ldr	r3, [r7, #12]
 810188e:	681b      	ldr	r3, [r3, #0]
 8101890:	430a      	orrs	r2, r1
 8101892:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8101894:	e002      	b.n	810189c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8101896:	2301      	movs	r3, #1
 8101898:	75fb      	strb	r3, [r7, #23]
      break;
 810189a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810189c:	68fb      	ldr	r3, [r7, #12]
 810189e:	2200      	movs	r2, #0
 81018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81018a4:	7dfb      	ldrb	r3, [r7, #23]
}
 81018a6:	4618      	mov	r0, r3
 81018a8:	3718      	adds	r7, #24
 81018aa:	46bd      	mov	sp, r7
 81018ac:	bd80      	pop	{r7, pc}
 81018ae:	bf00      	nop

081018b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81018b0:	b580      	push	{r7, lr}
 81018b2:	b084      	sub	sp, #16
 81018b4:	af00      	add	r7, sp, #0
 81018b6:	6078      	str	r0, [r7, #4]
 81018b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81018ba:	2300      	movs	r3, #0
 81018bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81018c4:	2b01      	cmp	r3, #1
 81018c6:	d101      	bne.n	81018cc <HAL_TIM_ConfigClockSource+0x1c>
 81018c8:	2302      	movs	r3, #2
 81018ca:	e0de      	b.n	8101a8a <HAL_TIM_ConfigClockSource+0x1da>
 81018cc:	687b      	ldr	r3, [r7, #4]
 81018ce:	2201      	movs	r2, #1
 81018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	2202      	movs	r2, #2
 81018d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	681b      	ldr	r3, [r3, #0]
 81018e0:	689b      	ldr	r3, [r3, #8]
 81018e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81018e4:	68bb      	ldr	r3, [r7, #8]
 81018e6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81018ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81018ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81018f0:	68bb      	ldr	r3, [r7, #8]
 81018f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81018f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	68ba      	ldr	r2, [r7, #8]
 81018fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8101900:	683b      	ldr	r3, [r7, #0]
 8101902:	681b      	ldr	r3, [r3, #0]
 8101904:	4a63      	ldr	r2, [pc, #396]	; (8101a94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8101906:	4293      	cmp	r3, r2
 8101908:	f000 80a9 	beq.w	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 810190c:	4a61      	ldr	r2, [pc, #388]	; (8101a94 <HAL_TIM_ConfigClockSource+0x1e4>)
 810190e:	4293      	cmp	r3, r2
 8101910:	f200 80ae 	bhi.w	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101914:	4a60      	ldr	r2, [pc, #384]	; (8101a98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8101916:	4293      	cmp	r3, r2
 8101918:	f000 80a1 	beq.w	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 810191c:	4a5e      	ldr	r2, [pc, #376]	; (8101a98 <HAL_TIM_ConfigClockSource+0x1e8>)
 810191e:	4293      	cmp	r3, r2
 8101920:	f200 80a6 	bhi.w	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101924:	4a5d      	ldr	r2, [pc, #372]	; (8101a9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8101926:	4293      	cmp	r3, r2
 8101928:	f000 8099 	beq.w	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 810192c:	4a5b      	ldr	r2, [pc, #364]	; (8101a9c <HAL_TIM_ConfigClockSource+0x1ec>)
 810192e:	4293      	cmp	r3, r2
 8101930:	f200 809e 	bhi.w	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101934:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8101938:	f000 8091 	beq.w	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 810193c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8101940:	f200 8096 	bhi.w	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101948:	f000 8089 	beq.w	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 810194c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101950:	f200 808e 	bhi.w	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101958:	d03e      	beq.n	81019d8 <HAL_TIM_ConfigClockSource+0x128>
 810195a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810195e:	f200 8087 	bhi.w	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101966:	f000 8086 	beq.w	8101a76 <HAL_TIM_ConfigClockSource+0x1c6>
 810196a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810196e:	d87f      	bhi.n	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101970:	2b70      	cmp	r3, #112	; 0x70
 8101972:	d01a      	beq.n	81019aa <HAL_TIM_ConfigClockSource+0xfa>
 8101974:	2b70      	cmp	r3, #112	; 0x70
 8101976:	d87b      	bhi.n	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101978:	2b60      	cmp	r3, #96	; 0x60
 810197a:	d050      	beq.n	8101a1e <HAL_TIM_ConfigClockSource+0x16e>
 810197c:	2b60      	cmp	r3, #96	; 0x60
 810197e:	d877      	bhi.n	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101980:	2b50      	cmp	r3, #80	; 0x50
 8101982:	d03c      	beq.n	81019fe <HAL_TIM_ConfigClockSource+0x14e>
 8101984:	2b50      	cmp	r3, #80	; 0x50
 8101986:	d873      	bhi.n	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101988:	2b40      	cmp	r3, #64	; 0x40
 810198a:	d058      	beq.n	8101a3e <HAL_TIM_ConfigClockSource+0x18e>
 810198c:	2b40      	cmp	r3, #64	; 0x40
 810198e:	d86f      	bhi.n	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101990:	2b30      	cmp	r3, #48	; 0x30
 8101992:	d064      	beq.n	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 8101994:	2b30      	cmp	r3, #48	; 0x30
 8101996:	d86b      	bhi.n	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 8101998:	2b20      	cmp	r3, #32
 810199a:	d060      	beq.n	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 810199c:	2b20      	cmp	r3, #32
 810199e:	d867      	bhi.n	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
 81019a0:	2b00      	cmp	r3, #0
 81019a2:	d05c      	beq.n	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 81019a4:	2b10      	cmp	r3, #16
 81019a6:	d05a      	beq.n	8101a5e <HAL_TIM_ConfigClockSource+0x1ae>
 81019a8:	e062      	b.n	8101a70 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 81019ae:	683b      	ldr	r3, [r7, #0]
 81019b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 81019b2:	683b      	ldr	r3, [r7, #0]
 81019b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 81019b6:	683b      	ldr	r3, [r7, #0]
 81019b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81019ba:	f000 fc69 	bl	8102290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81019be:	687b      	ldr	r3, [r7, #4]
 81019c0:	681b      	ldr	r3, [r3, #0]
 81019c2:	689b      	ldr	r3, [r3, #8]
 81019c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81019c6:	68bb      	ldr	r3, [r7, #8]
 81019c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81019cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81019ce:	687b      	ldr	r3, [r7, #4]
 81019d0:	681b      	ldr	r3, [r3, #0]
 81019d2:	68ba      	ldr	r2, [r7, #8]
 81019d4:	609a      	str	r2, [r3, #8]
      break;
 81019d6:	e04f      	b.n	8101a78 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81019d8:	687b      	ldr	r3, [r7, #4]
 81019da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 81019dc:	683b      	ldr	r3, [r7, #0]
 81019de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 81019e0:	683b      	ldr	r3, [r7, #0]
 81019e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 81019e4:	683b      	ldr	r3, [r7, #0]
 81019e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81019e8:	f000 fc52 	bl	8102290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	681b      	ldr	r3, [r3, #0]
 81019f0:	689a      	ldr	r2, [r3, #8]
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	681b      	ldr	r3, [r3, #0]
 81019f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81019fa:	609a      	str	r2, [r3, #8]
      break;
 81019fc:	e03c      	b.n	8101a78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8101a02:	683b      	ldr	r3, [r7, #0]
 8101a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8101a06:	683b      	ldr	r3, [r7, #0]
 8101a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8101a0a:	461a      	mov	r2, r3
 8101a0c:	f000 fbc4 	bl	8102198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8101a10:	687b      	ldr	r3, [r7, #4]
 8101a12:	681b      	ldr	r3, [r3, #0]
 8101a14:	2150      	movs	r1, #80	; 0x50
 8101a16:	4618      	mov	r0, r3
 8101a18:	f000 fc1d 	bl	8102256 <TIM_ITRx_SetConfig>
      break;
 8101a1c:	e02c      	b.n	8101a78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8101a22:	683b      	ldr	r3, [r7, #0]
 8101a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8101a26:	683b      	ldr	r3, [r7, #0]
 8101a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8101a2a:	461a      	mov	r2, r3
 8101a2c:	f000 fbe3 	bl	81021f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8101a30:	687b      	ldr	r3, [r7, #4]
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	2160      	movs	r1, #96	; 0x60
 8101a36:	4618      	mov	r0, r3
 8101a38:	f000 fc0d 	bl	8102256 <TIM_ITRx_SetConfig>
      break;
 8101a3c:	e01c      	b.n	8101a78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8101a42:	683b      	ldr	r3, [r7, #0]
 8101a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8101a46:	683b      	ldr	r3, [r7, #0]
 8101a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8101a4a:	461a      	mov	r2, r3
 8101a4c:	f000 fba4 	bl	8102198 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	681b      	ldr	r3, [r3, #0]
 8101a54:	2140      	movs	r1, #64	; 0x40
 8101a56:	4618      	mov	r0, r3
 8101a58:	f000 fbfd 	bl	8102256 <TIM_ITRx_SetConfig>
      break;
 8101a5c:	e00c      	b.n	8101a78 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	681a      	ldr	r2, [r3, #0]
 8101a62:	683b      	ldr	r3, [r7, #0]
 8101a64:	681b      	ldr	r3, [r3, #0]
 8101a66:	4619      	mov	r1, r3
 8101a68:	4610      	mov	r0, r2
 8101a6a:	f000 fbf4 	bl	8102256 <TIM_ITRx_SetConfig>
      break;
 8101a6e:	e003      	b.n	8101a78 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8101a70:	2301      	movs	r3, #1
 8101a72:	73fb      	strb	r3, [r7, #15]
      break;
 8101a74:	e000      	b.n	8101a78 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8101a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8101a78:	687b      	ldr	r3, [r7, #4]
 8101a7a:	2201      	movs	r2, #1
 8101a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	2200      	movs	r2, #0
 8101a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8101a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8101a8a:	4618      	mov	r0, r3
 8101a8c:	3710      	adds	r7, #16
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	bd80      	pop	{r7, pc}
 8101a92:	bf00      	nop
 8101a94:	00100040 	.word	0x00100040
 8101a98:	00100030 	.word	0x00100030
 8101a9c:	00100020 	.word	0x00100020

08101aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8101aa0:	b480      	push	{r7}
 8101aa2:	b085      	sub	sp, #20
 8101aa4:	af00      	add	r7, sp, #0
 8101aa6:	6078      	str	r0, [r7, #4]
 8101aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101aaa:	687b      	ldr	r3, [r7, #4]
 8101aac:	681b      	ldr	r3, [r3, #0]
 8101aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101ab0:	687b      	ldr	r3, [r7, #4]
 8101ab2:	4a46      	ldr	r2, [pc, #280]	; (8101bcc <TIM_Base_SetConfig+0x12c>)
 8101ab4:	4293      	cmp	r3, r2
 8101ab6:	d013      	beq.n	8101ae0 <TIM_Base_SetConfig+0x40>
 8101ab8:	687b      	ldr	r3, [r7, #4]
 8101aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101abe:	d00f      	beq.n	8101ae0 <TIM_Base_SetConfig+0x40>
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	4a43      	ldr	r2, [pc, #268]	; (8101bd0 <TIM_Base_SetConfig+0x130>)
 8101ac4:	4293      	cmp	r3, r2
 8101ac6:	d00b      	beq.n	8101ae0 <TIM_Base_SetConfig+0x40>
 8101ac8:	687b      	ldr	r3, [r7, #4]
 8101aca:	4a42      	ldr	r2, [pc, #264]	; (8101bd4 <TIM_Base_SetConfig+0x134>)
 8101acc:	4293      	cmp	r3, r2
 8101ace:	d007      	beq.n	8101ae0 <TIM_Base_SetConfig+0x40>
 8101ad0:	687b      	ldr	r3, [r7, #4]
 8101ad2:	4a41      	ldr	r2, [pc, #260]	; (8101bd8 <TIM_Base_SetConfig+0x138>)
 8101ad4:	4293      	cmp	r3, r2
 8101ad6:	d003      	beq.n	8101ae0 <TIM_Base_SetConfig+0x40>
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	4a40      	ldr	r2, [pc, #256]	; (8101bdc <TIM_Base_SetConfig+0x13c>)
 8101adc:	4293      	cmp	r3, r2
 8101ade:	d108      	bne.n	8101af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101ae0:	68fb      	ldr	r3, [r7, #12]
 8101ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101ae8:	683b      	ldr	r3, [r7, #0]
 8101aea:	685b      	ldr	r3, [r3, #4]
 8101aec:	68fa      	ldr	r2, [r7, #12]
 8101aee:	4313      	orrs	r3, r2
 8101af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8101af2:	687b      	ldr	r3, [r7, #4]
 8101af4:	4a35      	ldr	r2, [pc, #212]	; (8101bcc <TIM_Base_SetConfig+0x12c>)
 8101af6:	4293      	cmp	r3, r2
 8101af8:	d01f      	beq.n	8101b3a <TIM_Base_SetConfig+0x9a>
 8101afa:	687b      	ldr	r3, [r7, #4]
 8101afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b00:	d01b      	beq.n	8101b3a <TIM_Base_SetConfig+0x9a>
 8101b02:	687b      	ldr	r3, [r7, #4]
 8101b04:	4a32      	ldr	r2, [pc, #200]	; (8101bd0 <TIM_Base_SetConfig+0x130>)
 8101b06:	4293      	cmp	r3, r2
 8101b08:	d017      	beq.n	8101b3a <TIM_Base_SetConfig+0x9a>
 8101b0a:	687b      	ldr	r3, [r7, #4]
 8101b0c:	4a31      	ldr	r2, [pc, #196]	; (8101bd4 <TIM_Base_SetConfig+0x134>)
 8101b0e:	4293      	cmp	r3, r2
 8101b10:	d013      	beq.n	8101b3a <TIM_Base_SetConfig+0x9a>
 8101b12:	687b      	ldr	r3, [r7, #4]
 8101b14:	4a30      	ldr	r2, [pc, #192]	; (8101bd8 <TIM_Base_SetConfig+0x138>)
 8101b16:	4293      	cmp	r3, r2
 8101b18:	d00f      	beq.n	8101b3a <TIM_Base_SetConfig+0x9a>
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	4a2f      	ldr	r2, [pc, #188]	; (8101bdc <TIM_Base_SetConfig+0x13c>)
 8101b1e:	4293      	cmp	r3, r2
 8101b20:	d00b      	beq.n	8101b3a <TIM_Base_SetConfig+0x9a>
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	4a2e      	ldr	r2, [pc, #184]	; (8101be0 <TIM_Base_SetConfig+0x140>)
 8101b26:	4293      	cmp	r3, r2
 8101b28:	d007      	beq.n	8101b3a <TIM_Base_SetConfig+0x9a>
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	4a2d      	ldr	r2, [pc, #180]	; (8101be4 <TIM_Base_SetConfig+0x144>)
 8101b2e:	4293      	cmp	r3, r2
 8101b30:	d003      	beq.n	8101b3a <TIM_Base_SetConfig+0x9a>
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	4a2c      	ldr	r2, [pc, #176]	; (8101be8 <TIM_Base_SetConfig+0x148>)
 8101b36:	4293      	cmp	r3, r2
 8101b38:	d108      	bne.n	8101b4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8101b3a:	68fb      	ldr	r3, [r7, #12]
 8101b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8101b42:	683b      	ldr	r3, [r7, #0]
 8101b44:	68db      	ldr	r3, [r3, #12]
 8101b46:	68fa      	ldr	r2, [r7, #12]
 8101b48:	4313      	orrs	r3, r2
 8101b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8101b4c:	68fb      	ldr	r3, [r7, #12]
 8101b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8101b52:	683b      	ldr	r3, [r7, #0]
 8101b54:	695b      	ldr	r3, [r3, #20]
 8101b56:	4313      	orrs	r3, r2
 8101b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8101b5a:	687b      	ldr	r3, [r7, #4]
 8101b5c:	68fa      	ldr	r2, [r7, #12]
 8101b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8101b60:	683b      	ldr	r3, [r7, #0]
 8101b62:	689a      	ldr	r2, [r3, #8]
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101b68:	683b      	ldr	r3, [r7, #0]
 8101b6a:	681a      	ldr	r2, [r3, #0]
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	4a16      	ldr	r2, [pc, #88]	; (8101bcc <TIM_Base_SetConfig+0x12c>)
 8101b74:	4293      	cmp	r3, r2
 8101b76:	d00f      	beq.n	8101b98 <TIM_Base_SetConfig+0xf8>
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	4a18      	ldr	r2, [pc, #96]	; (8101bdc <TIM_Base_SetConfig+0x13c>)
 8101b7c:	4293      	cmp	r3, r2
 8101b7e:	d00b      	beq.n	8101b98 <TIM_Base_SetConfig+0xf8>
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	4a17      	ldr	r2, [pc, #92]	; (8101be0 <TIM_Base_SetConfig+0x140>)
 8101b84:	4293      	cmp	r3, r2
 8101b86:	d007      	beq.n	8101b98 <TIM_Base_SetConfig+0xf8>
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	4a16      	ldr	r2, [pc, #88]	; (8101be4 <TIM_Base_SetConfig+0x144>)
 8101b8c:	4293      	cmp	r3, r2
 8101b8e:	d003      	beq.n	8101b98 <TIM_Base_SetConfig+0xf8>
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	4a15      	ldr	r2, [pc, #84]	; (8101be8 <TIM_Base_SetConfig+0x148>)
 8101b94:	4293      	cmp	r3, r2
 8101b96:	d103      	bne.n	8101ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101b98:	683b      	ldr	r3, [r7, #0]
 8101b9a:	691a      	ldr	r2, [r3, #16]
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	2201      	movs	r2, #1
 8101ba4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8101ba6:	687b      	ldr	r3, [r7, #4]
 8101ba8:	691b      	ldr	r3, [r3, #16]
 8101baa:	f003 0301 	and.w	r3, r3, #1
 8101bae:	2b01      	cmp	r3, #1
 8101bb0:	d105      	bne.n	8101bbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8101bb2:	687b      	ldr	r3, [r7, #4]
 8101bb4:	691b      	ldr	r3, [r3, #16]
 8101bb6:	f023 0201 	bic.w	r2, r3, #1
 8101bba:	687b      	ldr	r3, [r7, #4]
 8101bbc:	611a      	str	r2, [r3, #16]
  }
}
 8101bbe:	bf00      	nop
 8101bc0:	3714      	adds	r7, #20
 8101bc2:	46bd      	mov	sp, r7
 8101bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bc8:	4770      	bx	lr
 8101bca:	bf00      	nop
 8101bcc:	40010000 	.word	0x40010000
 8101bd0:	40000400 	.word	0x40000400
 8101bd4:	40000800 	.word	0x40000800
 8101bd8:	40000c00 	.word	0x40000c00
 8101bdc:	40010400 	.word	0x40010400
 8101be0:	40014000 	.word	0x40014000
 8101be4:	40014400 	.word	0x40014400
 8101be8:	40014800 	.word	0x40014800

08101bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8101bec:	b480      	push	{r7}
 8101bee:	b087      	sub	sp, #28
 8101bf0:	af00      	add	r7, sp, #0
 8101bf2:	6078      	str	r0, [r7, #4]
 8101bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101bf6:	687b      	ldr	r3, [r7, #4]
 8101bf8:	6a1b      	ldr	r3, [r3, #32]
 8101bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	6a1b      	ldr	r3, [r3, #32]
 8101c00:	f023 0201 	bic.w	r2, r3, #1
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	685b      	ldr	r3, [r3, #4]
 8101c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	699b      	ldr	r3, [r3, #24]
 8101c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8101c14:	68fb      	ldr	r3, [r7, #12]
 8101c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8101c20:	68fb      	ldr	r3, [r7, #12]
 8101c22:	f023 0303 	bic.w	r3, r3, #3
 8101c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8101c28:	683b      	ldr	r3, [r7, #0]
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	68fa      	ldr	r2, [r7, #12]
 8101c2e:	4313      	orrs	r3, r2
 8101c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8101c32:	697b      	ldr	r3, [r7, #20]
 8101c34:	f023 0302 	bic.w	r3, r3, #2
 8101c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8101c3a:	683b      	ldr	r3, [r7, #0]
 8101c3c:	689b      	ldr	r3, [r3, #8]
 8101c3e:	697a      	ldr	r2, [r7, #20]
 8101c40:	4313      	orrs	r3, r2
 8101c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	4a2c      	ldr	r2, [pc, #176]	; (8101cf8 <TIM_OC1_SetConfig+0x10c>)
 8101c48:	4293      	cmp	r3, r2
 8101c4a:	d00f      	beq.n	8101c6c <TIM_OC1_SetConfig+0x80>
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	4a2b      	ldr	r2, [pc, #172]	; (8101cfc <TIM_OC1_SetConfig+0x110>)
 8101c50:	4293      	cmp	r3, r2
 8101c52:	d00b      	beq.n	8101c6c <TIM_OC1_SetConfig+0x80>
 8101c54:	687b      	ldr	r3, [r7, #4]
 8101c56:	4a2a      	ldr	r2, [pc, #168]	; (8101d00 <TIM_OC1_SetConfig+0x114>)
 8101c58:	4293      	cmp	r3, r2
 8101c5a:	d007      	beq.n	8101c6c <TIM_OC1_SetConfig+0x80>
 8101c5c:	687b      	ldr	r3, [r7, #4]
 8101c5e:	4a29      	ldr	r2, [pc, #164]	; (8101d04 <TIM_OC1_SetConfig+0x118>)
 8101c60:	4293      	cmp	r3, r2
 8101c62:	d003      	beq.n	8101c6c <TIM_OC1_SetConfig+0x80>
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	4a28      	ldr	r2, [pc, #160]	; (8101d08 <TIM_OC1_SetConfig+0x11c>)
 8101c68:	4293      	cmp	r3, r2
 8101c6a:	d10c      	bne.n	8101c86 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8101c6c:	697b      	ldr	r3, [r7, #20]
 8101c6e:	f023 0308 	bic.w	r3, r3, #8
 8101c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8101c74:	683b      	ldr	r3, [r7, #0]
 8101c76:	68db      	ldr	r3, [r3, #12]
 8101c78:	697a      	ldr	r2, [r7, #20]
 8101c7a:	4313      	orrs	r3, r2
 8101c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8101c7e:	697b      	ldr	r3, [r7, #20]
 8101c80:	f023 0304 	bic.w	r3, r3, #4
 8101c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	4a1b      	ldr	r2, [pc, #108]	; (8101cf8 <TIM_OC1_SetConfig+0x10c>)
 8101c8a:	4293      	cmp	r3, r2
 8101c8c:	d00f      	beq.n	8101cae <TIM_OC1_SetConfig+0xc2>
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	4a1a      	ldr	r2, [pc, #104]	; (8101cfc <TIM_OC1_SetConfig+0x110>)
 8101c92:	4293      	cmp	r3, r2
 8101c94:	d00b      	beq.n	8101cae <TIM_OC1_SetConfig+0xc2>
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	4a19      	ldr	r2, [pc, #100]	; (8101d00 <TIM_OC1_SetConfig+0x114>)
 8101c9a:	4293      	cmp	r3, r2
 8101c9c:	d007      	beq.n	8101cae <TIM_OC1_SetConfig+0xc2>
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	4a18      	ldr	r2, [pc, #96]	; (8101d04 <TIM_OC1_SetConfig+0x118>)
 8101ca2:	4293      	cmp	r3, r2
 8101ca4:	d003      	beq.n	8101cae <TIM_OC1_SetConfig+0xc2>
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	4a17      	ldr	r2, [pc, #92]	; (8101d08 <TIM_OC1_SetConfig+0x11c>)
 8101caa:	4293      	cmp	r3, r2
 8101cac:	d111      	bne.n	8101cd2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8101cae:	693b      	ldr	r3, [r7, #16]
 8101cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8101cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8101cb6:	693b      	ldr	r3, [r7, #16]
 8101cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8101cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8101cbe:	683b      	ldr	r3, [r7, #0]
 8101cc0:	695b      	ldr	r3, [r3, #20]
 8101cc2:	693a      	ldr	r2, [r7, #16]
 8101cc4:	4313      	orrs	r3, r2
 8101cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8101cc8:	683b      	ldr	r3, [r7, #0]
 8101cca:	699b      	ldr	r3, [r3, #24]
 8101ccc:	693a      	ldr	r2, [r7, #16]
 8101cce:	4313      	orrs	r3, r2
 8101cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	693a      	ldr	r2, [r7, #16]
 8101cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8101cd8:	687b      	ldr	r3, [r7, #4]
 8101cda:	68fa      	ldr	r2, [r7, #12]
 8101cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8101cde:	683b      	ldr	r3, [r7, #0]
 8101ce0:	685a      	ldr	r2, [r3, #4]
 8101ce2:	687b      	ldr	r3, [r7, #4]
 8101ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101ce6:	687b      	ldr	r3, [r7, #4]
 8101ce8:	697a      	ldr	r2, [r7, #20]
 8101cea:	621a      	str	r2, [r3, #32]
}
 8101cec:	bf00      	nop
 8101cee:	371c      	adds	r7, #28
 8101cf0:	46bd      	mov	sp, r7
 8101cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cf6:	4770      	bx	lr
 8101cf8:	40010000 	.word	0x40010000
 8101cfc:	40010400 	.word	0x40010400
 8101d00:	40014000 	.word	0x40014000
 8101d04:	40014400 	.word	0x40014400
 8101d08:	40014800 	.word	0x40014800

08101d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8101d0c:	b480      	push	{r7}
 8101d0e:	b087      	sub	sp, #28
 8101d10:	af00      	add	r7, sp, #0
 8101d12:	6078      	str	r0, [r7, #4]
 8101d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101d16:	687b      	ldr	r3, [r7, #4]
 8101d18:	6a1b      	ldr	r3, [r3, #32]
 8101d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	6a1b      	ldr	r3, [r3, #32]
 8101d20:	f023 0210 	bic.w	r2, r3, #16
 8101d24:	687b      	ldr	r3, [r7, #4]
 8101d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	685b      	ldr	r3, [r3, #4]
 8101d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	699b      	ldr	r3, [r3, #24]
 8101d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8101d34:	68fb      	ldr	r3, [r7, #12]
 8101d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8101d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8101d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8101d40:	68fb      	ldr	r3, [r7, #12]
 8101d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8101d48:	683b      	ldr	r3, [r7, #0]
 8101d4a:	681b      	ldr	r3, [r3, #0]
 8101d4c:	021b      	lsls	r3, r3, #8
 8101d4e:	68fa      	ldr	r2, [r7, #12]
 8101d50:	4313      	orrs	r3, r2
 8101d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8101d54:	697b      	ldr	r3, [r7, #20]
 8101d56:	f023 0320 	bic.w	r3, r3, #32
 8101d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8101d5c:	683b      	ldr	r3, [r7, #0]
 8101d5e:	689b      	ldr	r3, [r3, #8]
 8101d60:	011b      	lsls	r3, r3, #4
 8101d62:	697a      	ldr	r2, [r7, #20]
 8101d64:	4313      	orrs	r3, r2
 8101d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	4a28      	ldr	r2, [pc, #160]	; (8101e0c <TIM_OC2_SetConfig+0x100>)
 8101d6c:	4293      	cmp	r3, r2
 8101d6e:	d003      	beq.n	8101d78 <TIM_OC2_SetConfig+0x6c>
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	4a27      	ldr	r2, [pc, #156]	; (8101e10 <TIM_OC2_SetConfig+0x104>)
 8101d74:	4293      	cmp	r3, r2
 8101d76:	d10d      	bne.n	8101d94 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8101d78:	697b      	ldr	r3, [r7, #20]
 8101d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8101d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8101d80:	683b      	ldr	r3, [r7, #0]
 8101d82:	68db      	ldr	r3, [r3, #12]
 8101d84:	011b      	lsls	r3, r3, #4
 8101d86:	697a      	ldr	r2, [r7, #20]
 8101d88:	4313      	orrs	r3, r2
 8101d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8101d8c:	697b      	ldr	r3, [r7, #20]
 8101d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8101d92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	4a1d      	ldr	r2, [pc, #116]	; (8101e0c <TIM_OC2_SetConfig+0x100>)
 8101d98:	4293      	cmp	r3, r2
 8101d9a:	d00f      	beq.n	8101dbc <TIM_OC2_SetConfig+0xb0>
 8101d9c:	687b      	ldr	r3, [r7, #4]
 8101d9e:	4a1c      	ldr	r2, [pc, #112]	; (8101e10 <TIM_OC2_SetConfig+0x104>)
 8101da0:	4293      	cmp	r3, r2
 8101da2:	d00b      	beq.n	8101dbc <TIM_OC2_SetConfig+0xb0>
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	4a1b      	ldr	r2, [pc, #108]	; (8101e14 <TIM_OC2_SetConfig+0x108>)
 8101da8:	4293      	cmp	r3, r2
 8101daa:	d007      	beq.n	8101dbc <TIM_OC2_SetConfig+0xb0>
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	4a1a      	ldr	r2, [pc, #104]	; (8101e18 <TIM_OC2_SetConfig+0x10c>)
 8101db0:	4293      	cmp	r3, r2
 8101db2:	d003      	beq.n	8101dbc <TIM_OC2_SetConfig+0xb0>
 8101db4:	687b      	ldr	r3, [r7, #4]
 8101db6:	4a19      	ldr	r2, [pc, #100]	; (8101e1c <TIM_OC2_SetConfig+0x110>)
 8101db8:	4293      	cmp	r3, r2
 8101dba:	d113      	bne.n	8101de4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8101dbc:	693b      	ldr	r3, [r7, #16]
 8101dbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8101dc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8101dc4:	693b      	ldr	r3, [r7, #16]
 8101dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8101dca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8101dcc:	683b      	ldr	r3, [r7, #0]
 8101dce:	695b      	ldr	r3, [r3, #20]
 8101dd0:	009b      	lsls	r3, r3, #2
 8101dd2:	693a      	ldr	r2, [r7, #16]
 8101dd4:	4313      	orrs	r3, r2
 8101dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8101dd8:	683b      	ldr	r3, [r7, #0]
 8101dda:	699b      	ldr	r3, [r3, #24]
 8101ddc:	009b      	lsls	r3, r3, #2
 8101dde:	693a      	ldr	r2, [r7, #16]
 8101de0:	4313      	orrs	r3, r2
 8101de2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	693a      	ldr	r2, [r7, #16]
 8101de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	68fa      	ldr	r2, [r7, #12]
 8101dee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8101df0:	683b      	ldr	r3, [r7, #0]
 8101df2:	685a      	ldr	r2, [r3, #4]
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	697a      	ldr	r2, [r7, #20]
 8101dfc:	621a      	str	r2, [r3, #32]
}
 8101dfe:	bf00      	nop
 8101e00:	371c      	adds	r7, #28
 8101e02:	46bd      	mov	sp, r7
 8101e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e08:	4770      	bx	lr
 8101e0a:	bf00      	nop
 8101e0c:	40010000 	.word	0x40010000
 8101e10:	40010400 	.word	0x40010400
 8101e14:	40014000 	.word	0x40014000
 8101e18:	40014400 	.word	0x40014400
 8101e1c:	40014800 	.word	0x40014800

08101e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8101e20:	b480      	push	{r7}
 8101e22:	b087      	sub	sp, #28
 8101e24:	af00      	add	r7, sp, #0
 8101e26:	6078      	str	r0, [r7, #4]
 8101e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101e2a:	687b      	ldr	r3, [r7, #4]
 8101e2c:	6a1b      	ldr	r3, [r3, #32]
 8101e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	6a1b      	ldr	r3, [r3, #32]
 8101e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	685b      	ldr	r3, [r3, #4]
 8101e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	69db      	ldr	r3, [r3, #28]
 8101e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8101e48:	68fb      	ldr	r3, [r7, #12]
 8101e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8101e54:	68fb      	ldr	r3, [r7, #12]
 8101e56:	f023 0303 	bic.w	r3, r3, #3
 8101e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8101e5c:	683b      	ldr	r3, [r7, #0]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	68fa      	ldr	r2, [r7, #12]
 8101e62:	4313      	orrs	r3, r2
 8101e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8101e66:	697b      	ldr	r3, [r7, #20]
 8101e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8101e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8101e6e:	683b      	ldr	r3, [r7, #0]
 8101e70:	689b      	ldr	r3, [r3, #8]
 8101e72:	021b      	lsls	r3, r3, #8
 8101e74:	697a      	ldr	r2, [r7, #20]
 8101e76:	4313      	orrs	r3, r2
 8101e78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	4a27      	ldr	r2, [pc, #156]	; (8101f1c <TIM_OC3_SetConfig+0xfc>)
 8101e7e:	4293      	cmp	r3, r2
 8101e80:	d003      	beq.n	8101e8a <TIM_OC3_SetConfig+0x6a>
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	4a26      	ldr	r2, [pc, #152]	; (8101f20 <TIM_OC3_SetConfig+0x100>)
 8101e86:	4293      	cmp	r3, r2
 8101e88:	d10d      	bne.n	8101ea6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8101e8a:	697b      	ldr	r3, [r7, #20]
 8101e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8101e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8101e92:	683b      	ldr	r3, [r7, #0]
 8101e94:	68db      	ldr	r3, [r3, #12]
 8101e96:	021b      	lsls	r3, r3, #8
 8101e98:	697a      	ldr	r2, [r7, #20]
 8101e9a:	4313      	orrs	r3, r2
 8101e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8101e9e:	697b      	ldr	r3, [r7, #20]
 8101ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8101ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	4a1c      	ldr	r2, [pc, #112]	; (8101f1c <TIM_OC3_SetConfig+0xfc>)
 8101eaa:	4293      	cmp	r3, r2
 8101eac:	d00f      	beq.n	8101ece <TIM_OC3_SetConfig+0xae>
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	4a1b      	ldr	r2, [pc, #108]	; (8101f20 <TIM_OC3_SetConfig+0x100>)
 8101eb2:	4293      	cmp	r3, r2
 8101eb4:	d00b      	beq.n	8101ece <TIM_OC3_SetConfig+0xae>
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	4a1a      	ldr	r2, [pc, #104]	; (8101f24 <TIM_OC3_SetConfig+0x104>)
 8101eba:	4293      	cmp	r3, r2
 8101ebc:	d007      	beq.n	8101ece <TIM_OC3_SetConfig+0xae>
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	4a19      	ldr	r2, [pc, #100]	; (8101f28 <TIM_OC3_SetConfig+0x108>)
 8101ec2:	4293      	cmp	r3, r2
 8101ec4:	d003      	beq.n	8101ece <TIM_OC3_SetConfig+0xae>
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	4a18      	ldr	r2, [pc, #96]	; (8101f2c <TIM_OC3_SetConfig+0x10c>)
 8101eca:	4293      	cmp	r3, r2
 8101ecc:	d113      	bne.n	8101ef6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8101ece:	693b      	ldr	r3, [r7, #16]
 8101ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8101ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8101ed6:	693b      	ldr	r3, [r7, #16]
 8101ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8101edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8101ede:	683b      	ldr	r3, [r7, #0]
 8101ee0:	695b      	ldr	r3, [r3, #20]
 8101ee2:	011b      	lsls	r3, r3, #4
 8101ee4:	693a      	ldr	r2, [r7, #16]
 8101ee6:	4313      	orrs	r3, r2
 8101ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8101eea:	683b      	ldr	r3, [r7, #0]
 8101eec:	699b      	ldr	r3, [r3, #24]
 8101eee:	011b      	lsls	r3, r3, #4
 8101ef0:	693a      	ldr	r2, [r7, #16]
 8101ef2:	4313      	orrs	r3, r2
 8101ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	693a      	ldr	r2, [r7, #16]
 8101efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8101efc:	687b      	ldr	r3, [r7, #4]
 8101efe:	68fa      	ldr	r2, [r7, #12]
 8101f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8101f02:	683b      	ldr	r3, [r7, #0]
 8101f04:	685a      	ldr	r2, [r3, #4]
 8101f06:	687b      	ldr	r3, [r7, #4]
 8101f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	697a      	ldr	r2, [r7, #20]
 8101f0e:	621a      	str	r2, [r3, #32]
}
 8101f10:	bf00      	nop
 8101f12:	371c      	adds	r7, #28
 8101f14:	46bd      	mov	sp, r7
 8101f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f1a:	4770      	bx	lr
 8101f1c:	40010000 	.word	0x40010000
 8101f20:	40010400 	.word	0x40010400
 8101f24:	40014000 	.word	0x40014000
 8101f28:	40014400 	.word	0x40014400
 8101f2c:	40014800 	.word	0x40014800

08101f30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8101f30:	b480      	push	{r7}
 8101f32:	b087      	sub	sp, #28
 8101f34:	af00      	add	r7, sp, #0
 8101f36:	6078      	str	r0, [r7, #4]
 8101f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	6a1b      	ldr	r3, [r3, #32]
 8101f3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8101f40:	687b      	ldr	r3, [r7, #4]
 8101f42:	6a1b      	ldr	r3, [r3, #32]
 8101f44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8101f48:	687b      	ldr	r3, [r7, #4]
 8101f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	685b      	ldr	r3, [r3, #4]
 8101f50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	69db      	ldr	r3, [r3, #28]
 8101f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8101f58:	68fb      	ldr	r3, [r7, #12]
 8101f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8101f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8101f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8101f64:	68fb      	ldr	r3, [r7, #12]
 8101f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8101f6c:	683b      	ldr	r3, [r7, #0]
 8101f6e:	681b      	ldr	r3, [r3, #0]
 8101f70:	021b      	lsls	r3, r3, #8
 8101f72:	68fa      	ldr	r2, [r7, #12]
 8101f74:	4313      	orrs	r3, r2
 8101f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8101f78:	693b      	ldr	r3, [r7, #16]
 8101f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8101f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8101f80:	683b      	ldr	r3, [r7, #0]
 8101f82:	689b      	ldr	r3, [r3, #8]
 8101f84:	031b      	lsls	r3, r3, #12
 8101f86:	693a      	ldr	r2, [r7, #16]
 8101f88:	4313      	orrs	r3, r2
 8101f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	4a18      	ldr	r2, [pc, #96]	; (8101ff0 <TIM_OC4_SetConfig+0xc0>)
 8101f90:	4293      	cmp	r3, r2
 8101f92:	d00f      	beq.n	8101fb4 <TIM_OC4_SetConfig+0x84>
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	4a17      	ldr	r2, [pc, #92]	; (8101ff4 <TIM_OC4_SetConfig+0xc4>)
 8101f98:	4293      	cmp	r3, r2
 8101f9a:	d00b      	beq.n	8101fb4 <TIM_OC4_SetConfig+0x84>
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	4a16      	ldr	r2, [pc, #88]	; (8101ff8 <TIM_OC4_SetConfig+0xc8>)
 8101fa0:	4293      	cmp	r3, r2
 8101fa2:	d007      	beq.n	8101fb4 <TIM_OC4_SetConfig+0x84>
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	4a15      	ldr	r2, [pc, #84]	; (8101ffc <TIM_OC4_SetConfig+0xcc>)
 8101fa8:	4293      	cmp	r3, r2
 8101faa:	d003      	beq.n	8101fb4 <TIM_OC4_SetConfig+0x84>
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	4a14      	ldr	r2, [pc, #80]	; (8102000 <TIM_OC4_SetConfig+0xd0>)
 8101fb0:	4293      	cmp	r3, r2
 8101fb2:	d109      	bne.n	8101fc8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8101fb4:	697b      	ldr	r3, [r7, #20]
 8101fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8101fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8101fbc:	683b      	ldr	r3, [r7, #0]
 8101fbe:	695b      	ldr	r3, [r3, #20]
 8101fc0:	019b      	lsls	r3, r3, #6
 8101fc2:	697a      	ldr	r2, [r7, #20]
 8101fc4:	4313      	orrs	r3, r2
 8101fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	697a      	ldr	r2, [r7, #20]
 8101fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8101fce:	687b      	ldr	r3, [r7, #4]
 8101fd0:	68fa      	ldr	r2, [r7, #12]
 8101fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8101fd4:	683b      	ldr	r3, [r7, #0]
 8101fd6:	685a      	ldr	r2, [r3, #4]
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	693a      	ldr	r2, [r7, #16]
 8101fe0:	621a      	str	r2, [r3, #32]
}
 8101fe2:	bf00      	nop
 8101fe4:	371c      	adds	r7, #28
 8101fe6:	46bd      	mov	sp, r7
 8101fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fec:	4770      	bx	lr
 8101fee:	bf00      	nop
 8101ff0:	40010000 	.word	0x40010000
 8101ff4:	40010400 	.word	0x40010400
 8101ff8:	40014000 	.word	0x40014000
 8101ffc:	40014400 	.word	0x40014400
 8102000:	40014800 	.word	0x40014800

08102004 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8102004:	b480      	push	{r7}
 8102006:	b087      	sub	sp, #28
 8102008:	af00      	add	r7, sp, #0
 810200a:	6078      	str	r0, [r7, #4]
 810200c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	6a1b      	ldr	r3, [r3, #32]
 8102012:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	6a1b      	ldr	r3, [r3, #32]
 8102018:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810201c:	687b      	ldr	r3, [r7, #4]
 810201e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	685b      	ldr	r3, [r3, #4]
 8102024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8102026:	687b      	ldr	r3, [r7, #4]
 8102028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810202a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810202c:	68fb      	ldr	r3, [r7, #12]
 810202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102038:	683b      	ldr	r3, [r7, #0]
 810203a:	681b      	ldr	r3, [r3, #0]
 810203c:	68fa      	ldr	r2, [r7, #12]
 810203e:	4313      	orrs	r3, r2
 8102040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8102042:	693b      	ldr	r3, [r7, #16]
 8102044:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8102048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810204a:	683b      	ldr	r3, [r7, #0]
 810204c:	689b      	ldr	r3, [r3, #8]
 810204e:	041b      	lsls	r3, r3, #16
 8102050:	693a      	ldr	r2, [r7, #16]
 8102052:	4313      	orrs	r3, r2
 8102054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	4a17      	ldr	r2, [pc, #92]	; (81020b8 <TIM_OC5_SetConfig+0xb4>)
 810205a:	4293      	cmp	r3, r2
 810205c:	d00f      	beq.n	810207e <TIM_OC5_SetConfig+0x7a>
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	4a16      	ldr	r2, [pc, #88]	; (81020bc <TIM_OC5_SetConfig+0xb8>)
 8102062:	4293      	cmp	r3, r2
 8102064:	d00b      	beq.n	810207e <TIM_OC5_SetConfig+0x7a>
 8102066:	687b      	ldr	r3, [r7, #4]
 8102068:	4a15      	ldr	r2, [pc, #84]	; (81020c0 <TIM_OC5_SetConfig+0xbc>)
 810206a:	4293      	cmp	r3, r2
 810206c:	d007      	beq.n	810207e <TIM_OC5_SetConfig+0x7a>
 810206e:	687b      	ldr	r3, [r7, #4]
 8102070:	4a14      	ldr	r2, [pc, #80]	; (81020c4 <TIM_OC5_SetConfig+0xc0>)
 8102072:	4293      	cmp	r3, r2
 8102074:	d003      	beq.n	810207e <TIM_OC5_SetConfig+0x7a>
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	4a13      	ldr	r2, [pc, #76]	; (81020c8 <TIM_OC5_SetConfig+0xc4>)
 810207a:	4293      	cmp	r3, r2
 810207c:	d109      	bne.n	8102092 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810207e:	697b      	ldr	r3, [r7, #20]
 8102080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8102086:	683b      	ldr	r3, [r7, #0]
 8102088:	695b      	ldr	r3, [r3, #20]
 810208a:	021b      	lsls	r3, r3, #8
 810208c:	697a      	ldr	r2, [r7, #20]
 810208e:	4313      	orrs	r3, r2
 8102090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	697a      	ldr	r2, [r7, #20]
 8102096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	68fa      	ldr	r2, [r7, #12]
 810209c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810209e:	683b      	ldr	r3, [r7, #0]
 81020a0:	685a      	ldr	r2, [r3, #4]
 81020a2:	687b      	ldr	r3, [r7, #4]
 81020a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81020a6:	687b      	ldr	r3, [r7, #4]
 81020a8:	693a      	ldr	r2, [r7, #16]
 81020aa:	621a      	str	r2, [r3, #32]
}
 81020ac:	bf00      	nop
 81020ae:	371c      	adds	r7, #28
 81020b0:	46bd      	mov	sp, r7
 81020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b6:	4770      	bx	lr
 81020b8:	40010000 	.word	0x40010000
 81020bc:	40010400 	.word	0x40010400
 81020c0:	40014000 	.word	0x40014000
 81020c4:	40014400 	.word	0x40014400
 81020c8:	40014800 	.word	0x40014800

081020cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81020cc:	b480      	push	{r7}
 81020ce:	b087      	sub	sp, #28
 81020d0:	af00      	add	r7, sp, #0
 81020d2:	6078      	str	r0, [r7, #4]
 81020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	6a1b      	ldr	r3, [r3, #32]
 81020da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	6a1b      	ldr	r3, [r3, #32]
 81020e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	685b      	ldr	r3, [r3, #4]
 81020ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81020f4:	68fb      	ldr	r3, [r7, #12]
 81020f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81020fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81020fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102100:	683b      	ldr	r3, [r7, #0]
 8102102:	681b      	ldr	r3, [r3, #0]
 8102104:	021b      	lsls	r3, r3, #8
 8102106:	68fa      	ldr	r2, [r7, #12]
 8102108:	4313      	orrs	r3, r2
 810210a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810210c:	693b      	ldr	r3, [r7, #16]
 810210e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8102112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8102114:	683b      	ldr	r3, [r7, #0]
 8102116:	689b      	ldr	r3, [r3, #8]
 8102118:	051b      	lsls	r3, r3, #20
 810211a:	693a      	ldr	r2, [r7, #16]
 810211c:	4313      	orrs	r3, r2
 810211e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	4a18      	ldr	r2, [pc, #96]	; (8102184 <TIM_OC6_SetConfig+0xb8>)
 8102124:	4293      	cmp	r3, r2
 8102126:	d00f      	beq.n	8102148 <TIM_OC6_SetConfig+0x7c>
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	4a17      	ldr	r2, [pc, #92]	; (8102188 <TIM_OC6_SetConfig+0xbc>)
 810212c:	4293      	cmp	r3, r2
 810212e:	d00b      	beq.n	8102148 <TIM_OC6_SetConfig+0x7c>
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	4a16      	ldr	r2, [pc, #88]	; (810218c <TIM_OC6_SetConfig+0xc0>)
 8102134:	4293      	cmp	r3, r2
 8102136:	d007      	beq.n	8102148 <TIM_OC6_SetConfig+0x7c>
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	4a15      	ldr	r2, [pc, #84]	; (8102190 <TIM_OC6_SetConfig+0xc4>)
 810213c:	4293      	cmp	r3, r2
 810213e:	d003      	beq.n	8102148 <TIM_OC6_SetConfig+0x7c>
 8102140:	687b      	ldr	r3, [r7, #4]
 8102142:	4a14      	ldr	r2, [pc, #80]	; (8102194 <TIM_OC6_SetConfig+0xc8>)
 8102144:	4293      	cmp	r3, r2
 8102146:	d109      	bne.n	810215c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8102148:	697b      	ldr	r3, [r7, #20]
 810214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810214e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8102150:	683b      	ldr	r3, [r7, #0]
 8102152:	695b      	ldr	r3, [r3, #20]
 8102154:	029b      	lsls	r3, r3, #10
 8102156:	697a      	ldr	r2, [r7, #20]
 8102158:	4313      	orrs	r3, r2
 810215a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810215c:	687b      	ldr	r3, [r7, #4]
 810215e:	697a      	ldr	r2, [r7, #20]
 8102160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	68fa      	ldr	r2, [r7, #12]
 8102166:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8102168:	683b      	ldr	r3, [r7, #0]
 810216a:	685a      	ldr	r2, [r3, #4]
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	693a      	ldr	r2, [r7, #16]
 8102174:	621a      	str	r2, [r3, #32]
}
 8102176:	bf00      	nop
 8102178:	371c      	adds	r7, #28
 810217a:	46bd      	mov	sp, r7
 810217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102180:	4770      	bx	lr
 8102182:	bf00      	nop
 8102184:	40010000 	.word	0x40010000
 8102188:	40010400 	.word	0x40010400
 810218c:	40014000 	.word	0x40014000
 8102190:	40014400 	.word	0x40014400
 8102194:	40014800 	.word	0x40014800

08102198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8102198:	b480      	push	{r7}
 810219a:	b087      	sub	sp, #28
 810219c:	af00      	add	r7, sp, #0
 810219e:	60f8      	str	r0, [r7, #12]
 81021a0:	60b9      	str	r1, [r7, #8]
 81021a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81021a4:	68fb      	ldr	r3, [r7, #12]
 81021a6:	6a1b      	ldr	r3, [r3, #32]
 81021a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81021aa:	68fb      	ldr	r3, [r7, #12]
 81021ac:	6a1b      	ldr	r3, [r3, #32]
 81021ae:	f023 0201 	bic.w	r2, r3, #1
 81021b2:	68fb      	ldr	r3, [r7, #12]
 81021b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81021b6:	68fb      	ldr	r3, [r7, #12]
 81021b8:	699b      	ldr	r3, [r3, #24]
 81021ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81021bc:	693b      	ldr	r3, [r7, #16]
 81021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81021c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	011b      	lsls	r3, r3, #4
 81021c8:	693a      	ldr	r2, [r7, #16]
 81021ca:	4313      	orrs	r3, r2
 81021cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81021ce:	697b      	ldr	r3, [r7, #20]
 81021d0:	f023 030a 	bic.w	r3, r3, #10
 81021d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81021d6:	697a      	ldr	r2, [r7, #20]
 81021d8:	68bb      	ldr	r3, [r7, #8]
 81021da:	4313      	orrs	r3, r2
 81021dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81021de:	68fb      	ldr	r3, [r7, #12]
 81021e0:	693a      	ldr	r2, [r7, #16]
 81021e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81021e4:	68fb      	ldr	r3, [r7, #12]
 81021e6:	697a      	ldr	r2, [r7, #20]
 81021e8:	621a      	str	r2, [r3, #32]
}
 81021ea:	bf00      	nop
 81021ec:	371c      	adds	r7, #28
 81021ee:	46bd      	mov	sp, r7
 81021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021f4:	4770      	bx	lr

081021f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81021f6:	b480      	push	{r7}
 81021f8:	b087      	sub	sp, #28
 81021fa:	af00      	add	r7, sp, #0
 81021fc:	60f8      	str	r0, [r7, #12]
 81021fe:	60b9      	str	r1, [r7, #8]
 8102200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8102202:	68fb      	ldr	r3, [r7, #12]
 8102204:	6a1b      	ldr	r3, [r3, #32]
 8102206:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8102208:	68fb      	ldr	r3, [r7, #12]
 810220a:	6a1b      	ldr	r3, [r3, #32]
 810220c:	f023 0210 	bic.w	r2, r3, #16
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8102214:	68fb      	ldr	r3, [r7, #12]
 8102216:	699b      	ldr	r3, [r3, #24]
 8102218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810221a:	693b      	ldr	r3, [r7, #16]
 810221c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8102220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	031b      	lsls	r3, r3, #12
 8102226:	693a      	ldr	r2, [r7, #16]
 8102228:	4313      	orrs	r3, r2
 810222a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810222c:	697b      	ldr	r3, [r7, #20]
 810222e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8102232:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8102234:	68bb      	ldr	r3, [r7, #8]
 8102236:	011b      	lsls	r3, r3, #4
 8102238:	697a      	ldr	r2, [r7, #20]
 810223a:	4313      	orrs	r3, r2
 810223c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810223e:	68fb      	ldr	r3, [r7, #12]
 8102240:	693a      	ldr	r2, [r7, #16]
 8102242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8102244:	68fb      	ldr	r3, [r7, #12]
 8102246:	697a      	ldr	r2, [r7, #20]
 8102248:	621a      	str	r2, [r3, #32]
}
 810224a:	bf00      	nop
 810224c:	371c      	adds	r7, #28
 810224e:	46bd      	mov	sp, r7
 8102250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102254:	4770      	bx	lr

08102256 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8102256:	b480      	push	{r7}
 8102258:	b085      	sub	sp, #20
 810225a:	af00      	add	r7, sp, #0
 810225c:	6078      	str	r0, [r7, #4]
 810225e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	689b      	ldr	r3, [r3, #8]
 8102264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8102266:	68fb      	ldr	r3, [r7, #12]
 8102268:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 810226c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8102272:	683a      	ldr	r2, [r7, #0]
 8102274:	68fb      	ldr	r3, [r7, #12]
 8102276:	4313      	orrs	r3, r2
 8102278:	f043 0307 	orr.w	r3, r3, #7
 810227c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	68fa      	ldr	r2, [r7, #12]
 8102282:	609a      	str	r2, [r3, #8]
}
 8102284:	bf00      	nop
 8102286:	3714      	adds	r7, #20
 8102288:	46bd      	mov	sp, r7
 810228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810228e:	4770      	bx	lr

08102290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8102290:	b480      	push	{r7}
 8102292:	b087      	sub	sp, #28
 8102294:	af00      	add	r7, sp, #0
 8102296:	60f8      	str	r0, [r7, #12]
 8102298:	60b9      	str	r1, [r7, #8]
 810229a:	607a      	str	r2, [r7, #4]
 810229c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810229e:	68fb      	ldr	r3, [r7, #12]
 81022a0:	689b      	ldr	r3, [r3, #8]
 81022a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81022a4:	697b      	ldr	r3, [r7, #20]
 81022a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81022aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81022ac:	683b      	ldr	r3, [r7, #0]
 81022ae:	021a      	lsls	r2, r3, #8
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	431a      	orrs	r2, r3
 81022b4:	68bb      	ldr	r3, [r7, #8]
 81022b6:	4313      	orrs	r3, r2
 81022b8:	697a      	ldr	r2, [r7, #20]
 81022ba:	4313      	orrs	r3, r2
 81022bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81022be:	68fb      	ldr	r3, [r7, #12]
 81022c0:	697a      	ldr	r2, [r7, #20]
 81022c2:	609a      	str	r2, [r3, #8]
}
 81022c4:	bf00      	nop
 81022c6:	371c      	adds	r7, #28
 81022c8:	46bd      	mov	sp, r7
 81022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ce:	4770      	bx	lr

081022d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81022d0:	b480      	push	{r7}
 81022d2:	b087      	sub	sp, #28
 81022d4:	af00      	add	r7, sp, #0
 81022d6:	60f8      	str	r0, [r7, #12]
 81022d8:	60b9      	str	r1, [r7, #8]
 81022da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81022dc:	68bb      	ldr	r3, [r7, #8]
 81022de:	f003 031f 	and.w	r3, r3, #31
 81022e2:	2201      	movs	r2, #1
 81022e4:	fa02 f303 	lsl.w	r3, r2, r3
 81022e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81022ea:	68fb      	ldr	r3, [r7, #12]
 81022ec:	6a1a      	ldr	r2, [r3, #32]
 81022ee:	697b      	ldr	r3, [r7, #20]
 81022f0:	43db      	mvns	r3, r3
 81022f2:	401a      	ands	r2, r3
 81022f4:	68fb      	ldr	r3, [r7, #12]
 81022f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81022f8:	68fb      	ldr	r3, [r7, #12]
 81022fa:	6a1a      	ldr	r2, [r3, #32]
 81022fc:	68bb      	ldr	r3, [r7, #8]
 81022fe:	f003 031f 	and.w	r3, r3, #31
 8102302:	6879      	ldr	r1, [r7, #4]
 8102304:	fa01 f303 	lsl.w	r3, r1, r3
 8102308:	431a      	orrs	r2, r3
 810230a:	68fb      	ldr	r3, [r7, #12]
 810230c:	621a      	str	r2, [r3, #32]
}
 810230e:	bf00      	nop
 8102310:	371c      	adds	r7, #28
 8102312:	46bd      	mov	sp, r7
 8102314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102318:	4770      	bx	lr
	...

0810231c <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810231c:	b580      	push	{r7, lr}
 810231e:	b084      	sub	sp, #16
 8102320:	af00      	add	r7, sp, #0
 8102322:	6078      	str	r0, [r7, #4]
 8102324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102326:	2300      	movs	r3, #0
 8102328:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810232a:	683b      	ldr	r3, [r7, #0]
 810232c:	2b00      	cmp	r3, #0
 810232e:	d109      	bne.n	8102344 <HAL_TIMEx_PWMN_Start_IT+0x28>
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8102336:	b2db      	uxtb	r3, r3
 8102338:	2b01      	cmp	r3, #1
 810233a:	bf14      	ite	ne
 810233c:	2301      	movne	r3, #1
 810233e:	2300      	moveq	r3, #0
 8102340:	b2db      	uxtb	r3, r3
 8102342:	e022      	b.n	810238a <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8102344:	683b      	ldr	r3, [r7, #0]
 8102346:	2b04      	cmp	r3, #4
 8102348:	d109      	bne.n	810235e <HAL_TIMEx_PWMN_Start_IT+0x42>
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8102350:	b2db      	uxtb	r3, r3
 8102352:	2b01      	cmp	r3, #1
 8102354:	bf14      	ite	ne
 8102356:	2301      	movne	r3, #1
 8102358:	2300      	moveq	r3, #0
 810235a:	b2db      	uxtb	r3, r3
 810235c:	e015      	b.n	810238a <HAL_TIMEx_PWMN_Start_IT+0x6e>
 810235e:	683b      	ldr	r3, [r7, #0]
 8102360:	2b08      	cmp	r3, #8
 8102362:	d109      	bne.n	8102378 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 810236a:	b2db      	uxtb	r3, r3
 810236c:	2b01      	cmp	r3, #1
 810236e:	bf14      	ite	ne
 8102370:	2301      	movne	r3, #1
 8102372:	2300      	moveq	r3, #0
 8102374:	b2db      	uxtb	r3, r3
 8102376:	e008      	b.n	810238a <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 810237e:	b2db      	uxtb	r3, r3
 8102380:	2b01      	cmp	r3, #1
 8102382:	bf14      	ite	ne
 8102384:	2301      	movne	r3, #1
 8102386:	2300      	moveq	r3, #0
 8102388:	b2db      	uxtb	r3, r3
 810238a:	2b00      	cmp	r3, #0
 810238c:	d001      	beq.n	8102392 <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 810238e:	2301      	movs	r3, #1
 8102390:	e0a9      	b.n	81024e6 <HAL_TIMEx_PWMN_Start_IT+0x1ca>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8102392:	683b      	ldr	r3, [r7, #0]
 8102394:	2b00      	cmp	r3, #0
 8102396:	d104      	bne.n	81023a2 <HAL_TIMEx_PWMN_Start_IT+0x86>
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	2202      	movs	r2, #2
 810239c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81023a0:	e013      	b.n	81023ca <HAL_TIMEx_PWMN_Start_IT+0xae>
 81023a2:	683b      	ldr	r3, [r7, #0]
 81023a4:	2b04      	cmp	r3, #4
 81023a6:	d104      	bne.n	81023b2 <HAL_TIMEx_PWMN_Start_IT+0x96>
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	2202      	movs	r2, #2
 81023ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81023b0:	e00b      	b.n	81023ca <HAL_TIMEx_PWMN_Start_IT+0xae>
 81023b2:	683b      	ldr	r3, [r7, #0]
 81023b4:	2b08      	cmp	r3, #8
 81023b6:	d104      	bne.n	81023c2 <HAL_TIMEx_PWMN_Start_IT+0xa6>
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	2202      	movs	r2, #2
 81023bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81023c0:	e003      	b.n	81023ca <HAL_TIMEx_PWMN_Start_IT+0xae>
 81023c2:	687b      	ldr	r3, [r7, #4]
 81023c4:	2202      	movs	r2, #2
 81023c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 81023ca:	683b      	ldr	r3, [r7, #0]
 81023cc:	2b08      	cmp	r3, #8
 81023ce:	d01b      	beq.n	8102408 <HAL_TIMEx_PWMN_Start_IT+0xec>
 81023d0:	683b      	ldr	r3, [r7, #0]
 81023d2:	2b08      	cmp	r3, #8
 81023d4:	d821      	bhi.n	810241a <HAL_TIMEx_PWMN_Start_IT+0xfe>
 81023d6:	683b      	ldr	r3, [r7, #0]
 81023d8:	2b00      	cmp	r3, #0
 81023da:	d003      	beq.n	81023e4 <HAL_TIMEx_PWMN_Start_IT+0xc8>
 81023dc:	683b      	ldr	r3, [r7, #0]
 81023de:	2b04      	cmp	r3, #4
 81023e0:	d009      	beq.n	81023f6 <HAL_TIMEx_PWMN_Start_IT+0xda>
 81023e2:	e01a      	b.n	810241a <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	68da      	ldr	r2, [r3, #12]
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	681b      	ldr	r3, [r3, #0]
 81023ee:	f042 0202 	orr.w	r2, r2, #2
 81023f2:	60da      	str	r2, [r3, #12]
      break;
 81023f4:	e014      	b.n	8102420 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	681b      	ldr	r3, [r3, #0]
 81023fa:	68da      	ldr	r2, [r3, #12]
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	681b      	ldr	r3, [r3, #0]
 8102400:	f042 0204 	orr.w	r2, r2, #4
 8102404:	60da      	str	r2, [r3, #12]
      break;
 8102406:	e00b      	b.n	8102420 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	681b      	ldr	r3, [r3, #0]
 810240c:	68da      	ldr	r2, [r3, #12]
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	681b      	ldr	r3, [r3, #0]
 8102412:	f042 0208 	orr.w	r2, r2, #8
 8102416:	60da      	str	r2, [r3, #12]
      break;
 8102418:	e002      	b.n	8102420 <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 810241a:	2301      	movs	r3, #1
 810241c:	73fb      	strb	r3, [r7, #15]
      break;
 810241e:	bf00      	nop
  }

  if (status == HAL_OK)
 8102420:	7bfb      	ldrb	r3, [r7, #15]
 8102422:	2b00      	cmp	r3, #0
 8102424:	d15e      	bne.n	81024e4 <HAL_TIMEx_PWMN_Start_IT+0x1c8>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	68da      	ldr	r2, [r3, #12]
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	681b      	ldr	r3, [r3, #0]
 8102430:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8102434:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	681b      	ldr	r3, [r3, #0]
 810243a:	2204      	movs	r2, #4
 810243c:	6839      	ldr	r1, [r7, #0]
 810243e:	4618      	mov	r0, r3
 8102440:	f000 f972 	bl	8102728 <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	681b      	ldr	r3, [r3, #0]
 810244e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102452:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	681b      	ldr	r3, [r3, #0]
 8102458:	4a25      	ldr	r2, [pc, #148]	; (81024f0 <HAL_TIMEx_PWMN_Start_IT+0x1d4>)
 810245a:	4293      	cmp	r3, r2
 810245c:	d022      	beq.n	81024a4 <HAL_TIMEx_PWMN_Start_IT+0x188>
 810245e:	687b      	ldr	r3, [r7, #4]
 8102460:	681b      	ldr	r3, [r3, #0]
 8102462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102466:	d01d      	beq.n	81024a4 <HAL_TIMEx_PWMN_Start_IT+0x188>
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	681b      	ldr	r3, [r3, #0]
 810246c:	4a21      	ldr	r2, [pc, #132]	; (81024f4 <HAL_TIMEx_PWMN_Start_IT+0x1d8>)
 810246e:	4293      	cmp	r3, r2
 8102470:	d018      	beq.n	81024a4 <HAL_TIMEx_PWMN_Start_IT+0x188>
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	681b      	ldr	r3, [r3, #0]
 8102476:	4a20      	ldr	r2, [pc, #128]	; (81024f8 <HAL_TIMEx_PWMN_Start_IT+0x1dc>)
 8102478:	4293      	cmp	r3, r2
 810247a:	d013      	beq.n	81024a4 <HAL_TIMEx_PWMN_Start_IT+0x188>
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	681b      	ldr	r3, [r3, #0]
 8102480:	4a1e      	ldr	r2, [pc, #120]	; (81024fc <HAL_TIMEx_PWMN_Start_IT+0x1e0>)
 8102482:	4293      	cmp	r3, r2
 8102484:	d00e      	beq.n	81024a4 <HAL_TIMEx_PWMN_Start_IT+0x188>
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	681b      	ldr	r3, [r3, #0]
 810248a:	4a1d      	ldr	r2, [pc, #116]	; (8102500 <HAL_TIMEx_PWMN_Start_IT+0x1e4>)
 810248c:	4293      	cmp	r3, r2
 810248e:	d009      	beq.n	81024a4 <HAL_TIMEx_PWMN_Start_IT+0x188>
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	681b      	ldr	r3, [r3, #0]
 8102494:	4a1b      	ldr	r2, [pc, #108]	; (8102504 <HAL_TIMEx_PWMN_Start_IT+0x1e8>)
 8102496:	4293      	cmp	r3, r2
 8102498:	d004      	beq.n	81024a4 <HAL_TIMEx_PWMN_Start_IT+0x188>
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	681b      	ldr	r3, [r3, #0]
 810249e:	4a1a      	ldr	r2, [pc, #104]	; (8102508 <HAL_TIMEx_PWMN_Start_IT+0x1ec>)
 81024a0:	4293      	cmp	r3, r2
 81024a2:	d115      	bne.n	81024d0 <HAL_TIMEx_PWMN_Start_IT+0x1b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	681b      	ldr	r3, [r3, #0]
 81024a8:	689a      	ldr	r2, [r3, #8]
 81024aa:	4b18      	ldr	r3, [pc, #96]	; (810250c <HAL_TIMEx_PWMN_Start_IT+0x1f0>)
 81024ac:	4013      	ands	r3, r2
 81024ae:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81024b0:	68bb      	ldr	r3, [r7, #8]
 81024b2:	2b06      	cmp	r3, #6
 81024b4:	d015      	beq.n	81024e2 <HAL_TIMEx_PWMN_Start_IT+0x1c6>
 81024b6:	68bb      	ldr	r3, [r7, #8]
 81024b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81024bc:	d011      	beq.n	81024e2 <HAL_TIMEx_PWMN_Start_IT+0x1c6>
      {
        __HAL_TIM_ENABLE(htim);
 81024be:	687b      	ldr	r3, [r7, #4]
 81024c0:	681b      	ldr	r3, [r3, #0]
 81024c2:	681a      	ldr	r2, [r3, #0]
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	f042 0201 	orr.w	r2, r2, #1
 81024cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81024ce:	e008      	b.n	81024e2 <HAL_TIMEx_PWMN_Start_IT+0x1c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	681b      	ldr	r3, [r3, #0]
 81024d4:	681a      	ldr	r2, [r3, #0]
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	f042 0201 	orr.w	r2, r2, #1
 81024de:	601a      	str	r2, [r3, #0]
 81024e0:	e000      	b.n	81024e4 <HAL_TIMEx_PWMN_Start_IT+0x1c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81024e2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 81024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 81024e6:	4618      	mov	r0, r3
 81024e8:	3710      	adds	r7, #16
 81024ea:	46bd      	mov	sp, r7
 81024ec:	bd80      	pop	{r7, pc}
 81024ee:	bf00      	nop
 81024f0:	40010000 	.word	0x40010000
 81024f4:	40000400 	.word	0x40000400
 81024f8:	40000800 	.word	0x40000800
 81024fc:	40000c00 	.word	0x40000c00
 8102500:	40010400 	.word	0x40010400
 8102504:	40001800 	.word	0x40001800
 8102508:	40014000 	.word	0x40014000
 810250c:	00010007 	.word	0x00010007

08102510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8102510:	b480      	push	{r7}
 8102512:	b085      	sub	sp, #20
 8102514:	af00      	add	r7, sp, #0
 8102516:	6078      	str	r0, [r7, #4]
 8102518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810251a:	687b      	ldr	r3, [r7, #4]
 810251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102520:	2b01      	cmp	r3, #1
 8102522:	d101      	bne.n	8102528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8102524:	2302      	movs	r3, #2
 8102526:	e06d      	b.n	8102604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	2201      	movs	r2, #1
 810252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	2202      	movs	r2, #2
 8102534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	685b      	ldr	r3, [r3, #4]
 810253e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	689b      	ldr	r3, [r3, #8]
 8102546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	681b      	ldr	r3, [r3, #0]
 810254c:	4a30      	ldr	r2, [pc, #192]	; (8102610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810254e:	4293      	cmp	r3, r2
 8102550:	d004      	beq.n	810255c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8102552:	687b      	ldr	r3, [r7, #4]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	4a2f      	ldr	r2, [pc, #188]	; (8102614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8102558:	4293      	cmp	r3, r2
 810255a:	d108      	bne.n	810256e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810255c:	68fb      	ldr	r3, [r7, #12]
 810255e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8102562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8102564:	683b      	ldr	r3, [r7, #0]
 8102566:	685b      	ldr	r3, [r3, #4]
 8102568:	68fa      	ldr	r2, [r7, #12]
 810256a:	4313      	orrs	r3, r2
 810256c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810256e:	68fb      	ldr	r3, [r7, #12]
 8102570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8102576:	683b      	ldr	r3, [r7, #0]
 8102578:	681b      	ldr	r3, [r3, #0]
 810257a:	68fa      	ldr	r2, [r7, #12]
 810257c:	4313      	orrs	r3, r2
 810257e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	68fa      	ldr	r2, [r7, #12]
 8102586:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	681b      	ldr	r3, [r3, #0]
 810258c:	4a20      	ldr	r2, [pc, #128]	; (8102610 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810258e:	4293      	cmp	r3, r2
 8102590:	d022      	beq.n	81025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	681b      	ldr	r3, [r3, #0]
 8102596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810259a:	d01d      	beq.n	81025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	4a1d      	ldr	r2, [pc, #116]	; (8102618 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81025a2:	4293      	cmp	r3, r2
 81025a4:	d018      	beq.n	81025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	4a1c      	ldr	r2, [pc, #112]	; (810261c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81025ac:	4293      	cmp	r3, r2
 81025ae:	d013      	beq.n	81025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81025b0:	687b      	ldr	r3, [r7, #4]
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	4a1a      	ldr	r2, [pc, #104]	; (8102620 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81025b6:	4293      	cmp	r3, r2
 81025b8:	d00e      	beq.n	81025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	4a15      	ldr	r2, [pc, #84]	; (8102614 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81025c0:	4293      	cmp	r3, r2
 81025c2:	d009      	beq.n	81025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	4a16      	ldr	r2, [pc, #88]	; (8102624 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81025ca:	4293      	cmp	r3, r2
 81025cc:	d004      	beq.n	81025d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	681b      	ldr	r3, [r3, #0]
 81025d2:	4a15      	ldr	r2, [pc, #84]	; (8102628 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81025d4:	4293      	cmp	r3, r2
 81025d6:	d10c      	bne.n	81025f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81025d8:	68bb      	ldr	r3, [r7, #8]
 81025da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81025de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81025e0:	683b      	ldr	r3, [r7, #0]
 81025e2:	689b      	ldr	r3, [r3, #8]
 81025e4:	68ba      	ldr	r2, [r7, #8]
 81025e6:	4313      	orrs	r3, r2
 81025e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	68ba      	ldr	r2, [r7, #8]
 81025f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	2201      	movs	r2, #1
 81025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	2200      	movs	r2, #0
 81025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102602:	2300      	movs	r3, #0
}
 8102604:	4618      	mov	r0, r3
 8102606:	3714      	adds	r7, #20
 8102608:	46bd      	mov	sp, r7
 810260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810260e:	4770      	bx	lr
 8102610:	40010000 	.word	0x40010000
 8102614:	40010400 	.word	0x40010400
 8102618:	40000400 	.word	0x40000400
 810261c:	40000800 	.word	0x40000800
 8102620:	40000c00 	.word	0x40000c00
 8102624:	40001800 	.word	0x40001800
 8102628:	40014000 	.word	0x40014000

0810262c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810262c:	b480      	push	{r7}
 810262e:	b085      	sub	sp, #20
 8102630:	af00      	add	r7, sp, #0
 8102632:	6078      	str	r0, [r7, #4]
 8102634:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8102636:	2300      	movs	r3, #0
 8102638:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102640:	2b01      	cmp	r3, #1
 8102642:	d101      	bne.n	8102648 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8102644:	2302      	movs	r3, #2
 8102646:	e065      	b.n	8102714 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	2201      	movs	r2, #1
 810264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8102650:	68fb      	ldr	r3, [r7, #12]
 8102652:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8102656:	683b      	ldr	r3, [r7, #0]
 8102658:	68db      	ldr	r3, [r3, #12]
 810265a:	4313      	orrs	r3, r2
 810265c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810265e:	68fb      	ldr	r3, [r7, #12]
 8102660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102664:	683b      	ldr	r3, [r7, #0]
 8102666:	689b      	ldr	r3, [r3, #8]
 8102668:	4313      	orrs	r3, r2
 810266a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810266c:	68fb      	ldr	r3, [r7, #12]
 810266e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8102672:	683b      	ldr	r3, [r7, #0]
 8102674:	685b      	ldr	r3, [r3, #4]
 8102676:	4313      	orrs	r3, r2
 8102678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810267a:	68fb      	ldr	r3, [r7, #12]
 810267c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8102680:	683b      	ldr	r3, [r7, #0]
 8102682:	681b      	ldr	r3, [r3, #0]
 8102684:	4313      	orrs	r3, r2
 8102686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810268e:	683b      	ldr	r3, [r7, #0]
 8102690:	691b      	ldr	r3, [r3, #16]
 8102692:	4313      	orrs	r3, r2
 8102694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8102696:	68fb      	ldr	r3, [r7, #12]
 8102698:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810269c:	683b      	ldr	r3, [r7, #0]
 810269e:	695b      	ldr	r3, [r3, #20]
 81026a0:	4313      	orrs	r3, r2
 81026a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81026a4:	68fb      	ldr	r3, [r7, #12]
 81026a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81026aa:	683b      	ldr	r3, [r7, #0]
 81026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81026ae:	4313      	orrs	r3, r2
 81026b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81026b2:	68fb      	ldr	r3, [r7, #12]
 81026b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 81026b8:	683b      	ldr	r3, [r7, #0]
 81026ba:	699b      	ldr	r3, [r3, #24]
 81026bc:	041b      	lsls	r3, r3, #16
 81026be:	4313      	orrs	r3, r2
 81026c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	4a16      	ldr	r2, [pc, #88]	; (8102720 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 81026c8:	4293      	cmp	r3, r2
 81026ca:	d004      	beq.n	81026d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	4a14      	ldr	r2, [pc, #80]	; (8102724 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 81026d2:	4293      	cmp	r3, r2
 81026d4:	d115      	bne.n	8102702 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 81026d6:	68fb      	ldr	r3, [r7, #12]
 81026d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 81026dc:	683b      	ldr	r3, [r7, #0]
 81026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81026e0:	051b      	lsls	r3, r3, #20
 81026e2:	4313      	orrs	r3, r2
 81026e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 81026e6:	68fb      	ldr	r3, [r7, #12]
 81026e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81026ec:	683b      	ldr	r3, [r7, #0]
 81026ee:	69db      	ldr	r3, [r3, #28]
 81026f0:	4313      	orrs	r3, r2
 81026f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 81026f4:	68fb      	ldr	r3, [r7, #12]
 81026f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 81026fa:	683b      	ldr	r3, [r7, #0]
 81026fc:	6a1b      	ldr	r3, [r3, #32]
 81026fe:	4313      	orrs	r3, r2
 8102700:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	681b      	ldr	r3, [r3, #0]
 8102706:	68fa      	ldr	r2, [r7, #12]
 8102708:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	2200      	movs	r2, #0
 810270e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102712:	2300      	movs	r3, #0
}
 8102714:	4618      	mov	r0, r3
 8102716:	3714      	adds	r7, #20
 8102718:	46bd      	mov	sp, r7
 810271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810271e:	4770      	bx	lr
 8102720:	40010000 	.word	0x40010000
 8102724:	40010400 	.word	0x40010400

08102728 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8102728:	b480      	push	{r7}
 810272a:	b087      	sub	sp, #28
 810272c:	af00      	add	r7, sp, #0
 810272e:	60f8      	str	r0, [r7, #12]
 8102730:	60b9      	str	r1, [r7, #8]
 8102732:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8102734:	68bb      	ldr	r3, [r7, #8]
 8102736:	f003 030f 	and.w	r3, r3, #15
 810273a:	2204      	movs	r2, #4
 810273c:	fa02 f303 	lsl.w	r3, r2, r3
 8102740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8102742:	68fb      	ldr	r3, [r7, #12]
 8102744:	6a1a      	ldr	r2, [r3, #32]
 8102746:	697b      	ldr	r3, [r7, #20]
 8102748:	43db      	mvns	r3, r3
 810274a:	401a      	ands	r2, r3
 810274c:	68fb      	ldr	r3, [r7, #12]
 810274e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8102750:	68fb      	ldr	r3, [r7, #12]
 8102752:	6a1a      	ldr	r2, [r3, #32]
 8102754:	68bb      	ldr	r3, [r7, #8]
 8102756:	f003 030f 	and.w	r3, r3, #15
 810275a:	6879      	ldr	r1, [r7, #4]
 810275c:	fa01 f303 	lsl.w	r3, r1, r3
 8102760:	431a      	orrs	r2, r3
 8102762:	68fb      	ldr	r3, [r7, #12]
 8102764:	621a      	str	r2, [r3, #32]
}
 8102766:	bf00      	nop
 8102768:	371c      	adds	r7, #28
 810276a:	46bd      	mov	sp, r7
 810276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102770:	4770      	bx	lr

08102772 <EnableInput_CH1_E_CH2_E_CH3_D>:
  * @brief  Enable Input channel CH1 and CH2 for L6398     
  * @retval None
  */

void EnableInput_CH1_E_CH2_E_CH3_D(uint8_t step_position,uint8_t sync_rect,uint16_t CCR_value)
{
 8102772:	b580      	push	{r7, lr}
 8102774:	b082      	sub	sp, #8
 8102776:	af00      	add	r7, sp, #0
 8102778:	4603      	mov	r3, r0
 810277a:	71fb      	strb	r3, [r7, #7]
 810277c:	460b      	mov	r3, r1
 810277e:	71bb      	strb	r3, [r7, #6]
 8102780:	4613      	mov	r3, r2
 8102782:	80bb      	strh	r3, [r7, #4]
  L6398_ECH1CH2_DCH3_IO_Write(step_position,sync_rect,CCR_value);
 8102784:	88ba      	ldrh	r2, [r7, #4]
 8102786:	79b9      	ldrb	r1, [r7, #6]
 8102788:	79fb      	ldrb	r3, [r7, #7]
 810278a:	4618      	mov	r0, r3
 810278c:	f000 f864 	bl	8102858 <L6398_ECH1CH2_DCH3_IO_Write>
}
 8102790:	bf00      	nop
 8102792:	3708      	adds	r7, #8
 8102794:	46bd      	mov	sp, r7
 8102796:	bd80      	pop	{r7, pc}

08102798 <EnableInput_CH1_E_CH2_D_CH3_E>:
  * @brief  Enable Input channel CH1 and CH3 for L6398           
  * @retval None
*/

void EnableInput_CH1_E_CH2_D_CH3_E(uint8_t step_position,uint8_t sync_rect,uint16_t CCR_value)
{
 8102798:	b580      	push	{r7, lr}
 810279a:	b082      	sub	sp, #8
 810279c:	af00      	add	r7, sp, #0
 810279e:	4603      	mov	r3, r0
 81027a0:	71fb      	strb	r3, [r7, #7]
 81027a2:	460b      	mov	r3, r1
 81027a4:	71bb      	strb	r3, [r7, #6]
 81027a6:	4613      	mov	r3, r2
 81027a8:	80bb      	strh	r3, [r7, #4]
  L6398_ECH1CH3_DCH2_IO_Write(step_position,sync_rect,CCR_value);
 81027aa:	88ba      	ldrh	r2, [r7, #4]
 81027ac:	79b9      	ldrb	r1, [r7, #6]
 81027ae:	79fb      	ldrb	r3, [r7, #7]
 81027b0:	4618      	mov	r0, r3
 81027b2:	f000 f90b 	bl	81029cc <L6398_ECH1CH3_DCH2_IO_Write>
}
 81027b6:	bf00      	nop
 81027b8:	3708      	adds	r7, #8
 81027ba:	46bd      	mov	sp, r7
 81027bc:	bd80      	pop	{r7, pc}

081027be <EnableInput_CH1_D_CH2_E_CH3_E>:
  * @brief  Enable Input channel CH2 and CH3 for L6398           
  * @retval None
*/

void EnableInput_CH1_D_CH2_E_CH3_E(uint8_t step_position,uint8_t sync_rect,uint16_t CCR_value)
{
 81027be:	b580      	push	{r7, lr}
 81027c0:	b082      	sub	sp, #8
 81027c2:	af00      	add	r7, sp, #0
 81027c4:	4603      	mov	r3, r0
 81027c6:	71fb      	strb	r3, [r7, #7]
 81027c8:	460b      	mov	r3, r1
 81027ca:	71bb      	strb	r3, [r7, #6]
 81027cc:	4613      	mov	r3, r2
 81027ce:	80bb      	strh	r3, [r7, #4]
  L6398_ECH2CH3_DCH1_IO_Write(step_position,sync_rect,CCR_value);
 81027d0:	88ba      	ldrh	r2, [r7, #4]
 81027d2:	79b9      	ldrb	r1, [r7, #6]
 81027d4:	79fb      	ldrb	r3, [r7, #7]
 81027d6:	4618      	mov	r0, r3
 81027d8:	f000 f9b2 	bl	8102b40 <L6398_ECH2CH3_DCH1_IO_Write>
}
 81027dc:	bf00      	nop
 81027de:	3708      	adds	r7, #8
 81027e0:	46bd      	mov	sp, r7
 81027e2:	bd80      	pop	{r7, pc}

081027e4 <DisableInput_CH1_D_CH2_D_CH3_D>:
  * @brief  Enable Input channel CH2 and CH3 for L6398           
  * @retval None
*/

void DisableInput_CH1_D_CH2_D_CH3_D()
{
 81027e4:	b580      	push	{r7, lr}
 81027e6:	af00      	add	r7, sp, #0
  L6398_DCH1CH2CH3_IO_Write();
 81027e8:	f000 fa64 	bl	8102cb4 <L6398_DCH1CH2CH3_IO_Write>
}
 81027ec:	bf00      	nop
 81027ee:	bd80      	pop	{r7, pc}

081027f0 <Start_PWM_driving>:
  * @brief  Enable PWM channels for L6398           
  * @retval None
*/

void Start_PWM_driving()
{
 81027f0:	b580      	push	{r7, lr}
 81027f2:	af00      	add	r7, sp, #0
  L6398_Start_PWM_generation(); 
 81027f4:	f000 fa98 	bl	8102d28 <L6398_Start_PWM_generation>
} 
 81027f8:	bf00      	nop
 81027fa:	bd80      	pop	{r7, pc}

081027fc <Stop_PWM_driving>:
  * @brief  Disable PWM channels for L6398           
  * @retval None
*/

void Stop_PWM_driving()
{
 81027fc:	b580      	push	{r7, lr}
 81027fe:	af00      	add	r7, sp, #0
  L6398_Stop_PWM_generation(); 
 8102800:	f000 facc 	bl	8102d9c <L6398_Stop_PWM_generation>
}  
 8102804:	bf00      	nop
 8102806:	bd80      	pop	{r7, pc}

08102808 <HF_TIMx_SetDutyCycle_CH1>:
  * @brief  Set the Duty Cycle value for CH1           
  * @retval None
*/

void HF_TIMx_SetDutyCycle_CH1(uint16_t CCR_value)
{ 
 8102808:	b580      	push	{r7, lr}
 810280a:	b082      	sub	sp, #8
 810280c:	af00      	add	r7, sp, #0
 810280e:	4603      	mov	r3, r0
 8102810:	80fb      	strh	r3, [r7, #6]
  L6398_HFTIM_DC_CH1(CCR_value);
 8102812:	88fb      	ldrh	r3, [r7, #6]
 8102814:	4618      	mov	r0, r3
 8102816:	f000 fafb 	bl	8102e10 <L6398_HFTIM_DC_CH1>
}
 810281a:	bf00      	nop
 810281c:	3708      	adds	r7, #8
 810281e:	46bd      	mov	sp, r7
 8102820:	bd80      	pop	{r7, pc}

08102822 <HF_TIMx_SetDutyCycle_CH2>:
  * @brief  Set the Duty Cycle value for CH2           
  * @retval None
*/

void HF_TIMx_SetDutyCycle_CH2(uint16_t CCR_value)
{ 
 8102822:	b580      	push	{r7, lr}
 8102824:	b082      	sub	sp, #8
 8102826:	af00      	add	r7, sp, #0
 8102828:	4603      	mov	r3, r0
 810282a:	80fb      	strh	r3, [r7, #6]
  L6398_HFTIM_DC_CH2(CCR_value);
 810282c:	88fb      	ldrh	r3, [r7, #6]
 810282e:	4618      	mov	r0, r3
 8102830:	f000 fb00 	bl	8102e34 <L6398_HFTIM_DC_CH2>
}
 8102834:	bf00      	nop
 8102836:	3708      	adds	r7, #8
 8102838:	46bd      	mov	sp, r7
 810283a:	bd80      	pop	{r7, pc}

0810283c <HF_TIMx_SetDutyCycle_CH3>:
  * @retval None
*/


void HF_TIMx_SetDutyCycle_CH3(uint16_t CCR_value)
{ 
 810283c:	b580      	push	{r7, lr}
 810283e:	b082      	sub	sp, #8
 8102840:	af00      	add	r7, sp, #0
 8102842:	4603      	mov	r3, r0
 8102844:	80fb      	strh	r3, [r7, #6]
  L6398_HFTIM_DC_CH3(CCR_value);
 8102846:	88fb      	ldrh	r3, [r7, #6]
 8102848:	4618      	mov	r0, r3
 810284a:	f000 fb05 	bl	8102e58 <L6398_HFTIM_DC_CH3>
}
 810284e:	bf00      	nop
 8102850:	3708      	adds	r7, #8
 8102852:	46bd      	mov	sp, r7
 8102854:	bd80      	pop	{r7, pc}
	...

08102858 <L6398_ECH1CH2_DCH3_IO_Write>:
    * @brief Enable Input channel CH1 and CH2 for L6398   
  * @retval None
*/

void L6398_ECH1CH2_DCH3_IO_Write(uint8_t step_position,uint8_t sync_rect, uint16_t CCR_value)
{
 8102858:	b580      	push	{r7, lr}
 810285a:	b084      	sub	sp, #16
 810285c:	af00      	add	r7, sp, #0
 810285e:	4603      	mov	r3, r0
 8102860:	71fb      	strb	r3, [r7, #7]
 8102862:	460b      	mov	r3, r1
 8102864:	71bb      	strb	r3, [r7, #6]
 8102866:	4613      	mov	r3, r2
 8102868:	80bb      	strh	r3, [r7, #4]
  uint32_t tmpccmrx = 0;  
 810286a:	2300      	movs	r3, #0
 810286c:	60fb      	str	r3, [r7, #12]
  
//  HF_TIMx.Instance->CR1 |= 0x01;

  tmpccmrx = HF_TIMx.Instance->CCMR1;
 810286e:	4b56      	ldr	r3, [pc, #344]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 8102870:	681b      	ldr	r3, [r3, #0]
 8102872:	699b      	ldr	r3, [r3, #24]
 8102874:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8102876:	68fb      	ldr	r3, [r7, #12]
 8102878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102880:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8102882:	68fb      	ldr	r3, [r7, #12]
 8102884:	f023 0303 	bic.w	r3, r3, #3
 8102888:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= TIM_OCMODE_PWM1;
 810288a:	68fb      	ldr	r3, [r7, #12]
 810288c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8102890:	60fb      	str	r3, [r7, #12]
//  tmpccmrx |= 0x60;

  HF_TIMx.Instance->CCMR1 = tmpccmrx;
 8102892:	4b4d      	ldr	r3, [pc, #308]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	68fa      	ldr	r2, [r7, #12]
 8102898:	619a      	str	r2, [r3, #24]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC1E;   //enable
 810289a:	4b4b      	ldr	r3, [pc, #300]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	6a1a      	ldr	r2, [r3, #32]
 81028a0:	4b49      	ldr	r3, [pc, #292]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	f042 0201 	orr.w	r2, r2, #1
 81028a8:	621a      	str	r2, [r3, #32]
  if(sync_rect != 1)
 81028aa:	79bb      	ldrb	r3, [r7, #6]
 81028ac:	2b01      	cmp	r3, #1
 81028ae:	d00b      	beq.n	81028c8 <L6398_ECH1CH2_DCH3_IO_Write+0x70>
  {
    if(step_position != 1)
 81028b0:	79fb      	ldrb	r3, [r7, #7]
 81028b2:	2b01      	cmp	r3, #1
 81028b4:	d010      	beq.n	81028d8 <L6398_ECH1CH2_DCH3_IO_Write+0x80>
    {
      HF_TIMx.Instance->CCER |= TIM_CCER_CC1NE;   //enable
 81028b6:	4b44      	ldr	r3, [pc, #272]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81028b8:	681b      	ldr	r3, [r3, #0]
 81028ba:	6a1a      	ldr	r2, [r3, #32]
 81028bc:	4b42      	ldr	r3, [pc, #264]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81028be:	681b      	ldr	r3, [r3, #0]
 81028c0:	f042 0204 	orr.w	r2, r2, #4
 81028c4:	621a      	str	r2, [r3, #32]
 81028c6:	e007      	b.n	81028d8 <L6398_ECH1CH2_DCH3_IO_Write+0x80>
    }
  }

  else HF_TIMx.Instance->CCER |= TIM_CCER_CC1NE;   //enable
 81028c8:	4b3f      	ldr	r3, [pc, #252]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81028ca:	681b      	ldr	r3, [r3, #0]
 81028cc:	6a1a      	ldr	r2, [r3, #32]
 81028ce:	4b3e      	ldr	r3, [pc, #248]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81028d0:	681b      	ldr	r3, [r3, #0]
 81028d2:	f042 0204 	orr.w	r2, r2, #4
 81028d6:	621a      	str	r2, [r3, #32]

  if(step_position == 1)
 81028d8:	79fb      	ldrb	r3, [r7, #7]
 81028da:	2b01      	cmp	r3, #1
 81028dc:	d104      	bne.n	81028e8 <L6398_ECH1CH2_DCH3_IO_Write+0x90>
    L6398_HFTIM_DC_CH1(CCR_value);
 81028de:	88bb      	ldrh	r3, [r7, #4]
 81028e0:	4618      	mov	r0, r3
 81028e2:	f000 fa95 	bl	8102e10 <L6398_HFTIM_DC_CH1>
 81028e6:	e002      	b.n	81028ee <L6398_ECH1CH2_DCH3_IO_Write+0x96>
  else
    L6398_HFTIM_DC_CH1(0);
 81028e8:	2000      	movs	r0, #0
 81028ea:	f000 fa91 	bl	8102e10 <L6398_HFTIM_DC_CH1>

  tmpccmrx = HF_TIMx.Instance->CCMR1;
 81028ee:	4b36      	ldr	r3, [pc, #216]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	699b      	ldr	r3, [r3, #24]
 81028f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81028f6:	68fb      	ldr	r3, [r7, #12]
 81028f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81028fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102900:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8102902:	68fb      	ldr	r3, [r7, #12]
 8102904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102908:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= TIM_OCMODE_PWM1<<8;
 810290a:	68fb      	ldr	r3, [r7, #12]
 810290c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8102910:	60fb      	str	r3, [r7, #12]
  HF_TIMx.Instance->CCMR1 = tmpccmrx;
 8102912:	4b2d      	ldr	r3, [pc, #180]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 8102914:	681b      	ldr	r3, [r3, #0]
 8102916:	68fa      	ldr	r2, [r7, #12]
 8102918:	619a      	str	r2, [r3, #24]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC2E;   //enable
 810291a:	4b2b      	ldr	r3, [pc, #172]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	6a1a      	ldr	r2, [r3, #32]
 8102920:	4b29      	ldr	r3, [pc, #164]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 8102922:	681b      	ldr	r3, [r3, #0]
 8102924:	f042 0210 	orr.w	r2, r2, #16
 8102928:	621a      	str	r2, [r3, #32]
  if(sync_rect != 1)
 810292a:	79bb      	ldrb	r3, [r7, #6]
 810292c:	2b01      	cmp	r3, #1
 810292e:	d00b      	beq.n	8102948 <L6398_ECH1CH2_DCH3_IO_Write+0xf0>
  {
  if(step_position != 4)
 8102930:	79fb      	ldrb	r3, [r7, #7]
 8102932:	2b04      	cmp	r3, #4
 8102934:	d010      	beq.n	8102958 <L6398_ECH1CH2_DCH3_IO_Write+0x100>
    {
     HF_TIMx.Instance->CCER |= TIM_CCER_CC2NE;   //enable
 8102936:	4b24      	ldr	r3, [pc, #144]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	6a1a      	ldr	r2, [r3, #32]
 810293c:	4b22      	ldr	r3, [pc, #136]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 810293e:	681b      	ldr	r3, [r3, #0]
 8102940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102944:	621a      	str	r2, [r3, #32]
 8102946:	e007      	b.n	8102958 <L6398_ECH1CH2_DCH3_IO_Write+0x100>
    }
  }
  else   HF_TIMx.Instance->CCER |= TIM_CCER_CC2NE;   //enable
 8102948:	4b1f      	ldr	r3, [pc, #124]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	6a1a      	ldr	r2, [r3, #32]
 810294e:	4b1e      	ldr	r3, [pc, #120]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 8102950:	681b      	ldr	r3, [r3, #0]
 8102952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102956:	621a      	str	r2, [r3, #32]
  if(step_position == 4)
 8102958:	79fb      	ldrb	r3, [r7, #7]
 810295a:	2b04      	cmp	r3, #4
 810295c:	d104      	bne.n	8102968 <L6398_ECH1CH2_DCH3_IO_Write+0x110>
     L6398_HFTIM_DC_CH2(CCR_value);
 810295e:	88bb      	ldrh	r3, [r7, #4]
 8102960:	4618      	mov	r0, r3
 8102962:	f000 fa67 	bl	8102e34 <L6398_HFTIM_DC_CH2>
 8102966:	e002      	b.n	810296e <L6398_ECH1CH2_DCH3_IO_Write+0x116>
  else
    L6398_HFTIM_DC_CH2(0);
 8102968:	2000      	movs	r0, #0
 810296a:	f000 fa63 	bl	8102e34 <L6398_HFTIM_DC_CH2>

  tmpccmrx = HF_TIMx.Instance->CCMR2;
 810296e:	4b16      	ldr	r3, [pc, #88]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	69db      	ldr	r3, [r3, #28]
 8102974:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8102976:	68fb      	ldr	r3, [r7, #12]
 8102978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810297c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102980:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8102982:	68fb      	ldr	r3, [r7, #12]
 8102984:	f023 0303 	bic.w	r3, r3, #3
 8102988:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;
 810298a:	68fb      	ldr	r3, [r7, #12]
 810298c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102990:	60fb      	str	r3, [r7, #12]
  HF_TIMx.Instance->CCMR2 = tmpccmrx;
 8102992:	4b0d      	ldr	r3, [pc, #52]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 8102994:	681b      	ldr	r3, [r3, #0]
 8102996:	68fa      	ldr	r2, [r7, #12]
 8102998:	61da      	str	r2, [r3, #28]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC3E;  //disable
 810299a:	4b0b      	ldr	r3, [pc, #44]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 810299c:	681b      	ldr	r3, [r3, #0]
 810299e:	6a1a      	ldr	r2, [r3, #32]
 81029a0:	4b09      	ldr	r3, [pc, #36]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81029a8:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC3NE;  //disable
 81029aa:	4b07      	ldr	r3, [pc, #28]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	6a1a      	ldr	r2, [r3, #32]
 81029b0:	4b05      	ldr	r3, [pc, #20]	; (81029c8 <L6398_ECH1CH2_DCH3_IO_Write+0x170>)
 81029b2:	681b      	ldr	r3, [r3, #0]
 81029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81029b8:	621a      	str	r2, [r3, #32]
  L6398_HFTIM_DC_CH3(0);
 81029ba:	2000      	movs	r0, #0
 81029bc:	f000 fa4c 	bl	8102e58 <L6398_HFTIM_DC_CH3>
}
 81029c0:	bf00      	nop
 81029c2:	3710      	adds	r7, #16
 81029c4:	46bd      	mov	sp, r7
 81029c6:	bd80      	pop	{r7, pc}
 81029c8:	1000005c 	.word	0x1000005c

081029cc <L6398_ECH1CH3_DCH2_IO_Write>:
    * @brief Enable Input channel CH1 and CH3 for L6398   
  * @retval None
*/

void L6398_ECH1CH3_DCH2_IO_Write(uint8_t step_position,uint8_t sync_rect, uint16_t CCR_value)
{
 81029cc:	b580      	push	{r7, lr}
 81029ce:	b084      	sub	sp, #16
 81029d0:	af00      	add	r7, sp, #0
 81029d2:	4603      	mov	r3, r0
 81029d4:	71fb      	strb	r3, [r7, #7]
 81029d6:	460b      	mov	r3, r1
 81029d8:	71bb      	strb	r3, [r7, #6]
 81029da:	4613      	mov	r3, r2
 81029dc:	80bb      	strh	r3, [r7, #4]
  uint32_t tmpccmrx = 0;  
 81029de:	2300      	movs	r3, #0
 81029e0:	60fb      	str	r3, [r7, #12]
  
  tmpccmrx = HF_TIMx.Instance->CCMR2;
 81029e2:	4b56      	ldr	r3, [pc, #344]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	69db      	ldr	r3, [r3, #28]
 81029e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81029ea:	68fb      	ldr	r3, [r7, #12]
 81029ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81029f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81029f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81029f6:	68fb      	ldr	r3, [r7, #12]
 81029f8:	f023 0303 	bic.w	r3, r3, #3
 81029fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= TIM_OCMODE_PWM1;  
 81029fe:	68fb      	ldr	r3, [r7, #12]
 8102a00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8102a04:	60fb      	str	r3, [r7, #12]
  HF_TIMx.Instance->CCMR2 = tmpccmrx; 
 8102a06:	4b4d      	ldr	r3, [pc, #308]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	68fa      	ldr	r2, [r7, #12]
 8102a0c:	61da      	str	r2, [r3, #28]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC3E;   //enable 
 8102a0e:	4b4b      	ldr	r3, [pc, #300]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	6a1a      	ldr	r2, [r3, #32]
 8102a14:	4b49      	ldr	r3, [pc, #292]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102a1c:	621a      	str	r2, [r3, #32]
  
  if(sync_rect != 1)
 8102a1e:	79bb      	ldrb	r3, [r7, #6]
 8102a20:	2b01      	cmp	r3, #1
 8102a22:	d00b      	beq.n	8102a3c <L6398_ECH1CH3_DCH2_IO_Write+0x70>
  {
   if(step_position != 5)
 8102a24:	79fb      	ldrb	r3, [r7, #7]
 8102a26:	2b05      	cmp	r3, #5
 8102a28:	d010      	beq.n	8102a4c <L6398_ECH1CH3_DCH2_IO_Write+0x80>
    {        
     HF_TIMx.Instance->CCER |= TIM_CCER_CC3NE;   //enable
 8102a2a:	4b44      	ldr	r3, [pc, #272]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	6a1a      	ldr	r2, [r3, #32]
 8102a30:	4b42      	ldr	r3, [pc, #264]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8102a38:	621a      	str	r2, [r3, #32]
 8102a3a:	e007      	b.n	8102a4c <L6398_ECH1CH3_DCH2_IO_Write+0x80>
    }
  }   
  else  HF_TIMx.Instance->CCER |= TIM_CCER_CC3NE;   //enable
 8102a3c:	4b3f      	ldr	r3, [pc, #252]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	6a1a      	ldr	r2, [r3, #32]
 8102a42:	4b3e      	ldr	r3, [pc, #248]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8102a4a:	621a      	str	r2, [r3, #32]
  
  if(step_position == 5)
 8102a4c:	79fb      	ldrb	r3, [r7, #7]
 8102a4e:	2b05      	cmp	r3, #5
 8102a50:	d104      	bne.n	8102a5c <L6398_ECH1CH3_DCH2_IO_Write+0x90>
    L6398_HFTIM_DC_CH3(CCR_value);  
 8102a52:	88bb      	ldrh	r3, [r7, #4]
 8102a54:	4618      	mov	r0, r3
 8102a56:	f000 f9ff 	bl	8102e58 <L6398_HFTIM_DC_CH3>
 8102a5a:	e002      	b.n	8102a62 <L6398_ECH1CH3_DCH2_IO_Write+0x96>
  else  
    L6398_HFTIM_DC_CH3(0);    
 8102a5c:	2000      	movs	r0, #0
 8102a5e:	f000 f9fb 	bl	8102e58 <L6398_HFTIM_DC_CH3>
  
  tmpccmrx = HF_TIMx.Instance->CCMR1;
 8102a62:	4b36      	ldr	r3, [pc, #216]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a64:	681b      	ldr	r3, [r3, #0]
 8102a66:	699b      	ldr	r3, [r3, #24]
 8102a68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8102a6a:	68fb      	ldr	r3, [r7, #12]
 8102a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102a74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8102a76:	68fb      	ldr	r3, [r7, #12]
 8102a78:	f023 0303 	bic.w	r3, r3, #3
 8102a7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= TIM_OCMODE_PWM1;  
 8102a7e:	68fb      	ldr	r3, [r7, #12]
 8102a80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8102a84:	60fb      	str	r3, [r7, #12]
  HF_TIMx.Instance->CCMR1 = tmpccmrx;     
 8102a86:	4b2d      	ldr	r3, [pc, #180]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	68fa      	ldr	r2, [r7, #12]
 8102a8c:	619a      	str	r2, [r3, #24]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC1E;   //enable  
 8102a8e:	4b2b      	ldr	r3, [pc, #172]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a90:	681b      	ldr	r3, [r3, #0]
 8102a92:	6a1a      	ldr	r2, [r3, #32]
 8102a94:	4b29      	ldr	r3, [pc, #164]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	f042 0201 	orr.w	r2, r2, #1
 8102a9c:	621a      	str	r2, [r3, #32]

  if(sync_rect != 1)
 8102a9e:	79bb      	ldrb	r3, [r7, #6]
 8102aa0:	2b01      	cmp	r3, #1
 8102aa2:	d00b      	beq.n	8102abc <L6398_ECH1CH3_DCH2_IO_Write+0xf0>
  {
    if(step_position != 2)
 8102aa4:	79fb      	ldrb	r3, [r7, #7]
 8102aa6:	2b02      	cmp	r3, #2
 8102aa8:	d010      	beq.n	8102acc <L6398_ECH1CH3_DCH2_IO_Write+0x100>
    {        
      HF_TIMx.Instance->CCER |= TIM_CCER_CC1NE;   //enable  
 8102aaa:	4b24      	ldr	r3, [pc, #144]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	6a1a      	ldr	r2, [r3, #32]
 8102ab0:	4b22      	ldr	r3, [pc, #136]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102ab2:	681b      	ldr	r3, [r3, #0]
 8102ab4:	f042 0204 	orr.w	r2, r2, #4
 8102ab8:	621a      	str	r2, [r3, #32]
 8102aba:	e007      	b.n	8102acc <L6398_ECH1CH3_DCH2_IO_Write+0x100>
    }
  }
  else HF_TIMx.Instance->CCER |= TIM_CCER_CC1NE;   //enable  
 8102abc:	4b1f      	ldr	r3, [pc, #124]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102abe:	681b      	ldr	r3, [r3, #0]
 8102ac0:	6a1a      	ldr	r2, [r3, #32]
 8102ac2:	4b1e      	ldr	r3, [pc, #120]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102ac4:	681b      	ldr	r3, [r3, #0]
 8102ac6:	f042 0204 	orr.w	r2, r2, #4
 8102aca:	621a      	str	r2, [r3, #32]
  if(step_position == 2)
 8102acc:	79fb      	ldrb	r3, [r7, #7]
 8102ace:	2b02      	cmp	r3, #2
 8102ad0:	d104      	bne.n	8102adc <L6398_ECH1CH3_DCH2_IO_Write+0x110>
    L6398_HFTIM_DC_CH1(CCR_value);  
 8102ad2:	88bb      	ldrh	r3, [r7, #4]
 8102ad4:	4618      	mov	r0, r3
 8102ad6:	f000 f99b 	bl	8102e10 <L6398_HFTIM_DC_CH1>
 8102ada:	e002      	b.n	8102ae2 <L6398_ECH1CH3_DCH2_IO_Write+0x116>
  else  
    L6398_HFTIM_DC_CH1(0);    
 8102adc:	2000      	movs	r0, #0
 8102ade:	f000 f997 	bl	8102e10 <L6398_HFTIM_DC_CH1>
  
      tmpccmrx = HF_TIMx.Instance->CCMR1;
 8102ae2:	4b16      	ldr	r3, [pc, #88]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	699b      	ldr	r3, [r3, #24]
 8102ae8:	60fb      	str	r3, [r7, #12]
      tmpccmrx &= ~TIM_CCMR1_OC2M;
 8102aea:	68fb      	ldr	r3, [r7, #12]
 8102aec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102af0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102af4:	60fb      	str	r3, [r7, #12]
      tmpccmrx &= ~TIM_CCMR1_CC2S;
 8102af6:	68fb      	ldr	r3, [r7, #12]
 8102af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102afc:	60fb      	str	r3, [r7, #12]
      tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE<<8;  
 8102afe:	68fb      	ldr	r3, [r7, #12]
 8102b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102b04:	60fb      	str	r3, [r7, #12]
      HF_TIMx.Instance->CCMR1 = tmpccmrx;    
 8102b06:	4b0d      	ldr	r3, [pc, #52]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	68fa      	ldr	r2, [r7, #12]
 8102b0c:	619a      	str	r2, [r3, #24]
      HF_TIMx.Instance->CCER &= ~TIM_CCER_CC2E;  //disable
 8102b0e:	4b0b      	ldr	r3, [pc, #44]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	6a1a      	ldr	r2, [r3, #32]
 8102b14:	4b09      	ldr	r3, [pc, #36]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102b16:	681b      	ldr	r3, [r3, #0]
 8102b18:	f022 0210 	bic.w	r2, r2, #16
 8102b1c:	621a      	str	r2, [r3, #32]
      HF_TIMx.Instance->CCER &= ~TIM_CCER_CC2NE;  //disable 
 8102b1e:	4b07      	ldr	r3, [pc, #28]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	6a1a      	ldr	r2, [r3, #32]
 8102b24:	4b05      	ldr	r3, [pc, #20]	; (8102b3c <L6398_ECH1CH3_DCH2_IO_Write+0x170>)
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8102b2c:	621a      	str	r2, [r3, #32]
      L6398_HFTIM_DC_CH2(0);  
 8102b2e:	2000      	movs	r0, #0
 8102b30:	f000 f980 	bl	8102e34 <L6398_HFTIM_DC_CH2>
}
 8102b34:	bf00      	nop
 8102b36:	3710      	adds	r7, #16
 8102b38:	46bd      	mov	sp, r7
 8102b3a:	bd80      	pop	{r7, pc}
 8102b3c:	1000005c 	.word	0x1000005c

08102b40 <L6398_ECH2CH3_DCH1_IO_Write>:
  *  @{
    * @brief Enable Input channel CH2 and CH3 for L6398   
  * @retval None
*/
void L6398_ECH2CH3_DCH1_IO_Write(uint8_t step_position,uint8_t sync_rect, uint16_t CCR_value)
{
 8102b40:	b580      	push	{r7, lr}
 8102b42:	b084      	sub	sp, #16
 8102b44:	af00      	add	r7, sp, #0
 8102b46:	4603      	mov	r3, r0
 8102b48:	71fb      	strb	r3, [r7, #7]
 8102b4a:	460b      	mov	r3, r1
 8102b4c:	71bb      	strb	r3, [r7, #6]
 8102b4e:	4613      	mov	r3, r2
 8102b50:	80bb      	strh	r3, [r7, #4]
  uint32_t tmpccmrx = 0;   
 8102b52:	2300      	movs	r3, #0
 8102b54:	60fb      	str	r3, [r7, #12]
  
//  HF_TIMx.Instance->CR1 |= 0x01;

  tmpccmrx = HF_TIMx.Instance->CCMR1;
 8102b56:	4b56      	ldr	r3, [pc, #344]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	699b      	ldr	r3, [r3, #24]
 8102b5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8102b5e:	68fb      	ldr	r3, [r7, #12]
 8102b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102b68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8102b6a:	68fb      	ldr	r3, [r7, #12]
 8102b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102b70:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= TIM_OCMODE_PWM1<<8;  
 8102b72:	68fb      	ldr	r3, [r7, #12]
 8102b74:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8102b78:	60fb      	str	r3, [r7, #12]
  HF_TIMx.Instance->CCMR1 = tmpccmrx;    
 8102b7a:	4b4d      	ldr	r3, [pc, #308]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102b7c:	681b      	ldr	r3, [r3, #0]
 8102b7e:	68fa      	ldr	r2, [r7, #12]
 8102b80:	619a      	str	r2, [r3, #24]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC2E;   //enable 
 8102b82:	4b4b      	ldr	r3, [pc, #300]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102b84:	681b      	ldr	r3, [r3, #0]
 8102b86:	6a1a      	ldr	r2, [r3, #32]
 8102b88:	4b49      	ldr	r3, [pc, #292]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102b8a:	681b      	ldr	r3, [r3, #0]
 8102b8c:	f042 0210 	orr.w	r2, r2, #16
 8102b90:	621a      	str	r2, [r3, #32]
  if(sync_rect != 1)
 8102b92:	79bb      	ldrb	r3, [r7, #6]
 8102b94:	2b01      	cmp	r3, #1
 8102b96:	d00b      	beq.n	8102bb0 <L6398_ECH2CH3_DCH1_IO_Write+0x70>
  {
    if(step_position!= 3)
 8102b98:	79fb      	ldrb	r3, [r7, #7]
 8102b9a:	2b03      	cmp	r3, #3
 8102b9c:	d010      	beq.n	8102bc0 <L6398_ECH2CH3_DCH1_IO_Write+0x80>
    {   
      HF_TIMx.Instance->CCER |= TIM_CCER_CC2NE;   //enable   
 8102b9e:	4b44      	ldr	r3, [pc, #272]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102ba0:	681b      	ldr	r3, [r3, #0]
 8102ba2:	6a1a      	ldr	r2, [r3, #32]
 8102ba4:	4b42      	ldr	r3, [pc, #264]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102bac:	621a      	str	r2, [r3, #32]
 8102bae:	e007      	b.n	8102bc0 <L6398_ECH2CH3_DCH1_IO_Write+0x80>
    }
  }
  else HF_TIMx.Instance->CCER |= TIM_CCER_CC2NE;   //enable    
 8102bb0:	4b3f      	ldr	r3, [pc, #252]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	6a1a      	ldr	r2, [r3, #32]
 8102bb6:	4b3e      	ldr	r3, [pc, #248]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102bb8:	681b      	ldr	r3, [r3, #0]
 8102bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102bbe:	621a      	str	r2, [r3, #32]
  if(step_position == 3)
 8102bc0:	79fb      	ldrb	r3, [r7, #7]
 8102bc2:	2b03      	cmp	r3, #3
 8102bc4:	d104      	bne.n	8102bd0 <L6398_ECH2CH3_DCH1_IO_Write+0x90>
    L6398_HFTIM_DC_CH2(CCR_value);  
 8102bc6:	88bb      	ldrh	r3, [r7, #4]
 8102bc8:	4618      	mov	r0, r3
 8102bca:	f000 f933 	bl	8102e34 <L6398_HFTIM_DC_CH2>
 8102bce:	e002      	b.n	8102bd6 <L6398_ECH2CH3_DCH1_IO_Write+0x96>
  else  
    L6398_HFTIM_DC_CH2(0);    
 8102bd0:	2000      	movs	r0, #0
 8102bd2:	f000 f92f 	bl	8102e34 <L6398_HFTIM_DC_CH2>
  
  tmpccmrx = HF_TIMx.Instance->CCMR2;
 8102bd6:	4b36      	ldr	r3, [pc, #216]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102bd8:	681b      	ldr	r3, [r3, #0]
 8102bda:	69db      	ldr	r3, [r3, #28]
 8102bdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8102bde:	68fb      	ldr	r3, [r7, #12]
 8102be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102be8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8102bea:	68fb      	ldr	r3, [r7, #12]
 8102bec:	f023 0303 	bic.w	r3, r3, #3
 8102bf0:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= TIM_OCMODE_PWM1;  
 8102bf2:	68fb      	ldr	r3, [r7, #12]
 8102bf4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8102bf8:	60fb      	str	r3, [r7, #12]
  HF_TIMx.Instance->CCMR2 = tmpccmrx;     
 8102bfa:	4b2d      	ldr	r3, [pc, #180]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	68fa      	ldr	r2, [r7, #12]
 8102c00:	61da      	str	r2, [r3, #28]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC3E;   //enable 
 8102c02:	4b2b      	ldr	r3, [pc, #172]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c04:	681b      	ldr	r3, [r3, #0]
 8102c06:	6a1a      	ldr	r2, [r3, #32]
 8102c08:	4b29      	ldr	r3, [pc, #164]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102c10:	621a      	str	r2, [r3, #32]
  if(sync_rect != 1)
 8102c12:	79bb      	ldrb	r3, [r7, #6]
 8102c14:	2b01      	cmp	r3, #1
 8102c16:	d00b      	beq.n	8102c30 <L6398_ECH2CH3_DCH1_IO_Write+0xf0>
  {
    if(step_position != 6)
 8102c18:	79fb      	ldrb	r3, [r7, #7]
 8102c1a:	2b06      	cmp	r3, #6
 8102c1c:	d010      	beq.n	8102c40 <L6398_ECH2CH3_DCH1_IO_Write+0x100>
    {    
      HF_TIMx.Instance->CCER |= TIM_CCER_CC3NE;   //enable    
 8102c1e:	4b24      	ldr	r3, [pc, #144]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	6a1a      	ldr	r2, [r3, #32]
 8102c24:	4b22      	ldr	r3, [pc, #136]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c26:	681b      	ldr	r3, [r3, #0]
 8102c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8102c2c:	621a      	str	r2, [r3, #32]
 8102c2e:	e007      	b.n	8102c40 <L6398_ECH2CH3_DCH1_IO_Write+0x100>
    }
  }
   else HF_TIMx.Instance->CCER |= TIM_CCER_CC3NE;   //enable    
 8102c30:	4b1f      	ldr	r3, [pc, #124]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	6a1a      	ldr	r2, [r3, #32]
 8102c36:	4b1e      	ldr	r3, [pc, #120]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8102c3e:	621a      	str	r2, [r3, #32]
  if(step_position == 6)
 8102c40:	79fb      	ldrb	r3, [r7, #7]
 8102c42:	2b06      	cmp	r3, #6
 8102c44:	d104      	bne.n	8102c50 <L6398_ECH2CH3_DCH1_IO_Write+0x110>
    L6398_HFTIM_DC_CH3(CCR_value);  
 8102c46:	88bb      	ldrh	r3, [r7, #4]
 8102c48:	4618      	mov	r0, r3
 8102c4a:	f000 f905 	bl	8102e58 <L6398_HFTIM_DC_CH3>
 8102c4e:	e002      	b.n	8102c56 <L6398_ECH2CH3_DCH1_IO_Write+0x116>
  else  
    L6398_HFTIM_DC_CH3(0);    
 8102c50:	2000      	movs	r0, #0
 8102c52:	f000 f901 	bl	8102e58 <L6398_HFTIM_DC_CH3>
  
  tmpccmrx = HF_TIMx.Instance->CCMR1;
 8102c56:	4b16      	ldr	r3, [pc, #88]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	699b      	ldr	r3, [r3, #24]
 8102c5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8102c5e:	68fb      	ldr	r3, [r7, #12]
 8102c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102c68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8102c6a:	68fb      	ldr	r3, [r7, #12]
 8102c6c:	f023 0303 	bic.w	r3, r3, #3
 8102c70:	60fb      	str	r3, [r7, #12]
  tmpccmrx |= TIM_OCMODE_FORCED_INACTIVE;  
 8102c72:	68fb      	ldr	r3, [r7, #12]
 8102c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102c78:	60fb      	str	r3, [r7, #12]
  HF_TIMx.Instance->CCMR1 = tmpccmrx;  
 8102c7a:	4b0d      	ldr	r3, [pc, #52]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c7c:	681b      	ldr	r3, [r3, #0]
 8102c7e:	68fa      	ldr	r2, [r7, #12]
 8102c80:	619a      	str	r2, [r3, #24]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC1E;  //disable
 8102c82:	4b0b      	ldr	r3, [pc, #44]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c84:	681b      	ldr	r3, [r3, #0]
 8102c86:	6a1a      	ldr	r2, [r3, #32]
 8102c88:	4b09      	ldr	r3, [pc, #36]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	f022 0201 	bic.w	r2, r2, #1
 8102c90:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC1NE;  //disable 
 8102c92:	4b07      	ldr	r3, [pc, #28]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c94:	681b      	ldr	r3, [r3, #0]
 8102c96:	6a1a      	ldr	r2, [r3, #32]
 8102c98:	4b05      	ldr	r3, [pc, #20]	; (8102cb0 <L6398_ECH2CH3_DCH1_IO_Write+0x170>)
 8102c9a:	681b      	ldr	r3, [r3, #0]
 8102c9c:	f022 0204 	bic.w	r2, r2, #4
 8102ca0:	621a      	str	r2, [r3, #32]
  L6398_HFTIM_DC_CH1(0);    
 8102ca2:	2000      	movs	r0, #0
 8102ca4:	f000 f8b4 	bl	8102e10 <L6398_HFTIM_DC_CH1>
 }
 8102ca8:	bf00      	nop
 8102caa:	3710      	adds	r7, #16
 8102cac:	46bd      	mov	sp, r7
 8102cae:	bd80      	pop	{r7, pc}
 8102cb0:	1000005c 	.word	0x1000005c

08102cb4 <L6398_DCH1CH2CH3_IO_Write>:
  *  @{
    * @brief Disable all channels for L6398   
  * @retval None
*/
void L6398_DCH1CH2CH3_IO_Write()
{
 8102cb4:	b480      	push	{r7}
 8102cb6:	af00      	add	r7, sp, #0
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC1E;  //disable
 8102cb8:	4b1a      	ldr	r3, [pc, #104]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	6a1a      	ldr	r2, [r3, #32]
 8102cbe:	4b19      	ldr	r3, [pc, #100]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102cc0:	681b      	ldr	r3, [r3, #0]
 8102cc2:	f022 0201 	bic.w	r2, r2, #1
 8102cc6:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC1NE;  //disable 
 8102cc8:	4b16      	ldr	r3, [pc, #88]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102cca:	681b      	ldr	r3, [r3, #0]
 8102ccc:	6a1a      	ldr	r2, [r3, #32]
 8102cce:	4b15      	ldr	r3, [pc, #84]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	f022 0204 	bic.w	r2, r2, #4
 8102cd6:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC2E;  //disable
 8102cd8:	4b12      	ldr	r3, [pc, #72]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	6a1a      	ldr	r2, [r3, #32]
 8102cde:	4b11      	ldr	r3, [pc, #68]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102ce0:	681b      	ldr	r3, [r3, #0]
 8102ce2:	f022 0210 	bic.w	r2, r2, #16
 8102ce6:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC2NE;  //disable 
 8102ce8:	4b0e      	ldr	r3, [pc, #56]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102cea:	681b      	ldr	r3, [r3, #0]
 8102cec:	6a1a      	ldr	r2, [r3, #32]
 8102cee:	4b0d      	ldr	r3, [pc, #52]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102cf0:	681b      	ldr	r3, [r3, #0]
 8102cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8102cf6:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC3E;  //disable
 8102cf8:	4b0a      	ldr	r3, [pc, #40]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	6a1a      	ldr	r2, [r3, #32]
 8102cfe:	4b09      	ldr	r3, [pc, #36]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102d06:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC3NE;  //disable   
 8102d08:	4b06      	ldr	r3, [pc, #24]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	6a1a      	ldr	r2, [r3, #32]
 8102d0e:	4b05      	ldr	r3, [pc, #20]	; (8102d24 <L6398_DCH1CH2CH3_IO_Write+0x70>)
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8102d16:	621a      	str	r2, [r3, #32]
}
 8102d18:	bf00      	nop
 8102d1a:	46bd      	mov	sp, r7
 8102d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d20:	4770      	bx	lr
 8102d22:	bf00      	nop
 8102d24:	1000005c 	.word	0x1000005c

08102d28 <L6398_Start_PWM_generation>:
    * @brief Enable the PWM generation on Input channels for L6398 
  * @retval None
*/

void L6398_Start_PWM_generation()
{
 8102d28:	b480      	push	{r7}
 8102d2a:	af00      	add	r7, sp, #0
  HF_TIMx.Instance->CCER |= TIM_CCER_CC1E;   //enable 
 8102d2c:	4b1a      	ldr	r3, [pc, #104]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d2e:	681b      	ldr	r3, [r3, #0]
 8102d30:	6a1a      	ldr	r2, [r3, #32]
 8102d32:	4b19      	ldr	r3, [pc, #100]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d34:	681b      	ldr	r3, [r3, #0]
 8102d36:	f042 0201 	orr.w	r2, r2, #1
 8102d3a:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC1NE;   //enable     
 8102d3c:	4b16      	ldr	r3, [pc, #88]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	6a1a      	ldr	r2, [r3, #32]
 8102d42:	4b15      	ldr	r3, [pc, #84]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	f042 0204 	orr.w	r2, r2, #4
 8102d4a:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC2E;   //enable 
 8102d4c:	4b12      	ldr	r3, [pc, #72]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d4e:	681b      	ldr	r3, [r3, #0]
 8102d50:	6a1a      	ldr	r2, [r3, #32]
 8102d52:	4b11      	ldr	r3, [pc, #68]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	f042 0210 	orr.w	r2, r2, #16
 8102d5a:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC2NE;   //enable      
 8102d5c:	4b0e      	ldr	r3, [pc, #56]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	6a1a      	ldr	r2, [r3, #32]
 8102d62:	4b0d      	ldr	r3, [pc, #52]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102d6a:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC3E;   //enable 
 8102d6c:	4b0a      	ldr	r3, [pc, #40]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d6e:	681b      	ldr	r3, [r3, #0]
 8102d70:	6a1a      	ldr	r2, [r3, #32]
 8102d72:	4b09      	ldr	r3, [pc, #36]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102d7a:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER |= TIM_CCER_CC3NE;   //enable            
 8102d7c:	4b06      	ldr	r3, [pc, #24]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d7e:	681b      	ldr	r3, [r3, #0]
 8102d80:	6a1a      	ldr	r2, [r3, #32]
 8102d82:	4b05      	ldr	r3, [pc, #20]	; (8102d98 <L6398_Start_PWM_generation+0x70>)
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8102d8a:	621a      	str	r2, [r3, #32]
}
 8102d8c:	bf00      	nop
 8102d8e:	46bd      	mov	sp, r7
 8102d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d94:	4770      	bx	lr
 8102d96:	bf00      	nop
 8102d98:	1000005c 	.word	0x1000005c

08102d9c <L6398_Stop_PWM_generation>:
  *  @{
    * @brief Disable the PWM generation on Input channels for L6398 
  * @retval None
*/
void L6398_Stop_PWM_generation()
{
 8102d9c:	b480      	push	{r7}
 8102d9e:	af00      	add	r7, sp, #0
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC1E;  //disable
 8102da0:	4b1a      	ldr	r3, [pc, #104]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	6a1a      	ldr	r2, [r3, #32]
 8102da6:	4b19      	ldr	r3, [pc, #100]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	f022 0201 	bic.w	r2, r2, #1
 8102dae:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC1NE;  //disable 
 8102db0:	4b16      	ldr	r3, [pc, #88]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	6a1a      	ldr	r2, [r3, #32]
 8102db6:	4b15      	ldr	r3, [pc, #84]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	f022 0204 	bic.w	r2, r2, #4
 8102dbe:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC2E;  //disable
 8102dc0:	4b12      	ldr	r3, [pc, #72]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102dc2:	681b      	ldr	r3, [r3, #0]
 8102dc4:	6a1a      	ldr	r2, [r3, #32]
 8102dc6:	4b11      	ldr	r3, [pc, #68]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102dc8:	681b      	ldr	r3, [r3, #0]
 8102dca:	f022 0210 	bic.w	r2, r2, #16
 8102dce:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC2NE;  //disable 
 8102dd0:	4b0e      	ldr	r3, [pc, #56]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	6a1a      	ldr	r2, [r3, #32]
 8102dd6:	4b0d      	ldr	r3, [pc, #52]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8102dde:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC3E;  //disable
 8102de0:	4b0a      	ldr	r3, [pc, #40]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	6a1a      	ldr	r2, [r3, #32]
 8102de6:	4b09      	ldr	r3, [pc, #36]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102de8:	681b      	ldr	r3, [r3, #0]
 8102dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102dee:	621a      	str	r2, [r3, #32]
  HF_TIMx.Instance->CCER &= ~TIM_CCER_CC3NE;  //disable         
 8102df0:	4b06      	ldr	r3, [pc, #24]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102df2:	681b      	ldr	r3, [r3, #0]
 8102df4:	6a1a      	ldr	r2, [r3, #32]
 8102df6:	4b05      	ldr	r3, [pc, #20]	; (8102e0c <L6398_Stop_PWM_generation+0x70>)
 8102df8:	681b      	ldr	r3, [r3, #0]
 8102dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8102dfe:	621a      	str	r2, [r3, #32]
}
 8102e00:	bf00      	nop
 8102e02:	46bd      	mov	sp, r7
 8102e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e08:	4770      	bx	lr
 8102e0a:	bf00      	nop
 8102e0c:	1000005c 	.word	0x1000005c

08102e10 <L6398_HFTIM_DC_CH1>:
  *  @{
    * @brief Set the Duty Cycle value for CH1  
  * @retval None
*/
void L6398_HFTIM_DC_CH1(uint16_t CCRx)
{
 8102e10:	b480      	push	{r7}
 8102e12:	b083      	sub	sp, #12
 8102e14:	af00      	add	r7, sp, #0
 8102e16:	4603      	mov	r3, r0
 8102e18:	80fb      	strh	r3, [r7, #6]

  HF_TIMx.Instance->HF_TIMx_CCR1 = CCRx;  
 8102e1a:	4b05      	ldr	r3, [pc, #20]	; (8102e30 <L6398_HFTIM_DC_CH1+0x20>)
 8102e1c:	681b      	ldr	r3, [r3, #0]
 8102e1e:	88fa      	ldrh	r2, [r7, #6]
 8102e20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8102e22:	bf00      	nop
 8102e24:	370c      	adds	r7, #12
 8102e26:	46bd      	mov	sp, r7
 8102e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e2c:	4770      	bx	lr
 8102e2e:	bf00      	nop
 8102e30:	1000005c 	.word	0x1000005c

08102e34 <L6398_HFTIM_DC_CH2>:
  *  @{
    * @brief Set the Duty Cycle value for CH2
  * @retval None
*/
void  L6398_HFTIM_DC_CH2(uint16_t CCRx)
{
 8102e34:	b480      	push	{r7}
 8102e36:	b083      	sub	sp, #12
 8102e38:	af00      	add	r7, sp, #0
 8102e3a:	4603      	mov	r3, r0
 8102e3c:	80fb      	strh	r3, [r7, #6]
  HF_TIMx.Instance->HF_TIMx_CCR2 = CCRx;  
 8102e3e:	4b05      	ldr	r3, [pc, #20]	; (8102e54 <L6398_HFTIM_DC_CH2+0x20>)
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	88fa      	ldrh	r2, [r7, #6]
 8102e44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8102e46:	bf00      	nop
 8102e48:	370c      	adds	r7, #12
 8102e4a:	46bd      	mov	sp, r7
 8102e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e50:	4770      	bx	lr
 8102e52:	bf00      	nop
 8102e54:	1000005c 	.word	0x1000005c

08102e58 <L6398_HFTIM_DC_CH3>:
  *  @{
    * @brief Set the Duty Cycle value for CH3  
  * @retval None
*/
void  L6398_HFTIM_DC_CH3(uint16_t CCRx)
{ 
 8102e58:	b480      	push	{r7}
 8102e5a:	b083      	sub	sp, #12
 8102e5c:	af00      	add	r7, sp, #0
 8102e5e:	4603      	mov	r3, r0
 8102e60:	80fb      	strh	r3, [r7, #6]
  HF_TIMx.Instance->HF_TIMx_CCR3 = CCRx;  
 8102e62:	4b05      	ldr	r3, [pc, #20]	; (8102e78 <L6398_HFTIM_DC_CH3+0x20>)
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	88fa      	ldrh	r2, [r7, #6]
 8102e68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8102e6a:	bf00      	nop
 8102e6c:	370c      	adds	r7, #12
 8102e6e:	46bd      	mov	sp, r7
 8102e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e74:	4770      	bx	lr
 8102e76:	bf00      	nop
 8102e78:	1000005c 	.word	0x1000005c

08102e7c <memset>:
 8102e7c:	4402      	add	r2, r0
 8102e7e:	4603      	mov	r3, r0
 8102e80:	4293      	cmp	r3, r2
 8102e82:	d100      	bne.n	8102e86 <memset+0xa>
 8102e84:	4770      	bx	lr
 8102e86:	f803 1b01 	strb.w	r1, [r3], #1
 8102e8a:	e7f9      	b.n	8102e80 <memset+0x4>

08102e8c <__libc_init_array>:
 8102e8c:	b570      	push	{r4, r5, r6, lr}
 8102e8e:	4d0d      	ldr	r5, [pc, #52]	; (8102ec4 <__libc_init_array+0x38>)
 8102e90:	4c0d      	ldr	r4, [pc, #52]	; (8102ec8 <__libc_init_array+0x3c>)
 8102e92:	1b64      	subs	r4, r4, r5
 8102e94:	10a4      	asrs	r4, r4, #2
 8102e96:	2600      	movs	r6, #0
 8102e98:	42a6      	cmp	r6, r4
 8102e9a:	d109      	bne.n	8102eb0 <__libc_init_array+0x24>
 8102e9c:	4d0b      	ldr	r5, [pc, #44]	; (8102ecc <__libc_init_array+0x40>)
 8102e9e:	4c0c      	ldr	r4, [pc, #48]	; (8102ed0 <__libc_init_array+0x44>)
 8102ea0:	f000 f818 	bl	8102ed4 <_init>
 8102ea4:	1b64      	subs	r4, r4, r5
 8102ea6:	10a4      	asrs	r4, r4, #2
 8102ea8:	2600      	movs	r6, #0
 8102eaa:	42a6      	cmp	r6, r4
 8102eac:	d105      	bne.n	8102eba <__libc_init_array+0x2e>
 8102eae:	bd70      	pop	{r4, r5, r6, pc}
 8102eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8102eb4:	4798      	blx	r3
 8102eb6:	3601      	adds	r6, #1
 8102eb8:	e7ee      	b.n	8102e98 <__libc_init_array+0xc>
 8102eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8102ebe:	4798      	blx	r3
 8102ec0:	3601      	adds	r6, #1
 8102ec2:	e7f2      	b.n	8102eaa <__libc_init_array+0x1e>
 8102ec4:	08102efc 	.word	0x08102efc
 8102ec8:	08102efc 	.word	0x08102efc
 8102ecc:	08102efc 	.word	0x08102efc
 8102ed0:	08102f00 	.word	0x08102f00

08102ed4 <_init>:
 8102ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102ed6:	bf00      	nop
 8102ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102eda:	bc08      	pop	{r3}
 8102edc:	469e      	mov	lr, r3
 8102ede:	4770      	bx	lr

08102ee0 <_fini>:
 8102ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102ee2:	bf00      	nop
 8102ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102ee6:	bc08      	pop	{r3}
 8102ee8:	469e      	mov	lr, r3
 8102eea:	4770      	bx	lr
